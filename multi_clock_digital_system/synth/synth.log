
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)


-- Executing script file `synth/synth.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/system_top.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/system_top.v' to AST representation.
Generating RTLIL representation for module `\system_top'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\bit_synchronizer'.
Warning: Replacing memory \reg_file with list of registers. See /home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:17
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\reset_synchronizer'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\data_synchronizer'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v' to AST representation.
Generating RTLIL representation for module `\clk_gate'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v' to AST representation.
Generating RTLIL representation for module `\clk_divider'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_top.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_top.v' to AST representation.
Generating RTLIL representation for module `\uart_top'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v' to AST representation.
Generating RTLIL representation for module `\reg_file'.
Warning: Replacing memory \mem with list of registers. See /home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:33
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control.v' to AST representation.
Generating RTLIL representation for module `\sys_control'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v' to AST representation.
Generating RTLIL representation for module `\sys_control_tx'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v' to AST representation.
Generating RTLIL representation for module `\sys_control_rx'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx.v' to AST representation.
Generating RTLIL representation for module `\uart_rx'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx.v' to AST representation.
Generating RTLIL representation for module `\uart_tx'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v' to AST representation.
Generating RTLIL representation for module `\mux'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v' to AST representation.
Generating RTLIL representation for module `\serializer'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v' to AST representation.
Generating RTLIL representation for module `\parity_calc'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v' to AST representation.
Generating RTLIL representation for module `\uart_tx_fsm'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v' to AST representation.
Generating RTLIL representation for module `\stp_check'.
Successfully finished Verilog frontend.

21. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v' to AST representation.
Generating RTLIL representation for module `\strt_check'.
Successfully finished Verilog frontend.

22. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v' to AST representation.
Generating RTLIL representation for module `\parity_check'.
Successfully finished Verilog frontend.

23. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v' to AST representation.
Generating RTLIL representation for module `\deserializer'.
Successfully finished Verilog frontend.

24. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v' to AST representation.
Generating RTLIL representation for module `\edge_bit_counter'.
Successfully finished Verilog frontend.

25. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v' to AST representation.
Generating RTLIL representation for module `\data_sampling'.
Successfully finished Verilog frontend.

26. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v' to AST representation.
Generating RTLIL representation for module `\uart_rx_fsm'.
Successfully finished Verilog frontend.

27. Executing SYNTH pass.

27.1. Executing HIERARCHY pass (managing design hierarchy).

27.1.1. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \bit_synchronizer
Used module:     \reset_synchronizer
Used module:     \data_synchronizer
Used module:     \clk_gate
Used module:     \clk_divider
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \stp_check
Used module:             \strt_check
Used module:             \parity_check
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \data_sampling
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \serializer
Used module:             \parity_calc
Used module:             \uart_tx_fsm
Used module:     \alu
Used module:     \reg_file
Used module:     \sys_control
Used module:         \sys_control_tx
Used module:         \sys_control_rx

27.1.2. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \bit_synchronizer
Used module:     \reset_synchronizer
Used module:     \data_synchronizer
Used module:     \clk_gate
Used module:     \clk_divider
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \stp_check
Used module:             \strt_check
Used module:             \parity_check
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \data_sampling
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \serializer
Used module:             \parity_calc
Used module:             \uart_tx_fsm
Used module:     \alu
Used module:     \reg_file
Used module:     \sys_control
Used module:         \sys_control_tx
Used module:         \sys_control_rx
Removed 0 unused modules.
Warning: Resizing cell port system_top.reg_file_inst.addr_in from 8 bits to 4 bits.
Warning: Resizing cell port system_top.sys_control_inst.rf_addr_out from 8 bits to 4 bits.

27.2. Executing PROC pass (convert processes to netlists).

27.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 31 empty switches in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Cleaned up 31 empty switches.

27.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 6 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183 in module uart_rx_fsm.
Marked 8 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162 in module uart_rx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160 in module uart_rx_fsm.
Marked 3 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146 in module data_sampling.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140 in module edge_bit_counter.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136 in module deserializer.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130 in module parity_check.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128 in module parity_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126 in module strt_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125 in module stp_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117 in module uart_tx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116 in module uart_tx_fsm.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113 in module uart_tx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111 in module uart_tx_fsm.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102 in module parity_calc.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98 in module serializer.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93 in module serializer.
Removed 1 dead cases from process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92 in module mux.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92 in module mux.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86 in module sys_control_rx.
Marked 9 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85 in module sys_control_rx.
Marked 11 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81 in module sys_control_tx.
Marked 7 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79 in module sys_control_tx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77 in module sys_control_tx.
Removed 1 dead cases from process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56 in module reg_file.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56 in module reg_file.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34 in module alu.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32 in module alu.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21 in module clk_divider.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18 in module clk_gate.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8 in module reset_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4 in module bit_synchronizer.
Removed a total of 2 dead cases.

27.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 12 redundant assignments.
Promoted 41 assignments to connections.

27.2.4. Executing PROC_INIT pass (extract init attributes).

27.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
Found async reset \reset_n in `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Found async reset \reset_n in `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Found async reset \reset_n in `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Found async reset \reset_n in `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
Found async reset \reset_n in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Found async reset \reset_n in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
Found async reset \reset_n in `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Found async reset \reset_n in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Found async reset \reset_n in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
Found async reset \reset_n in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
Found async reset \reset_n in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Found async reset \reset_n in `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
Found async reset \reset_n in `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
Found async reset \reset_n in `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
Found async reset \reset_n in `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.

27.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~91 debug messages>

27.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
     1/10: $3\data_valid_out[0:0]
     2/10: $2\data_valid_out[0:0]
     3/10: $3\deser_en_out[0:0]
     4/10: $2\deser_en_out[0:0]
     5/10: $2\strt_chk_en_out[0:0]
     6/10: $1\strt_chk_en_out[0:0]
     7/10: $1\counter_en_out[0:0]
     8/10: $1\data_sample_en_out[0:0]
     9/10: $1\deser_en_out[0:0]
    10/10: $1\data_valid_out[0:0]
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
     1/8: $8\next_state[2:0]
     2/8: $7\next_state[2:0]
     3/8: $6\next_state[2:0]
     4/8: $5\next_state[2:0]
     5/8: $4\next_state[2:0]
     6/8: $3\next_state[2:0]
     7/8: $2\next_state[2:0]
     8/8: $1\next_state[2:0]
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
     1/3: $0\register[2:0] [2]
     2/3: $0\register[2:0] [1]
     3/3: $0\register[2:0] [0]
Creating decoders for process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
     1/2: $0\edge_cnt_out[4:0]
     2/2: $0\bit_cnt_out[3:0]
Creating decoders for process `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
     1/1: $0\register[7:0]
Creating decoders for process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
     1/5: $5\par_err_out[0:0]
     2/5: $4\par_err_out[0:0]
     3/5: $3\par_err_out[0:0]
     4/5: $2\par_err_out[0:0]
     5/5: $1\par_err_out[0:0]
Creating decoders for process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
     1/1: $0\register[8:0]
Creating decoders for process `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
     1/2: $2\strt_err_out[0:0]
     2/2: $1\strt_err_out[0:0]
Creating decoders for process `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
     1/2: $2\stp_err_out[0:0]
     2/2: $1\stp_err_out[0:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
     1/1: $0\busy_out[0:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
     1/1: $1\mux_sel_out[1:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
     1/5: $5\next_state[2:0]
     2/5: $4\next_state[2:0]
     3/5: $3\next_state[2:0]
     4/5: $2\next_state[2:0]
     5/5: $1\next_state[2:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
     1/1: $0\par_bit_out[0:0]
Creating decoders for process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
     1/1: $0\counter[2:0]
Creating decoders for process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
     1/1: $0\int_reg[7:0]
Creating decoders for process `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
     1/1: $1\tx_out[0:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
     1/1: $0\uart_alu_send_data_out[15:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
     1/1: $0\uart_rf_send_data_out[7:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
     1/1: $0\rf_addr_reg[7:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
     1/30: $2\alu_data_store[0:0]
     2/30: $2\uart_alu_send_out[0:0]
     3/30: $2\alu_fun_out[3:0]
     4/30: $2\alu_en_out[0:0]
     5/30: $4\rf_addr_out[3:0]
     6/30: $4\rf_wr_data_out[7:0]
     7/30: $4\rf_wr_en_out[0:0]
     8/30: $3\rf_addr_out[3:0]
     9/30: $3\rf_wr_data_out[7:0]
    10/30: $3\rf_wr_en_out[0:0]
    11/30: $2\rf_rd_store[0:0]
    12/30: $2\uart_rf_send_out[0:0]
    13/30: $3\rf_addr_en[0:0]
    14/30: $2\rf_wr_data_out[7:0]
    15/30: $2\rf_addr_out[3:0]
    16/30: $2\rf_wr_en_out[0:0]
    17/30: $2\rf_addr_en[0:0]
    18/30: $1\alu_data_store[0:0]
    19/30: $1\rf_rd_store[0:0]
    20/30: $1\rf_addr_en[0:0]
    21/30: $1\uart_alu_send_out[0:0]
    22/30: $1\uart_rf_send_out[0:0]
    23/30: $1\clk_div_en_out[0:0]
    24/30: $1\clk_gate_en_out[0:0]
    25/30: $1\alu_fun_out[3:0]
    26/30: $1\alu_en_out[0:0]
    27/30: $1\rf_wr_data_out[7:0]
    28/30: $1\rf_addr_out[3:0]
    29/30: $1\rf_rd_en_out[0:0]
    30/30: $1\rf_wr_en_out[0:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
     1/11: $11\next_state[3:0]
     2/11: $10\next_state[3:0]
     3/11: $9\next_state[3:0]
     4/11: $8\next_state[3:0]
     5/11: $7\next_state[3:0]
     6/11: $6\next_state[3:0]
     7/11: $5\next_state[3:0]
     8/11: $4\next_state[3:0]
     9/11: $3\next_state[3:0]
    10/11: $2\next_state[3:0]
    11/11: $1\next_state[3:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
     1/1: $0\current_state[3:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
     1/2: $1\uart_tx_data_out[7:0]
     2/2: $1\uart_tx_data_valid_out[0:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
     1/7: $7\next_state[2:0]
     2/7: $6\next_state[2:0]
     3/7: $5\next_state[2:0]
     4/7: $4\next_state[2:0]
     5/7: $3\next_state[2:0]
     6/7: $2\next_state[2:0]
     7/7: $1\next_state[2:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
     1/30: $4$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$76
     2/30: $3$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$75
     3/30: $3$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$74
     4/30: $2$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR[3:0]$68
     5/30: $2$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA[7:0]$69
     6/30: $2$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$71
     7/30: $2$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$70
     8/30: $1$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$65
     9/30: $1$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$64
    10/30: $1$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA[7:0]$63
    11/30: $1$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR[3:0]$62
    12/30: $1\i[31:0]
    13/30: $0\mem[15][7:0]
    14/30: $0\mem[14][7:0]
    15/30: $0\mem[13][7:0]
    16/30: $0\mem[12][7:0]
    17/30: $0\mem[11][7:0]
    18/30: $0\mem[10][7:0]
    19/30: $0\mem[9][7:0]
    20/30: $0\mem[8][7:0]
    21/30: $0\mem[7][7:0]
    22/30: $0\mem[6][7:0]
    23/30: $0\mem[5][7:0]
    24/30: $0\mem[4][7:0]
    25/30: $0\mem[3][7:0]
    26/30: $0\mem[2][7:0]
    27/30: $0\mem[1][7:0]
    28/30: $0\mem[0][7:0]
    29/30: $0\rd_data_valid_out[0:0]
    30/30: $0\rd_data_out[7:0]
Creating decoders for process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
     1/6: $5\alu_out_comp[15:0]
     2/6: $4\alu_out_comp[15:0]
     3/6: $3\alu_out_comp[15:0]
     4/6: $2\alu_out_comp[15:0]
     5/6: $1\alu_out_comp[15:0]
     6/6: $1\alu_out_comp_valid[0:0]
Creating decoders for process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
     1/2: $0\data_valid_out[0:0]
     2/2: $0\data_out[15:0]
Creating decoders for process `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
     1/1: $0\count[4:0]
Creating decoders for process `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
     1/1: $1\latch_out[0:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
     1/1: $0\sync_data_out[7:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
     1/1: $0\enable_pulse_out[0:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
     1/1: $0\ff[2:0]
Creating decoders for process `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
     1/1: $0\ff[2:0]
Creating decoders for process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
     1/4: $1\i[31:0]
     2/4: $0\reg_file[0][1:0]
     3/4: $0\sync_data_out[0:0]
     4/4: $1$splitcmplxassign$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:24$3[2:0]$7

27.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\uart_rx_fsm.\data_valid_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\data_sample_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\deser_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\stp_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\strt_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\par_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\counter_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\next_state' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
No latch inferred for signal `\parity_check.\par_err_out' from process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
No latch inferred for signal `\strt_check.\strt_err_out' from process `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
No latch inferred for signal `\stp_check.\stp_err_out' from process `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
No latch inferred for signal `\uart_tx_fsm.\mux_sel_out' from process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
No latch inferred for signal `\uart_tx_fsm.\next_state' from process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
No latch inferred for signal `\mux.\tx_out' from process `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
No latch inferred for signal `\sys_control_rx.\rf_wr_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_rd_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_addr_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_wr_data_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_fun_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\clk_gate_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\clk_div_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\uart_rf_send_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\uart_alu_send_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_addr_en' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_rd_store' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_data_store' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\next_state' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
No latch inferred for signal `\sys_control_tx.\uart_tx_data_valid_out' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
No latch inferred for signal `\sys_control_tx.\uart_tx_data_out' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
No latch inferred for signal `\sys_control_tx.\next_state' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
No latch inferred for signal `\alu.\alu_out_comp' from process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
No latch inferred for signal `\alu.\alu_out_comp_valid' from process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Latch inferred for signal `\clk_gate.\latch_out' from process `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18': $auto$proc_dlatch.cc:427:proc_dlatch$1270

27.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\uart_rx_fsm.\current_state' using process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
  created $adff cell `$procdff$1271' with positive edge clock and negative level reset.
Creating register for signal `\data_sampling.\register' using process `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
  created $adff cell `$procdff$1272' with positive edge clock and negative level reset.
Creating register for signal `\edge_bit_counter.\bit_cnt_out' using process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
  created $adff cell `$procdff$1273' with positive edge clock and negative level reset.
Creating register for signal `\edge_bit_counter.\edge_cnt_out' using process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
  created $adff cell `$procdff$1274' with positive edge clock and negative level reset.
Creating register for signal `\deserializer.\register' using process `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
  created $adff cell `$procdff$1275' with positive edge clock and negative level reset.
Creating register for signal `\parity_check.\register' using process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
  created $adff cell `$procdff$1276' with positive edge clock and negative level reset.
Creating register for signal `\uart_tx_fsm.\busy_out' using process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
  created $adff cell `$procdff$1277' with positive edge clock and negative level reset.
Creating register for signal `\uart_tx_fsm.\current_state' using process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
  created $adff cell `$procdff$1278' with positive edge clock and negative level reset.
Creating register for signal `\parity_calc.\par_bit_out' using process `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
  created $adff cell `$procdff$1279' with positive edge clock and negative level reset.
Creating register for signal `\serializer.\counter' using process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
  created $adff cell `$procdff$1280' with positive edge clock and negative level reset.
Creating register for signal `\serializer.\int_reg' using process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
  created $adff cell `$procdff$1281' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\uart_alu_send_data_out' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
  created $adff cell `$procdff$1282' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\uart_rf_send_data_out' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
  created $adff cell `$procdff$1283' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\rf_addr_reg' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
  created $adff cell `$procdff$1284' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\current_state' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
  created $adff cell `$procdff$1285' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_tx.\current_state' using process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
  created $adff cell `$procdff$1286' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\rd_data_out' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1287' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\rd_data_valid_out' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1288' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\i' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1289' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[0]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1290' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[1]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1291' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[2]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1292' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[3]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1293' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[4]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1294' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[5]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1295' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[6]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1296' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[7]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1297' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[8]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1298' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[9]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1299' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[10]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1300' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[11]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1301' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[12]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1302' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[13]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1303' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[14]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1304' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[15]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1305' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1306' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1307' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1308' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1309' with positive edge clock and negative level reset.
Creating register for signal `\alu.\data_out' using process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
  created $adff cell `$procdff$1310' with positive edge clock and negative level reset.
Creating register for signal `\alu.\data_valid_out' using process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
  created $adff cell `$procdff$1311' with positive edge clock and negative level reset.
Creating register for signal `\clk_divider.\count' using process `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
  created $adff cell `$procdff$1312' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\sync_data_out' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
  created $adff cell `$procdff$1313' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\enable_pulse_out' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
  created $adff cell `$procdff$1314' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\ff' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
  created $adff cell `$procdff$1315' with positive edge clock and negative level reset.
Creating register for signal `\reset_synchronizer.\ff' using process `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
  created $adff cell `$procdff$1316' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\sync_data_out' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1317' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\i' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1318' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.$splitcmplxassign$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:24$3' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1319' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\reg_file[0]' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1320' with positive edge clock and negative level reset.

27.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

27.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
Found and cleaned up 8 empty switches in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
Found and cleaned up 4 empty switches in `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Removing empty process `data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Found and cleaned up 3 empty switches in `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Removing empty process `edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Found and cleaned up 1 empty switch in `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Removing empty process `deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Found and cleaned up 5 empty switches in `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
Removing empty process `parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
Removing empty process `parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
Found and cleaned up 2 empty switches in `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
Removing empty process `strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
Found and cleaned up 2 empty switches in `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
Removing empty process `stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
Found and cleaned up 2 empty switches in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Found and cleaned up 1 empty switch in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
Found and cleaned up 5 empty switches in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
Found and cleaned up 2 empty switches in `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Removing empty process `parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Found and cleaned up 2 empty switches in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Removing empty process `serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Found and cleaned up 2 empty switches in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Removing empty process `serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Found and cleaned up 1 empty switch in `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
Removing empty process `mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Found and cleaned up 9 empty switches in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
Found and cleaned up 11 empty switches in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
Found and cleaned up 1 empty switch in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
Found and cleaned up 7 empty switches in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
Found and cleaned up 4 empty switches in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Removing empty process `reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Found and cleaned up 5 empty switches in `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Removing empty process `alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Removing empty process `alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
Found and cleaned up 3 empty switches in `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Removing empty process `clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Found and cleaned up 1 empty switch in `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
Removing empty process `clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
Found and cleaned up 1 empty switch in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
Removing empty process `reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
Removing empty process `bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
Cleaned up 91 empty switches.

27.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_rx_fsm.
<suppressed ~6 debug messages>
Optimizing module data_sampling.
Optimizing module edge_bit_counter.
Optimizing module deserializer.
Optimizing module parity_check.
<suppressed ~4 debug messages>
Optimizing module strt_check.
<suppressed ~1 debug messages>
Optimizing module stp_check.
Optimizing module uart_tx_fsm.
<suppressed ~6 debug messages>
Optimizing module parity_calc.
<suppressed ~2 debug messages>
Optimizing module serializer.
<suppressed ~1 debug messages>
Optimizing module mux.
<suppressed ~1 debug messages>
Optimizing module uart_tx.
Optimizing module uart_rx.
Optimizing module sys_control_rx.
<suppressed ~3 debug messages>
Optimizing module sys_control_tx.
<suppressed ~4 debug messages>
Optimizing module sys_control.
Optimizing module reg_file.
<suppressed ~2 debug messages>
Optimizing module alu.
<suppressed ~3 debug messages>
Optimizing module uart_top.
Optimizing module clk_divider.
<suppressed ~3 debug messages>
Optimizing module clk_gate.
<suppressed ~7 debug messages>
Optimizing module data_synchronizer.
Optimizing module reset_synchronizer.
Optimizing module bit_synchronizer.
Optimizing module system_top.

27.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_rx_fsm.
<suppressed ~4 debug messages>
Optimizing module data_sampling.
<suppressed ~6 debug messages>
Optimizing module edge_bit_counter.
Optimizing module deserializer.
Optimizing module parity_check.
Optimizing module strt_check.
Optimizing module stp_check.
Optimizing module uart_tx_fsm.
Optimizing module parity_calc.
Optimizing module serializer.
Optimizing module mux.
Optimizing module uart_tx.
Optimizing module uart_rx.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module sys_control.
Optimizing module reg_file.
Optimizing module alu.
Optimizing module uart_top.
Optimizing module clk_divider.
<suppressed ~2 debug messages>
Optimizing module clk_gate.
Optimizing module data_synchronizer.
Optimizing module reset_synchronizer.
Optimizing module bit_synchronizer.
Optimizing module system_top.

27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \uart_tx_fsm..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \system_top..
Removed 46 unused cells and 427 unused wires.
<suppressed ~69 debug messages>

27.5. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

27.6. Executing OPT pass (performing simple optimizations).

27.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~18 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
<suppressed ~3 debug messages>
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~48 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~144 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~36 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~99 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~30 debug messages>
Removed a total of 126 cells.

27.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1193.
    dead port 2/2 on $mux $procmux$1195.
    dead port 2/2 on $mux $procmux$1205.
    dead port 2/2 on $mux $procmux$1207.
    dead port 2/2 on $mux $procmux$1218.
    dead port 2/2 on $mux $procmux$1220.
    dead port 2/2 on $mux $procmux$1240.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1250.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$376.
    dead port 2/2 on $mux $procmux$379.
    dead port 2/2 on $mux $procmux$381.
    dead port 2/2 on $mux $procmux$385.
    dead port 2/2 on $mux $procmux$388.
    dead port 2/2 on $mux $procmux$390.
    dead port 1/2 on $mux $procmux$397.
    dead port 2/2 on $mux $procmux$399.
    dead port 2/2 on $mux $procmux$405.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$945.
    dead port 1/2 on $mux $procmux$948.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$423.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$414.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$654.
    dead port 2/2 on $mux $procmux$516.
    dead port 2/2 on $mux $procmux$522.
    dead port 2/2 on $mux $procmux$529.
    dead port 2/2 on $mux $procmux$536.
    dead port 2/2 on $mux $procmux$543.
    dead port 2/2 on $mux $procmux$551.
    dead port 2/2 on $mux $procmux$559.
    dead port 2/2 on $mux $procmux$567.
    dead port 2/2 on $mux $procmux$740.
    dead port 2/2 on $mux $procmux$576.
    dead port 2/2 on $mux $procmux$747.
    dead port 2/2 on $mux $procmux$755.
    dead port 2/2 on $mux $procmux$764.
    dead port 2/2 on $mux $procmux$586.
    dead port 2/2 on $mux $procmux$774.
    dead port 2/2 on $mux $procmux$785.
    dead port 2/2 on $mux $procmux$797.
    dead port 2/2 on $mux $procmux$596.
    dead port 2/2 on $mux $procmux$810.
    dead port 2/2 on $mux $procmux$828.
    dead port 2/2 on $mux $procmux$830.
    dead port 2/2 on $mux $procmux$844.
    dead port 2/2 on $mux $procmux$607.
    dead port 2/2 on $mux $procmux$618.
    dead port 2/2 on $mux $procmux$629.
    dead port 2/2 on $mux $procmux$641.
    dead port 2/2 on $mux $procmux$510.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$878.
    dead port 2/2 on $mux $procmux$886.
    dead port 2/2 on $mux $procmux$895.
    dead port 1/2 on $mux $procmux$906.
    dead port 2/2 on $mux $procmux$908.
    dead port 2/2 on $mux $procmux$918.
    dead port 2/2 on $mux $procmux$871.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$212.
    dead port 2/2 on $mux $procmux$219.
    dead port 2/2 on $mux $procmux$227.
    dead port 2/2 on $mux $procmux$236.
    dead port 2/2 on $mux $procmux$204.
    dead port 2/2 on $mux $procmux$206.
    dead port 1/2 on $mux $procmux$269.
    dead port 2/2 on $mux $procmux$271.
    dead port 2/2 on $mux $procmux$277.
    dead port 2/2 on $mux $procmux$284.
    dead port 2/2 on $mux $procmux$292.
    dead port 1/2 on $mux $procmux$302.
    dead port 2/2 on $mux $procmux$304.
    dead port 2/2 on $mux $procmux$313.
    dead port 2/2 on $mux $procmux$323.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$442.
    dead port 2/2 on $mux $procmux$451.
    dead port 2/2 on $mux $procmux$453.
    dead port 2/2 on $mux $procmux$461.
    dead port 2/2 on $mux $procmux$471.
Removed 76 multiplexer ports.
<suppressed ~65 debug messages>

27.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    New ctrl vector for $pmux cell $procmux$696: $auto$opt_reduce.cc:134:opt_pmux$1322
    New ctrl vector for $pmux cell $procmux$710: $auto$opt_reduce.cc:134:opt_pmux$1324
    New ctrl vector for $pmux cell $procmux$717: { $auto$opt_reduce.cc:134:opt_pmux$1326 $procmux$537_CMP }
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    New ctrl vector for $pmux cell $procmux$863: $auto$opt_reduce.cc:134:opt_pmux$1328
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
    New ctrl vector for $pmux cell $procmux$251: $auto$opt_reduce.cc:134:opt_pmux$1330
    New ctrl vector for $pmux cell $procmux$245: $auto$opt_reduce.cc:134:opt_pmux$1332
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 6 changes.

27.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~27 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~6 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~3 debug messages>
Removed a total of 13 cells.

27.6.6. Executing OPT_DFF pass (perform DFF optimizations).

27.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 212 unused wires.
<suppressed ~11 debug messages>

27.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.9. Rerunning OPT passes. (Maybe there is more to do..)

27.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    New ctrl vector for $pmux cell $procmux$672: $auto$opt_reduce.cc:134:opt_pmux$1334
    New ctrl vector for $pmux cell $procmux$732: $auto$opt_reduce.cc:134:opt_pmux$1336
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    New ctrl vector for $pmux cell $procmux$921: { $procmux$909_CMP $procmux$860_CMP $procmux$879_CMP $auto$opt_reduce.cc:134:opt_pmux$1338 }
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
    New ctrl vector for $pmux cell $procmux$474: { $procmux$437_CMP \ser_en_out $procmux$435_CMP $auto$opt_reduce.cc:134:opt_pmux$1340 }
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 4 changes.

27.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.6.13. Executing OPT_DFF pass (perform DFF optimizations).

27.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.16. Rerunning OPT passes. (Maybe there is more to do..)

27.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.6.20. Executing OPT_DFF pass (perform DFF optimizations).

27.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.23. Finished OPT passes. (There is nothing left to do.)

27.7. Executing FSM pass (extract and optimize FSM).

27.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking sys_control_rx.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking sys_control_tx.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking uart_rx_fsm.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking uart_tx_fsm.current_state as FSM state register:
    Circuit seems to be self-resetting.

27.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

27.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

27.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

27.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

27.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

27.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27.8. Executing OPT pass (performing simple optimizations).

27.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [2]).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [1]).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [0]).
Adding EN signal on $procdff$1313 ($adff) from module data_synchronizer (D = \unsync_data_in, Q = \sync_data_out).
Adding EN signal on $procdff$1275 ($adff) from module deserializer (D = { \sampled_bit_in \register [7:1] }, Q = \register).
Adding EN signal on $procdff$1274 ($adff) from module edge_bit_counter (D = $0\edge_cnt_out[4:0], Q = \edge_cnt_out).
Adding EN signal on $procdff$1273 ($adff) from module edge_bit_counter (D = $0\bit_cnt_out[3:0], Q = \bit_cnt_out).
Adding EN signal on $procdff$1279 ($adff) from module parity_calc (D = $0\par_bit_out[0:0], Q = \par_bit_out).
Adding EN signal on $procdff$1276 ($adff) from module parity_check (D = \register [8:1], Q = \register [8:1]).
Handling D = Q on $auto$ff.cc:266:slice$1371 ($adffe) from module parity_check (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Adding EN signal on $procdff$1305 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[15]).
Adding EN signal on $procdff$1304 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[14]).
Adding EN signal on $procdff$1303 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[13]).
Adding EN signal on $procdff$1302 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[12]).
Adding EN signal on $procdff$1301 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[11]).
Adding EN signal on $procdff$1300 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[10]).
Adding EN signal on $procdff$1299 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[9]).
Adding EN signal on $procdff$1298 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[8]).
Adding EN signal on $procdff$1297 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[7]).
Adding EN signal on $procdff$1296 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[6]).
Adding EN signal on $procdff$1295 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[5]).
Adding EN signal on $procdff$1294 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[4]).
Adding EN signal on $procdff$1293 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[3]).
Adding EN signal on $procdff$1292 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[2]).
Adding EN signal on $procdff$1291 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[1]).
Adding EN signal on $procdff$1290 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[0]).
Adding EN signal on $procdff$1288 ($adff) from module reg_file (D = $procmux$1175_Y, Q = \rd_data_valid_out).
Adding EN signal on $procdff$1287 ($adff) from module reg_file (D = $4$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$76, Q = \rd_data_out).
Adding EN signal on $procdff$1281 ($adff) from module serializer (D = $0\int_reg[7:0], Q = \int_reg).
Adding EN signal on $procdff$1280 ($adff) from module serializer (D = $0\counter[2:0], Q = \counter).
Adding EN signal on $procdff$1284 ($adff) from module sys_control_rx (D = \uart_rx_data_in, Q = \rf_addr_reg).
Adding EN signal on $procdff$1283 ($adff) from module sys_control_rx (D = \rf_rd_data_in, Q = \uart_rf_send_data_out).
Adding EN signal on $procdff$1282 ($adff) from module sys_control_rx (D = \alu_data_in, Q = \uart_alu_send_data_out).
Adding EN signal on $procdff$1286 ($adff) from module sys_control_tx (D = \next_state, Q = \current_state).
Adding EN signal on $procdff$1271 ($adff) from module uart_rx_fsm (D = \next_state, Q = \current_state).
Adding EN signal on $procdff$1277 ($adff) from module uart_tx_fsm (D = $0\busy_out[0:0], Q = \busy_out).

27.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 50 unused cells and 48 unused wires.
<suppressed ~56 debug messages>

27.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~2 debug messages>
Optimizing module mux.
Optimizing module parity_calc.
<suppressed ~1 debug messages>
Optimizing module parity_check.
<suppressed ~5 debug messages>
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~2 debug messages>
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~1 debug messages>

27.8.9. Rerunning OPT passes. (Maybe there is more to do..)

27.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
<suppressed ~3 debug messages>
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
<suppressed ~3 debug messages>
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 2 cells.

27.8.13. Executing OPT_DFF pass (perform DFF optimizations).

27.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 1 unused cells and 6 unused wires.
<suppressed ~4 debug messages>

27.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.16. Rerunning OPT passes. (Maybe there is more to do..)

27.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.20. Executing OPT_DFF pass (perform DFF optimizations).

27.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.23. Finished OPT passes. (There is nothing left to do.)

27.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 7 bits (of 16) from port Y of cell alu.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35 ($add).
Removed top 7 bits (of 16) from port Y of cell alu.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36 ($sub).
Removed top 8 bits (of 16) from port Y of cell alu.$and$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:55$39 ($and).
Removed top 8 bits (of 16) from port Y of cell alu.$or$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:58$40 ($or).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:61$42 ($not).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:64$44 ($not).
Removed top 8 bits (of 16) from port Y of cell alu.$xor$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:67$45 ($xor).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:70$47 ($not).
Removed top 14 bits (of 16) from mux cell alu.$procmux$1191 ($mux).
Removed top 14 bits (of 16) from mux cell alu.$procmux$1203 ($mux).
Removed top 15 bits (of 16) from mux cell alu.$procmux$1216 ($mux).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1232_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1233_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1234_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1235_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1236_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1237_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$1238_CMP0 ($eq).
Removed top 15 bits (of 16) from wire alu.$3\alu_out_comp[15:0].
Removed top 14 bits (of 16) from wire alu.$4\alu_out_comp[15:0].
Removed top 14 bits (of 16) from wire alu.$5\alu_out_comp[15:0].
Removed top 7 bits (of 16) from wire alu.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35_Y.
Removed top 8 bits (of 16) from wire alu.$and$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:55$39_Y.
Removed top 8 bits (of 16) from wire alu.$or$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:58$40_Y.
Removed top 8 bits (of 16) from wire alu.$xor$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:67$45_Y.
Removed top 31 bits (of 32) from port B of cell clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
Removed top 27 bits (of 32) from port Y of cell clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
Removed top 28 bits (of 32) from port B of cell clk_divider.$le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28 ($le).
Removed top 31 bits (of 32) from mux cell clk_divider.$ternary$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$31 ($mux).
Removed top 27 bits (of 32) from wire clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24_Y.
Removed top 28 bits (of 32) from port A of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 31 bits (of 32) from port B of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 27 bits (of 32) from port Y of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 1 bits (of 5) from port B of cell data_sampling.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:20$152 ($eq).
Removed top 28 bits (of 32) from port A of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 31 bits (of 32) from port B of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 27 bits (of 32) from port Y of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 27 bits (of 32) from port B of cell data_sampling.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$155 ($eq).
Removed top 27 bits (of 32) from wire data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154_Y.
Removed top 24 bits (of 32) from mux cell deserializer.$ternary$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:25$139 ($mux).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
Removed top 27 bits (of 32) from port Y of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
Removed top 26 bits (of 32) from port Y of cell edge_bit_counter.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
Removed top 28 bits (of 32) from port Y of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
Removed top 1 bits (of 3) from port B of cell edge_bit_counter.$auto$opt_dff.cc:195:make_patterns_logic$1365 ($ne).
Removed top 27 bits (of 32) from wire edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142_Y.
Removed top 28 bits (of 32) from wire edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145_Y.
Removed top 1 bits (of 2) from port B of cell mux.$procmux$498_CMP0 ($eq).
Removed top 8 bits (of 9) from wire parity_check.register.
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1052_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1066_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1081_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1097_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell reg_file.$procmux$1114_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell reg_file.$procmux$1132_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell reg_file.$procmux$1151_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
Removed top 29 bits (of 32) from port Y of cell serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
Removed top 29 bits (of 32) from wire serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100_Y.
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$560_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$587_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$608_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sys_control_rx.$procmux$619_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sys_control_rx.$procmux$655_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$745 ($mux).
Removed top 3 bits (of 4) from mux cell sys_control_rx.$procmux$753 ($mux).
Removed top 1 bits (of 4) from mux cell sys_control_rx.$procmux$772 ($mux).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$783 ($mux).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$795 ($mux).
Removed top 3 bits (of 4) from mux cell sys_control_rx.$procmux$808 ($mux).
Removed top 4 bits (of 8) from FF cell sys_control_rx.$auto$ff.cc:266:slice$1435 ($adffe).
Removed top 2 bits (of 4) from wire sys_control_rx.$10\next_state[3:0].
Removed top 3 bits (of 4) from wire sys_control_rx.$4\next_state[3:0].
Removed top 2 bits (of 4) from wire sys_control_rx.$5\next_state[3:0].
Removed top 2 bits (of 4) from wire sys_control_rx.$6\next_state[3:0].
Removed top 4 bits (of 8) from wire sys_control_rx.rf_addr_reg.
Removed top 1 bits (of 3) from port B of cell sys_control_tx.$procmux$860_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell sys_control_tx.$procmux$861_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell sys_control_tx.$procmux$879_CMP0 ($eq).
Removed top 4 bits (of 8) from wire system_top.rf_addr.
Removed top 3 bits (of 4) from port B of cell uart_rx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:48$164 ($eq).
Removed top 28 bits (of 32) from port A of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 30 bits (of 32) from port B of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 27 bits (of 32) from port Y of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 27 bits (of 32) from port B of cell uart_rx_fsm.$gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186 ($gt).
Removed top 28 bits (of 32) from port B of cell uart_rx_fsm.$lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189 ($lt).
Removed top 31 bits (of 32) from port B of cell uart_rx_fsm.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
Removed top 26 bits (of 32) from port Y of cell uart_rx_fsm.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
Removed top 28 bits (of 32) from port A of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 30 bits (of 32) from port B of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 27 bits (of 32) from port Y of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 27 bits (of 32) from port B of cell uart_rx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$195 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_rx_fsm.$procmux$220_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_rx_fsm.$procmux$228_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_rx_fsm.$procmux$237_CMP0 ($eq).
Removed top 27 bits (of 32) from wire uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194_Y.
Removed top 27 bits (of 32) from wire uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185_Y.
Removed top 1 bits (of 3) from port B of cell uart_tx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:69$115 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_tx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:84$120 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_tx_fsm.$procmux$435_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_tx_fsm.$procmux$437_CMP0 ($eq).
Removed top 2 bits (of 3) from mux cell uart_tx_fsm.$procmux$440 ($mux).
Removed top 2 bits (of 3) from wire uart_tx_fsm.$2\next_state[2:0].
Removed top 1 bits (of 3) from wire uart_tx_fsm.next_state.

27.10. Executing PEEPOPT pass (run peephole optimizers).

27.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 24 unused wires.
<suppressed ~11 debug messages>

27.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35 ($add).
  creating $macc model for $mul$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:49$37 ($mul).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35.
  creating $macc cell for $mul$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:49$37: $auto$alumacc.cc:365:replace_macc$1488
  creating $alu model for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49 ($gt): merged with $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu model for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:85$50 ($lt): merged with $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu model for $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:73$48 ($eq): merged with $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35: $auto$alumacc.cc:485:replace_alu$1489
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36, $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49, $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:85$50, $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:73$48: $auto$alumacc.cc:485:replace_alu$1492
  created 2 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module bit_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clk_divider:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24.
  creating $alu model for $le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28 ($le): new $alu
  creating $alu cell for $le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28: $auto$alumacc.cc:485:replace_alu$1504
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24: $auto$alumacc.cc:485:replace_alu$1517
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clk_gate:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_sampling:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154: $auto$alumacc.cc:485:replace_alu$1520
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149: $auto$alumacc.cc:485:replace_alu$1523
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module deserializer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module edge_bit_counter:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142: $auto$alumacc.cc:485:replace_alu$1526
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145: $auto$alumacc.cc:485:replace_alu$1529
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143: $auto$alumacc.cc:485:replace_alu$1532
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module parity_calc:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module parity_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reg_file:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reset_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module serializer:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100: $auto$alumacc.cc:485:replace_alu$1535
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module stp_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module strt_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control_rx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control_tx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module system_top:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_rx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_rx_fsm:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194.
  creating $alu model for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186 ($gt): new $alu
  creating $alu model for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189 ($lt): new $alu
  creating $alu model for $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:60$174 ($eq): merged with $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189.
  creating $alu cell for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189, $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:60$174: $auto$alumacc.cc:485:replace_alu$1540
  creating $alu cell for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186: $auto$alumacc.cc:485:replace_alu$1547
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194: $auto$alumacc.cc:485:replace_alu$1552
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185: $auto$alumacc.cc:485:replace_alu$1555
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191: $auto$alumacc.cc:485:replace_alu$1558
  created 5 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_top:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_tx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_tx_fsm:
  created 0 $alu and 0 $macc cells.

27.13. Executing SHARE pass (SAT-based resource sharing).

27.14. Executing OPT pass (performing simple optimizations).

27.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~1 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~9 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 3 cells.

27.14.6. Executing OPT_DFF pass (perform DFF optimizations).

27.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 2 unused cells and 12 unused wires.
<suppressed ~6 debug messages>

27.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.9. Rerunning OPT passes. (Maybe there is more to do..)

27.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.14.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.16. Finished OPT passes. (There is nothing left to do.)

27.15. Executing MEMORY pass.

27.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

27.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

27.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

27.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

27.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

27.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

27.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

27.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

27.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.17. Executing OPT pass (performing simple optimizations).

27.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~20 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
<suppressed ~1 debug messages>
Optimizing module clk_gate.
Optimizing module data_sampling.
<suppressed ~1 debug messages>
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~4 debug messages>
Optimizing module mux.
<suppressed ~1 debug messages>
Optimizing module parity_calc.
<suppressed ~1 debug messages>
Optimizing module parity_check.
<suppressed ~3 debug messages>
Optimizing module reg_file.
<suppressed ~2 debug messages>
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~2 debug messages>
Optimizing module stp_check.
<suppressed ~2 debug messages>
Optimizing module strt_check.
<suppressed ~2 debug messages>
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~10 debug messages>
Optimizing module sys_control_tx.
<suppressed ~5 debug messages>
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~15 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~4 debug messages>

27.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.17.3. Executing OPT_DFF pass (perform DFF optimizations).

27.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 1 unused cells and 40 unused wires.
<suppressed ~14 debug messages>

27.17.5. Finished fast OPT passes.

27.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

27.19. Executing OPT pass (performing simple optimizations).

27.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
    Consolidated identical input bits for $mux cell $procmux$1191:
      Old ports: A=2'11, B=2'00, Y=$5\alu_out_comp[15:0]
      New ports: A=1'1, B=1'0, Y=$5\alu_out_comp[15:0] [0]
      New connections: $5\alu_out_comp[15:0] [1] = $5\alu_out_comp[15:0] [0]
    Consolidated identical input bits for $mux cell $procmux$1203:
      Old ports: A=2'10, B=2'00, Y=$4\alu_out_comp[15:0]
      New ports: A=1'1, B=1'0, Y=$4\alu_out_comp[15:0] [1]
      New connections: $4\alu_out_comp[15:0] [0] = 1'0
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    Consolidated identical input bits for $mux cell $procmux$738:
      Old ports: A=4'1010, B=4'0000, Y=$11\next_state[3:0]
      New ports: A=1'1, B=1'0, Y=$11\next_state[3:0] [1]
      New connections: { $11\next_state[3:0] [3:2] $11\next_state[3:0] [0] } = { $11\next_state[3:0] [1] 2'00 }
    Consolidated identical input bits for $mux cell $procmux$762:
      Old ports: A=4'0111, B=4'1000, Y=$8\next_state[3:0]
      New ports: A=2'01, B=2'10, Y={ $8\next_state[3:0] [3] $8\next_state[3:0] [0] }
      New connections: $8\next_state[3:0] [2:1] = { $8\next_state[3:0] [0] $8\next_state[3:0] [0] }
    Consolidated identical input bits for $mux cell $procmux$772:
      Old ports: A=3'110, B=3'000, Y=$7\next_state[3:0] [2:0]
      New ports: A=1'1, B=1'0, Y=$7\next_state[3:0] [1]
      New connections: { $7\next_state[3:0] [2] $7\next_state[3:0] [0] } = { $7\next_state[3:0] [1] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$795:
      Old ports: A=2'11, B=2'00, Y=$5\next_state[3:0]
      New ports: A=1'1, B=1'0, Y=$5\next_state[3:0] [0]
      New connections: $5\next_state[3:0] [1] = $5\next_state[3:0] [0]
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    Consolidated identical input bits for $mux cell $procmux$916:
      Old ports: A=3'010, B=3'001, Y=$2\next_state[2:0]
      New ports: A=2'10, B=2'01, Y=$2\next_state[2:0] [1:0]
      New connections: $2\next_state[2:0] [2] = 1'0
    New ctrl vector for $pmux cell $procmux$921: { $procmux$909_CMP $procmux$860_CMP $procmux$879_CMP }
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
    Consolidated identical input bits for $mux cell $procmux$275:
      Old ports: A=3'000, B=3'001, Y=$7\next_state[2:0]
      New ports: A=1'0, B=1'1, Y=$7\next_state[2:0] [0]
      New connections: $7\next_state[2:0] [2:1] = 2'00
    Consolidated identical input bits for $mux cell $procmux$311:
      Old ports: A=3'011, B=3'010, Y=$3\next_state[2:0]
      New ports: A=1'1, B=1'0, Y=$3\next_state[2:0] [0]
      New connections: $3\next_state[2:0] [2:1] = 2'01
    New ctrl vector for $pmux cell $procmux$326: { $procmux$324_CMP $procmux$237_CMP $auto$opt_reduce.cc:134:opt_pmux$1574 $procmux$207_CMP }
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
    Consolidated identical input bits for $mux cell $procmux$448:
      Old ports: A=3'100, B=3'011, Y=$4\next_state[2:0]
      New ports: A=2'10, B=2'01, Y={ $4\next_state[2:0] [2] $4\next_state[2:0] [0] }
      New connections: $4\next_state[2:0] [1] = $4\next_state[2:0] [0]
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 12 changes.

27.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.19.6. Executing OPT_SHARE pass.

27.19.7. Executing OPT_DFF pass (perform DFF optimizations).

27.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~3 debug messages>
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~2 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.10. Rerunning OPT passes. (Maybe there is more to do..)

27.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~3 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.19.14. Executing OPT_SHARE pass.

27.19.15. Executing OPT_DFF pass (perform DFF optimizations).

27.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

27.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.18. Rerunning OPT passes. (Maybe there is more to do..)

27.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.19.22. Executing OPT_SHARE pass.

27.19.23. Executing OPT_DFF pass (perform DFF optimizations).

27.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.26. Finished OPT passes. (There is nothing left to do.)

27.20. Executing TECHMAP pass (map to technology primitives).

27.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

27.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$bfceb922395790c0ce92e9f9b5b428d4fc72cc30\_90_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$332fab4e157f868977379756d21fa99887c3c6c4\_90_alu for cells of type $alu.
Using template $paramod$0ae6dcbc606d0267ec97d3ccf20343286af3366c\_90_alu for cells of type $alu.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using template $paramod$20d3ee62d72123142eb855d7ddafd835e31ba009\_90_pmux for cells of type $pmux.
Using template $paramod$4d45682f6d5f8751d24fc75184ef72226da353f7\_90_pmux for cells of type $pmux.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod$75a16668b548c3bac59647e2f0c7dad55b2b94b9\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_xor.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$943564b9366bbc392bf4bbc801aa0a2d7742a4e0\_90_alu for cells of type $alu.
Using template $paramod$dde52db7035cb02b3cc5e73865788532339e3bcb\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dlatch.
Using template $paramod$83dd457849c736323edf2edb15923eb27f99c683\_90_alu for cells of type $alu.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\_90_alu for cells of type $alu.
Using template $paramod$67686dad8c792aead4495d34957ca1f4c910d0ba\_90_div for cells of type $div.
Using extmapper maccmap for cells of type $macc.
  add \data_a_in * \data_b_in (8x8 bits, unsigned)
Using template $paramod$e85bcdd999a9f7e1064fcb77207041270947b77a\_90_pmux for cells of type $pmux.
Using template $paramod$67686dad8c792aead4495d34957ca1f4c910d0ba\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000010000 for cells of type $__div_mod_u.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod$02488ff6fa51b28bbfa470bdd9b0e548b3357746\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$d66a711d7e97d14a7c7a9fd9e900c39b1fc36cfa\_90_alu for cells of type $alu.
Using template $paramod$8359f4ac8e08a95551ec17e9becbee696d87568d\_90_alu for cells of type $alu.
Using template $paramod$3e9f586ebf39197c9185418e155ec5725178e703\_90_alu for cells of type $alu.
Using template $paramod$99f84fe1e34117baf970301335fa146f92b93eb7\_90_alu for cells of type $alu.
Using template $paramod$10caef7eb223495dec7ca6c51abc18dbd379ce45\_90_alu for cells of type $alu.
Using template $paramod$6ae352d62dfc78ea1f63c7f3961ba142be4a2f93\_90_alu for cells of type $alu.
Using template $paramod$7bdc7d89ea9376c9c454fd05d9b64ca6288b61c9\_90_alu for cells of type $alu.
Using template $paramod$96a374a77d27fe2a5f65189ccd5c4d82c02f3e0c\_90_alu for cells of type $alu.
Using template $paramod$c01a73249af533291d6c07bc7dff8edfd9012ebf\_90_alu for cells of type $alu.
Using template $paramod$4dafc65fa46f14914da22e0fac43fee737cf5e98\_90_alu for cells of type $alu.
Using template $paramod$6514813ccfd0fbcd872b47be16e9bc3f005ba67f\_90_alu for cells of type $alu.
Using template $paramod$90cb621aa18d0bfc972ff6df82973fce6d62f25a\_90_alu for cells of type $alu.
Using template $paramod$28a6ec5648d14f65107108cc45dfc9433b8b29ab\_90_alu for cells of type $alu.
Using template $paramod$1b1e81b08462e7f621826ba0c290068af8e4e550\_90_alu for cells of type $alu.
Using template $paramod$1c5b0982e801b857faf786570d1281fe30bbf0dc\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
No more expansions possible.
<suppressed ~8660 debug messages>

27.21. Executing OPT pass (performing simple optimizations).

27.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~5361 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
<suppressed ~41 debug messages>
Optimizing module clk_gate.
Optimizing module data_sampling.
<suppressed ~59 debug messages>
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~87 debug messages>
Optimizing module mux.
<suppressed ~8 debug messages>
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
<suppressed ~60 debug messages>
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~21 debug messages>
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~128 debug messages>
Optimizing module sys_control_tx.
<suppressed ~36 debug messages>
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~167 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~38 debug messages>

27.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~7617 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
<suppressed ~21 debug messages>
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
<suppressed ~18 debug messages>
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
<suppressed ~12 debug messages>
Finding identical cells in module `\mux'.
<suppressed ~6 debug messages>
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~156 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
<suppressed ~12 debug messages>
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~144 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~15 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~66 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~12 debug messages>
Removed a total of 2693 cells.

27.21.3. Executing OPT_DFF pass (perform DFF optimizations).

27.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 354 unused cells and 5193 unused wires.
<suppressed ~366 debug messages>

27.21.5. Finished fast OPT passes.

27.22. Executing ABC pass (technology mapping using ABC).

27.22.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 2426 gates and 2448 wires to a netlist network with 21 inputs and 16 outputs.

27.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      183
ABC RESULTS:              NAND cells:       44
ABC RESULTS:              XNOR cells:       96
ABC RESULTS:               NOT cells:      115
ABC RESULTS:               AND cells:       99
ABC RESULTS:             ORNOT cells:       82
ABC RESULTS:               NOR cells:      171
ABC RESULTS:               XOR cells:      307
ABC RESULTS:                OR cells:      324
ABC RESULTS:            ANDNOT cells:      819
ABC RESULTS:        internal signals:     2411
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

27.22.2. Extracting gate netlist of module `\bit_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.3. Extracting gate netlist of module `\clk_divider' to `<abc-temp-dir>/input.blif'..
Extracted 61 gates and 74 wires to a netlist network with 11 inputs and 6 outputs.

27.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.3.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               XOR cells:        7
ABC RESULTS:                OR cells:       10
ABC RESULTS:            ANDNOT cells:       21
ABC RESULTS:        internal signals:       57
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        6
Removing temp directory.

27.22.4. Extracting gate netlist of module `\clk_gate' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

27.22.4.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.5. Extracting gate netlist of module `\data_sampling' to `<abc-temp-dir>/input.blif'..
Extracted 63 gates and 76 wires to a netlist network with 13 inputs and 4 outputs.

27.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.5.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        5
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       16
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:            ANDNOT cells:       10
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:       16
ABC RESULTS:        internal signals:       59
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        4
Removing temp directory.

27.22.6. Extracting gate netlist of module `\data_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

27.22.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.6.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.7. Extracting gate netlist of module `\deserializer' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 18 wires to a netlist network with 9 inputs and 8 outputs.

27.22.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        8
Removing temp directory.

27.22.8. Extracting gate netlist of module `\edge_bit_counter' to `<abc-temp-dir>/input.blif'..
Extracted 66 gates and 83 wires to a netlist network with 16 inputs and 11 outputs.

27.22.8.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.8.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:               NOT cells:        4
ABC RESULTS:                OR cells:       11
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               XOR cells:       12
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:        internal signals:       56
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       11
Removing temp directory.

27.22.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 14 gates and 19 wires to a netlist network with 4 inputs and 1 outputs.

27.22.9.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.9.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.10. Extracting gate netlist of module `\parity_calc' to `<abc-temp-dir>/input.blif'..
Extracted 13 gates and 23 wires to a netlist network with 10 inputs and 2 outputs.

27.22.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.10.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:        5
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        2
Removing temp directory.

27.22.11. Extracting gate netlist of module `\parity_check' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 6 wires to a netlist network with 3 inputs and 1 outputs.

27.22.11.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.11.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.12. Extracting gate netlist of module `\reg_file' to `<abc-temp-dir>/input.blif'..
Extracted 320 gates and 454 wires to a netlist network with 134 inputs and 27 outputs.

27.22.12.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.12.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:               AND cells:        2
ABC RESULTS:              NAND cells:        8
ABC RESULTS:            ANDNOT cells:      142
ABC RESULTS:                OR cells:      133
ABC RESULTS:               MUX cells:        8
ABC RESULTS:        internal signals:      293
ABC RESULTS:           input signals:      134
ABC RESULTS:          output signals:       27
Removing temp directory.

27.22.13. Extracting gate netlist of module `\reset_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.14. Extracting gate netlist of module `\serializer' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 46 wires to a netlist network with 21 inputs and 14 outputs.

27.22.14.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.14.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:               MUX cells:        7
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       14
Removing temp directory.

27.22.15. Extracting gate netlist of module `\stp_check' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

27.22.15.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.15.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.16. Extracting gate netlist of module `\strt_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

27.22.16.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.16.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.17. Extracting gate netlist of module `\sys_control' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.18. Extracting gate netlist of module `\sys_control_rx' to `<abc-temp-dir>/input.blif'..
Extracted 158 gates and 178 wires to a netlist network with 19 inputs and 27 outputs.

27.22.18.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.18.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               MUX cells:        2
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              NAND cells:        7
ABC RESULTS:                OR cells:       35
ABC RESULTS:               NOR cells:       10
ABC RESULTS:               AND cells:        4
ABC RESULTS:            ANDNOT cells:       58
ABC RESULTS:        internal signals:      132
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       27
Removing temp directory.

27.22.19. Extracting gate netlist of module `\sys_control_tx' to `<abc-temp-dir>/input.blif'..
Extracted 88 gates and 119 wires to a netlist network with 30 inputs and 13 outputs.

27.22.19.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.19.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              NAND cells:        2
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:               NOR cells:        3
ABC RESULTS:            ANDNOT cells:       51
ABC RESULTS:        internal signals:       76
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       13
Removing temp directory.

27.22.20. Extracting gate netlist of module `\system_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.21. Extracting gate netlist of module `\uart_rx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.22. Extracting gate netlist of module `\uart_rx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 163 gates and 186 wires to a netlist network with 22 inputs and 8 outputs.

27.22.22.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.22.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOT cells:        9
ABC RESULTS:               MUX cells:        1
ABC RESULTS:             ORNOT cells:        9
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               AND cells:        3
ABC RESULTS:               XOR cells:       20
ABC RESULTS:                OR cells:       31
ABC RESULTS:            ANDNOT cells:       45
ABC RESULTS:        internal signals:      156
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        8
Removing temp directory.

27.22.23. Extracting gate netlist of module `\uart_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.24. Extracting gate netlist of module `\uart_tx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.25. Extracting gate netlist of module `\uart_tx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 58 wires to a netlist network with 6 inputs and 8 outputs.

27.22.25.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.25.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               NOR cells:        3
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:            ANDNOT cells:       20
ABC RESULTS:        internal signals:       44
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        8
Removing temp directory.

27.23. Executing OPT pass (performing simple optimizations).

27.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~1 debug messages>
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~54 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~3 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 19 cells.

27.23.3. Executing OPT_DFF pass (perform DFF optimizations).

27.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1761 unused wires.
<suppressed ~18 debug messages>

27.23.5. Finished fast OPT passes.

27.24. Executing HIERARCHY pass (managing design hierarchy).

27.24.1. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \alu
Used module:     \bit_synchronizer
Used module:     \clk_divider
Used module:     \clk_gate
Used module:     \data_synchronizer
Used module:     \reg_file
Used module:     \reset_synchronizer
Used module:     \sys_control
Used module:         \sys_control_rx
Used module:         \sys_control_tx
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \data_sampling
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \parity_check
Used module:             \stp_check
Used module:             \strt_check
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \parity_calc
Used module:             \serializer
Used module:             \uart_tx_fsm

27.24.2. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \alu
Used module:     \bit_synchronizer
Used module:     \clk_divider
Used module:     \clk_gate
Used module:     \data_synchronizer
Used module:     \reg_file
Used module:     \reset_synchronizer
Used module:     \sys_control
Used module:         \sys_control_rx
Used module:         \sys_control_tx
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \data_sampling
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \parity_check
Used module:             \stp_check
Used module:             \strt_check
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \parity_calc
Used module:             \serializer
Used module:             \uart_tx_fsm
Removed 0 unused modules.

27.25. Printing statistics.

=== alu ===

   Number of wires:               2216
   Number of wire bits:           2263
   Number of public wires:          10
   Number of public wire bits:      57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2239
     $_ANDNOT_                     805
     $_AND_                         99
     $_DFF_PN0_                     17
     $_MUX_                        183
     $_NAND_                        44
     $_NOR_                        169
     $_NOT_                        115
     $_ORNOT_                       82
     $_OR_                         322
     $_XNOR_                        96
     $_XOR_                        307

=== bit_synchronizer ===

   Number of wires:                  5
   Number of wire bits:              6
   Number of public wires:           5
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_PN0_                      3

=== clk_divider ===

   Number of wires:                 54
   Number of wire bits:             66
   Number of public wires:           6
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 58
     $_ANDNOT_                      21
     $_AND_                          2
     $_DFF_PN0_                      5
     $_NAND_                         3
     $_NOT_                          1
     $_ORNOT_                        3
     $_OR_                          10
     $_XNOR_                         6
     $_XOR_                          7

=== clk_gate ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_AND_                          1
     $_DLATCH_N_                     1

=== data_sampling ===

   Number of wires:                 63
   Number of wire bits:             73
   Number of public wires:           8
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 59
     $_ANDNOT_                      10
     $_AND_                          2
     $_DFFE_PN0P_                    3
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                          5
     $_ORNOT_                        1
     $_OR_                          16
     $_XNOR_                         2
     $_XOR_                         16

=== data_synchronizer ===

   Number of wires:                  8
   Number of wire bits:             24
   Number of public wires:           8
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $_ANDNOT_                       1
     $_DFFE_PN0P_                    8
     $_DFF_PN0_                      4

=== deserializer ===

   Number of wires:                  7
   Number of wire bits:             21
   Number of public wires:           7
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_AND_                          8
     $_DFFE_PN0P_                    8

=== edge_bit_counter ===

   Number of wires:                 56
   Number of wire bits:             74
   Number of public wires:           7
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 65
     $_ANDNOT_                      17
     $_AND_                          2
     $_DFFE_PN0P_                    9
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          4
     $_ORNOT_                        1
     $_OR_                          11
     $_XNOR_                         4
     $_XOR_                         12

=== mux ===

   Number of wires:                 10
   Number of wire bits:             11
   Number of public wires:           4
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $_ANDNOT_                       2
     $_NAND_                         1
     $_NOR_                          1
     $_ORNOT_                        1
     $_OR_                           2

=== parity_calc ===

   Number of wires:                 17
   Number of wire bits:             24
   Number of public wires:           6
   Number of public wire bits:      13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $_ANDNOT_                       1
     $_AND_                          1
     $_DFFE_PN0P_                    1
     $_OR_                           1
     $_XNOR_                         3
     $_XOR_                          5

=== parity_check ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_ANDNOT_                       1
     $_DFF_PN0_                      1
     $_XNOR_                         1

=== reg_file ===

   Number of wires:                317
   Number of wire bits:            481
   Number of public wires:          28
   Number of public wire bits:     185
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                433
     $_ANDNOT_                     141
     $_AND_                          2
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                  133
     $_DFFE_PN1P_                    3
     $_MUX_                          8
     $_NAND_                         8
     $_ORNOT_                        4
     $_OR_                         133

=== reset_synchronizer ===

   Number of wires:                  4
   Number of wire bits:              6
   Number of public wires:           4
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_PN0_                      3

=== serializer ===

   Number of wires:                 18
   Number of wire bits:             43
   Number of public wires:          10
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 29
     $_ANDNOT_                       3
     $_AND_                          2
     $_DFFE_PN0P_                   11
     $_MUX_                          7
     $_NAND_                         1
     $_ORNOT_                        2
     $_OR_                           1
     $_XNOR_                         1
     $_XOR_                          1

=== stp_check ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_ANDNOT_                       1

=== strt_check ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_AND_                          1

=== sys_control ===

   Number of wires:                 23
   Number of wire bits:             94
   Number of public wires:          23
   Number of public wire bits:      94
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     sys_control_rx                  1
     sys_control_tx                  1

=== sys_control_rx ===

   Number of wires:                126
   Number of wire bits:            199
   Number of public wires:          26
   Number of public wire bits:      99
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                159
     $_ANDNOT_                      58
     $_AND_                          4
     $_DFFE_PN0P_                   28
     $_DFF_PN0_                      4
     $_MUX_                          2
     $_NAND_                         7
     $_NOR_                         10
     $_NOT_                          1
     $_ORNOT_                       10
     $_OR_                          35

=== sys_control_tx ===

   Number of wires:                 78
   Number of wire bits:            111
   Number of public wires:          11
   Number of public wire bits:      44
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                      51
     $_DFFE_PN0P_                    3
     $_MUX_                          2
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                       12
     $_OR_                           7

=== system_top ===

   Number of wires:                 35
   Number of wire bits:            126
   Number of public wires:          35
   Number of public wire bits:     126
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     alu                             1
     bit_synchronizer                1
     clk_divider                     1
     clk_gate                        1
     data_synchronizer               2
     reg_file                        1
     reset_synchronizer              2
     sys_control                     1
     uart_top                        1

=== uart_rx ===

   Number of wires:                 20
   Number of wire bits:             38
   Number of public wires:          20
   Number of public wire bits:      38
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     data_sampling                   1
     deserializer                    1
     edge_bit_counter                1
     parity_check                    1
     stp_check                       1
     strt_check                      1
     uart_rx_fsm                     1

=== uart_rx_fsm ===

   Number of wires:                138
   Number of wire bits:            153
   Number of public wires:          19
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                129
     $_ANDNOT_                      45
     $_AND_                          3
     $_DFFE_PN0P_                    3
     $_MUX_                          1
     $_NAND_                         1
     $_NOR_                          4
     $_NOT_                          9
     $_ORNOT_                        9
     $_OR_                          31
     $_XNOR_                         3
     $_XOR_                         20

=== uart_top ===

   Number of wires:                 13
   Number of wire bits:             31
   Number of public wires:          13
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     uart_rx                         1
     uart_tx                         1

=== uart_tx ===

   Number of wires:                 13
   Number of wire bits:             21
   Number of public wires:          13
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     mux                             1
     parity_calc                     1
     serializer                      1
     uart_tx_fsm                     1

=== uart_tx_fsm ===

   Number of wires:                 45
   Number of wire bits:             51
   Number of public wires:          10
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     $_ANDNOT_                      20
     $_DFFE_PN0P_                    1
     $_DFF_PN0_                      3
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                        6
     $_OR_                           7

=== design hierarchy ===

   system_top                        1
     alu                             1
     bit_synchronizer                1
     clk_divider                     1
     clk_gate                        1
     data_synchronizer               2
     reg_file                        1
     reset_synchronizer              2
     sys_control                     1
       sys_control_rx                1
       sys_control_tx                1
     uart_top                        1
       uart_rx                       1
         data_sampling               1
         deserializer                1
         edge_bit_counter            1
         parity_check                1
         stp_check                   1
         strt_check                  1
         uart_rx_fsm                 1
       uart_tx                       1
         mux                         1
         parity_calc                 1
         serializer                  1
         uart_tx_fsm                 1

   Number of wires:               3296
   Number of wire bits:           3964
   Number of public wires:         302
   Number of public wire bits:     941
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3374
     $_ANDNOT_                    1178
     $_AND_                        127
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                  216
     $_DFFE_PN1P_                    3
     $_DFF_PN0_                     47
     $_DLATCH_N_                     1
     $_MUX_                        203
     $_NAND_                        73
     $_NOR_                        195
     $_NOT_                        139
     $_ORNOT_                      131
     $_OR_                         576
     $_XNOR_                       116
     $_XOR_                        368

27.26. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

28. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

28.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alu':
  mapped 17 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\bit_synchronizer':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\clk_divider':
  mapped 5 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\clk_gate':
Mapping DFF cells in module `\data_sampling':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\data_synchronizer':
  mapped 12 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\deserializer':
  mapped 8 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\edge_bit_counter':
  mapped 9 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\mux':
Mapping DFF cells in module `\parity_calc':
  mapped 1 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\parity_check':
  mapped 1 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\reg_file':
  mapped 137 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\reset_synchronizer':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\serializer':
  mapped 11 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\stp_check':
Mapping DFF cells in module `\strt_check':
Mapping DFF cells in module `\sys_control':
Mapping DFF cells in module `\sys_control_rx':
  mapped 32 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\sys_control_tx':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\system_top':
Mapping DFF cells in module `\uart_rx':
Mapping DFF cells in module `\uart_rx_fsm':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\uart_top':
Mapping DFF cells in module `\uart_tx':
Mapping DFF cells in module `\uart_tx_fsm':
  mapped 4 $_DFFSR_PNN_ cells to \DFFSR cells.

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

29.6. Executing OPT_DFF pass (perform DFF optimizations).

29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

29.9. Finished OPT passes. (There is nothing left to do.)

30. Executing ABC pass (technology mapping using ABC).

30.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 2222 gates and 2243 wires to a netlist network with 21 inputs and 16 outputs.

30.1.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.1.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        8
ABC RESULTS:            MUX2X1 cells:        2
ABC RESULTS:           OAI22X1 cells:        5
ABC RESULTS:           AOI22X1 cells:       21
ABC RESULTS:            AND2X2 cells:       40
ABC RESULTS:           XNOR2X1 cells:       42
ABC RESULTS:            XOR2X1 cells:       30
ABC RESULTS:            NOR2X1 cells:      173
ABC RESULTS:             OR2X2 cells:       12
ABC RESULTS:           NAND3X1 cells:      107
ABC RESULTS:             INVX1 cells:      164
ABC RESULTS:           NAND2X1 cells:      155
ABC RESULTS:           OAI21X1 cells:      230
ABC RESULTS:           AOI21X1 cells:       81
ABC RESULTS:        internal signals:     2206
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

30.2. Extracting gate netlist of module `\bit_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.3. Extracting gate netlist of module `\clk_divider' to `<abc-temp-dir>/input.blif'..
Extracted 53 gates and 64 wires to a netlist network with 11 inputs and 6 outputs.

30.3.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.3.2. Re-integrating ABC results.
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:            XOR2X1 cells:        2
ABC RESULTS:            NOR2X1 cells:        4
ABC RESULTS:             INVX1 cells:       10
ABC RESULTS:           NAND3X1 cells:        5
ABC RESULTS:           XNOR2X1 cells:        3
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:           OAI21X1 cells:        5
ABC RESULTS:           AOI21X1 cells:       13
ABC RESULTS:        internal signals:       47
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        6
Removing temp directory.

30.4. Extracting gate netlist of module `\clk_gate' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

30.4.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

30.5. Extracting gate netlist of module `\data_sampling' to `<abc-temp-dir>/input.blif'..
Extracted 59 gates and 73 wires to a netlist network with 14 inputs and 4 outputs.

30.5.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.5.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:             INVX1 cells:       12
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:            AND2X2 cells:        6
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           XNOR2X1 cells:        2
ABC RESULTS:           NAND3X1 cells:        9
ABC RESULTS:            NOR2X1 cells:        8
ABC RESULTS:           NAND2X1 cells:       17
ABC RESULTS:           OAI21X1 cells:       14
ABC RESULTS:        internal signals:       55
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        4
Removing temp directory.

30.6. Extracting gate netlist of module `\data_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 9 gates and 27 wires to a netlist network with 18 inputs and 9 outputs.

30.6.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.6.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        2
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:           NAND3X1 cells:        8
ABC RESULTS:           NAND2X1 cells:        8
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       18
ABC RESULTS:          output signals:        9
Removing temp directory.

30.7. Extracting gate netlist of module `\deserializer' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 27 wires to a netlist network with 11 inputs and 16 outputs.

30.7.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.7.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:            NOR2X1 cells:        8
ABC RESULTS:           NAND2X1 cells:        8
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:       16
Removing temp directory.

30.8. Extracting gate netlist of module `\edge_bit_counter' to `<abc-temp-dir>/input.blif'..
Extracted 65 gates and 81 wires to a netlist network with 16 inputs and 9 outputs.

30.8.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.8.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:           NAND3X1 cells:       17
ABC RESULTS:           OAI21X1 cells:       15
ABC RESULTS:           NAND2X1 cells:       10
ABC RESULTS:             INVX1 cells:       17
ABC RESULTS:            NOR2X1 cells:       11
ABC RESULTS:           XNOR2X1 cells:        5
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:        internal signals:       56
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

30.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 7 gates and 11 wires to a netlist network with 4 inputs and 1 outputs.

30.9.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.9.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:        internal signals:        6
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

30.10. Extracting gate netlist of module `\parity_calc' to `<abc-temp-dir>/input.blif'..
Extracted 12 gates and 23 wires to a netlist network with 11 inputs and 1 outputs.

30.10.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.10.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           OAI21X1 cells:        3
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        8
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:           AOI22X1 cells:        5
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        1
Removing temp directory.

30.11. Extracting gate netlist of module `\parity_check' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 5 wires to a netlist network with 3 inputs and 1 outputs.

30.11.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.11.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

30.12. Extracting gate netlist of module `\reg_file' to `<abc-temp-dir>/input.blif'..
Extracted 433 gates and 584 wires to a netlist network with 151 inputs and 137 outputs.

30.12.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.12.2. Re-integrating ABC results.
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:            NOR3X1 cells:       19
ABC RESULTS:           AOI22X1 cells:       28
ABC RESULTS:           NAND3X1 cells:       47
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:            AND2X2 cells:        5
ABC RESULTS:           NAND2X1 cells:      130
ABC RESULTS:            NOR2X1 cells:       52
ABC RESULTS:           AOI21X1 cells:       36
ABC RESULTS:             INVX1 cells:       60
ABC RESULTS:           OAI21X1 cells:      129
ABC RESULTS:        internal signals:      296
ABC RESULTS:           input signals:      151
ABC RESULTS:          output signals:      137
Removing temp directory.

30.13. Extracting gate netlist of module `\reset_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.14. Extracting gate netlist of module `\serializer' to `<abc-temp-dir>/input.blif'..
Extracted 29 gates and 51 wires to a netlist network with 22 inputs and 12 outputs.

30.14.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.14.2. Re-integrating ABC results.
ABC RESULTS:           NAND2X1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:           AOI22X1 cells:        7
ABC RESULTS:            NOR3X1 cells:        7
ABC RESULTS:           OAI22X1 cells:        7
ABC RESULTS:             INVX1 cells:       13
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:           OAI21X1 cells:        4
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:       12
Removing temp directory.

30.15. Extracting gate netlist of module `\stp_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

30.15.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.15.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

30.16. Extracting gate netlist of module `\strt_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

30.16.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.16.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

30.17. Extracting gate netlist of module `\sys_control' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.18. Extracting gate netlist of module `\sys_control_rx' to `<abc-temp-dir>/input.blif'..
Extracted 155 gates and 222 wires to a netlist network with 67 inputs and 54 outputs.

30.18.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.18.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:            NOR3X1 cells:        3
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:           NAND3X1 cells:       16
ABC RESULTS:           AOI21X1 cells:        7
ABC RESULTS:            NOR2X1 cells:       29
ABC RESULTS:             INVX1 cells:       47
ABC RESULTS:           NAND2X1 cells:       28
ABC RESULTS:           OAI21X1 cells:       49
ABC RESULTS:        internal signals:      101
ABC RESULTS:           input signals:       67
ABC RESULTS:          output signals:       54
Removing temp directory.

30.19. Extracting gate netlist of module `\sys_control_tx' to `<abc-temp-dir>/input.blif'..
Extracted 82 gates and 112 wires to a netlist network with 30 inputs and 12 outputs.

30.19.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.19.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:           NAND2X1 cells:       27
ABC RESULTS:            NOR2X1 cells:        2
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:           NAND3X1 cells:       15
ABC RESULTS:           OAI21X1 cells:        6
ABC RESULTS:        internal signals:       70
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       12
Removing temp directory.

30.20. Extracting gate netlist of module `\system_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.21. Extracting gate netlist of module `\uart_rx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.22. Extracting gate netlist of module `\uart_rx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 129 gates and 151 wires to a netlist network with 22 inputs and 7 outputs.

30.22.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.22.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:       22
ABC RESULTS:           NAND3X1 cells:       18
ABC RESULTS:            AND2X2 cells:        7
ABC RESULTS:           NAND2X1 cells:       20
ABC RESULTS:            NOR2X1 cells:       19
ABC RESULTS:           AOI21X1 cells:        8
ABC RESULTS:             OR2X2 cells:        6
ABC RESULTS:           OAI21X1 cells:       32
ABC RESULTS:        internal signals:      122
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        7
Removing temp directory.

30.23. Extracting gate netlist of module `\uart_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.24. Extracting gate netlist of module `\uart_tx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.25. Extracting gate netlist of module `\uart_tx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 41 gates and 48 wires to a netlist network with 7 inputs and 7 outputs.

30.25.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.25.2. Re-integrating ABC results.
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        7
ABC RESULTS:           OAI21X1 cells:        6
ABC RESULTS:           NAND2X1 cells:        5
ABC RESULTS:        internal signals:       34
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        7
Removing temp directory.

31. Executing FLATTEN pass (flatten design).
Deleting now unused module alu.
Deleting now unused module bit_synchronizer.
Deleting now unused module clk_divider.
Deleting now unused module clk_gate.
Deleting now unused module data_sampling.
Deleting now unused module data_synchronizer.
Deleting now unused module deserializer.
Deleting now unused module edge_bit_counter.
Deleting now unused module mux.
Deleting now unused module parity_calc.
Deleting now unused module parity_check.
Deleting now unused module reg_file.
Deleting now unused module reset_synchronizer.
Deleting now unused module serializer.
Deleting now unused module stp_check.
Deleting now unused module strt_check.
Deleting now unused module sys_control.
Deleting now unused module sys_control_rx.
Deleting now unused module sys_control_tx.
Deleting now unused module uart_rx.
Deleting now unused module uart_rx_fsm.
Deleting now unused module uart_top.
Deleting now unused module uart_tx.
Deleting now unused module uart_tx_fsm.
<suppressed ~26 debug messages>

32. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 3941 unused wires.

33. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port system_top.ref_clk: Missing option -inpad.
Don't map input port system_top.reset_n: Missing option -inpad.
Don't map input port system_top.rx_in: Missing option -inpad.
Mapping port system_top.tx_out using BUFX2.
Don't map input port system_top.uart_clk: Missing option -inpad.

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module system_top.

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system_top'.
Removed a total of 0 cells.

34.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

34.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \system_top.
Performed a total of 0 changes.

34.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system_top'.
Removed a total of 0 cells.

34.6. Executing OPT_DFF pass (perform DFF optimizations).

34.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \system_top..

34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module system_top.

34.9. Finished OPT passes. (There is nothing left to do.)

35. Executing BLIF backend.

36. Printing statistics.

=== system_top ===

   Number of wires:               2400
   Number of wire bits:           2677
   Number of public wires:        2400
   Number of public wire bits:    2677
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2661
     $_DLATCH_N_                     1
     AND2X2                         71
     AOI21X1                       157
     AOI22X1                        65
     BUFX2                           1
     DFFSR                         267
     INVX1                         385
     MUX2X1                          2
     NAND2X1                       439
     NAND3X1                       260
     NOR2X1                        313
     NOR3X1                         41
     OAI21X1                       517
     OAI22X1                        24
     OR2X2                          31
     XNOR2X1                        54
     XOR2X1                         33

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: da396c11ab, CPU: user 4.19s system 0.13s, MEM: 88.59 MB peak
Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)
Time spent: 38% 2x abc (2 sec), 19% 66x opt_expr (1 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)


-- Executing script file `synth/synth.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/system_top.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/system_top.v' to AST representation.
Generating RTLIL representation for module `\system_top'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\bit_synchronizer'.
Warning: Replacing memory \reg_file with list of registers. See /home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:17
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\reset_synchronizer'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\data_synchronizer'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v' to AST representation.
Generating RTLIL representation for module `\clk_gate'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v' to AST representation.
Generating RTLIL representation for module `\clk_divider'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_top.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_top.v' to AST representation.
Generating RTLIL representation for module `\uart_top'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v' to AST representation.
Generating RTLIL representation for module `\reg_file'.
Warning: Replacing memory \mem with list of registers. See /home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:33
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control.v' to AST representation.
Generating RTLIL representation for module `\sys_control'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v' to AST representation.
Generating RTLIL representation for module `\sys_control_tx'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v' to AST representation.
Generating RTLIL representation for module `\sys_control_rx'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx.v' to AST representation.
Generating RTLIL representation for module `\uart_rx'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx.v' to AST representation.
Generating RTLIL representation for module `\uart_tx'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v' to AST representation.
Generating RTLIL representation for module `\mux'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v' to AST representation.
Generating RTLIL representation for module `\serializer'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v' to AST representation.
Generating RTLIL representation for module `\parity_calc'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v' to AST representation.
Generating RTLIL representation for module `\uart_tx_fsm'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v' to AST representation.
Generating RTLIL representation for module `\stp_check'.
Successfully finished Verilog frontend.

21. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v' to AST representation.
Generating RTLIL representation for module `\strt_check'.
Successfully finished Verilog frontend.

22. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v' to AST representation.
Generating RTLIL representation for module `\parity_check'.
Successfully finished Verilog frontend.

23. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v' to AST representation.
Generating RTLIL representation for module `\deserializer'.
Successfully finished Verilog frontend.

24. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v' to AST representation.
Generating RTLIL representation for module `\edge_bit_counter'.
Successfully finished Verilog frontend.

25. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v' to AST representation.
Generating RTLIL representation for module `\data_sampling'.
Successfully finished Verilog frontend.

26. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v' to AST representation.
Generating RTLIL representation for module `\uart_rx_fsm'.
Successfully finished Verilog frontend.

27. Executing SYNTH pass.

27.1. Executing HIERARCHY pass (managing design hierarchy).

27.1.1. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \bit_synchronizer
Used module:     \reset_synchronizer
Used module:     \data_synchronizer
Used module:     \clk_gate
Used module:     \clk_divider
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \stp_check
Used module:             \strt_check
Used module:             \parity_check
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \data_sampling
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \serializer
Used module:             \parity_calc
Used module:             \uart_tx_fsm
Used module:     \alu
Used module:     \reg_file
Used module:     \sys_control
Used module:         \sys_control_tx
Used module:         \sys_control_rx

27.1.2. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \bit_synchronizer
Used module:     \reset_synchronizer
Used module:     \data_synchronizer
Used module:     \clk_gate
Used module:     \clk_divider
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \stp_check
Used module:             \strt_check
Used module:             \parity_check
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \data_sampling
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \serializer
Used module:             \parity_calc
Used module:             \uart_tx_fsm
Used module:     \alu
Used module:     \reg_file
Used module:     \sys_control
Used module:         \sys_control_tx
Used module:         \sys_control_rx
Removed 0 unused modules.
Warning: Resizing cell port system_top.reg_file_inst.addr_in from 8 bits to 4 bits.
Warning: Resizing cell port system_top.sys_control_inst.rf_addr_out from 8 bits to 4 bits.

27.2. Executing PROC pass (convert processes to netlists).

27.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 31 empty switches in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Cleaned up 31 empty switches.

27.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 6 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183 in module uart_rx_fsm.
Marked 8 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162 in module uart_rx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160 in module uart_rx_fsm.
Marked 3 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146 in module data_sampling.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140 in module edge_bit_counter.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136 in module deserializer.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130 in module parity_check.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128 in module parity_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126 in module strt_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125 in module stp_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117 in module uart_tx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116 in module uart_tx_fsm.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113 in module uart_tx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111 in module uart_tx_fsm.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102 in module parity_calc.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98 in module serializer.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93 in module serializer.
Removed 1 dead cases from process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92 in module mux.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92 in module mux.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86 in module sys_control_rx.
Marked 9 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85 in module sys_control_rx.
Marked 11 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81 in module sys_control_tx.
Marked 7 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79 in module sys_control_tx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77 in module sys_control_tx.
Removed 1 dead cases from process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56 in module reg_file.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56 in module reg_file.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34 in module alu.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32 in module alu.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21 in module clk_divider.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18 in module clk_gate.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8 in module reset_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4 in module bit_synchronizer.
Removed a total of 2 dead cases.

27.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 12 redundant assignments.
Promoted 41 assignments to connections.

27.2.4. Executing PROC_INIT pass (extract init attributes).

27.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
Found async reset \reset_n in `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Found async reset \reset_n in `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Found async reset \reset_n in `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Found async reset \reset_n in `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
Found async reset \reset_n in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Found async reset \reset_n in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
Found async reset \reset_n in `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Found async reset \reset_n in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Found async reset \reset_n in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
Found async reset \reset_n in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
Found async reset \reset_n in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Found async reset \reset_n in `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
Found async reset \reset_n in `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
Found async reset \reset_n in `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
Found async reset \reset_n in `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.

27.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~91 debug messages>

27.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
     1/10: $3\data_valid_out[0:0]
     2/10: $2\data_valid_out[0:0]
     3/10: $3\deser_en_out[0:0]
     4/10: $2\deser_en_out[0:0]
     5/10: $2\strt_chk_en_out[0:0]
     6/10: $1\strt_chk_en_out[0:0]
     7/10: $1\counter_en_out[0:0]
     8/10: $1\data_sample_en_out[0:0]
     9/10: $1\deser_en_out[0:0]
    10/10: $1\data_valid_out[0:0]
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
     1/8: $8\next_state[2:0]
     2/8: $7\next_state[2:0]
     3/8: $6\next_state[2:0]
     4/8: $5\next_state[2:0]
     5/8: $4\next_state[2:0]
     6/8: $3\next_state[2:0]
     7/8: $2\next_state[2:0]
     8/8: $1\next_state[2:0]
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
     1/3: $0\register[2:0] [2]
     2/3: $0\register[2:0] [1]
     3/3: $0\register[2:0] [0]
Creating decoders for process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
     1/2: $0\edge_cnt_out[4:0]
     2/2: $0\bit_cnt_out[3:0]
Creating decoders for process `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
     1/1: $0\register[7:0]
Creating decoders for process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
     1/5: $5\par_err_out[0:0]
     2/5: $4\par_err_out[0:0]
     3/5: $3\par_err_out[0:0]
     4/5: $2\par_err_out[0:0]
     5/5: $1\par_err_out[0:0]
Creating decoders for process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
     1/1: $0\register[8:0]
Creating decoders for process `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
     1/2: $2\strt_err_out[0:0]
     2/2: $1\strt_err_out[0:0]
Creating decoders for process `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
     1/2: $2\stp_err_out[0:0]
     2/2: $1\stp_err_out[0:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
     1/1: $0\busy_out[0:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
     1/1: $1\mux_sel_out[1:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
     1/5: $5\next_state[2:0]
     2/5: $4\next_state[2:0]
     3/5: $3\next_state[2:0]
     4/5: $2\next_state[2:0]
     5/5: $1\next_state[2:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
     1/1: $0\par_bit_out[0:0]
Creating decoders for process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
     1/1: $0\counter[2:0]
Creating decoders for process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
     1/1: $0\int_reg[7:0]
Creating decoders for process `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
     1/1: $1\tx_out[0:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
     1/1: $0\uart_alu_send_data_out[15:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
     1/1: $0\uart_rf_send_data_out[7:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
     1/1: $0\rf_addr_reg[7:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
     1/30: $2\alu_data_store[0:0]
     2/30: $2\uart_alu_send_out[0:0]
     3/30: $2\alu_fun_out[3:0]
     4/30: $2\alu_en_out[0:0]
     5/30: $4\rf_addr_out[3:0]
     6/30: $4\rf_wr_data_out[7:0]
     7/30: $4\rf_wr_en_out[0:0]
     8/30: $3\rf_addr_out[3:0]
     9/30: $3\rf_wr_data_out[7:0]
    10/30: $3\rf_wr_en_out[0:0]
    11/30: $2\rf_rd_store[0:0]
    12/30: $2\uart_rf_send_out[0:0]
    13/30: $3\rf_addr_en[0:0]
    14/30: $2\rf_wr_data_out[7:0]
    15/30: $2\rf_addr_out[3:0]
    16/30: $2\rf_wr_en_out[0:0]
    17/30: $2\rf_addr_en[0:0]
    18/30: $1\alu_data_store[0:0]
    19/30: $1\rf_rd_store[0:0]
    20/30: $1\rf_addr_en[0:0]
    21/30: $1\uart_alu_send_out[0:0]
    22/30: $1\uart_rf_send_out[0:0]
    23/30: $1\clk_div_en_out[0:0]
    24/30: $1\clk_gate_en_out[0:0]
    25/30: $1\alu_fun_out[3:0]
    26/30: $1\alu_en_out[0:0]
    27/30: $1\rf_wr_data_out[7:0]
    28/30: $1\rf_addr_out[3:0]
    29/30: $1\rf_rd_en_out[0:0]
    30/30: $1\rf_wr_en_out[0:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
     1/11: $11\next_state[3:0]
     2/11: $10\next_state[3:0]
     3/11: $9\next_state[3:0]
     4/11: $8\next_state[3:0]
     5/11: $7\next_state[3:0]
     6/11: $6\next_state[3:0]
     7/11: $5\next_state[3:0]
     8/11: $4\next_state[3:0]
     9/11: $3\next_state[3:0]
    10/11: $2\next_state[3:0]
    11/11: $1\next_state[3:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
     1/1: $0\current_state[3:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
     1/2: $1\uart_tx_data_out[7:0]
     2/2: $1\uart_tx_data_valid_out[0:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
     1/7: $7\next_state[2:0]
     2/7: $6\next_state[2:0]
     3/7: $5\next_state[2:0]
     4/7: $4\next_state[2:0]
     5/7: $3\next_state[2:0]
     6/7: $2\next_state[2:0]
     7/7: $1\next_state[2:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
     1/30: $4$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$76
     2/30: $3$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$75
     3/30: $3$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$74
     4/30: $2$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR[3:0]$68
     5/30: $2$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA[7:0]$69
     6/30: $2$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$71
     7/30: $2$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$70
     8/30: $1$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$65
     9/30: $1$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$64
    10/30: $1$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA[7:0]$63
    11/30: $1$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR[3:0]$62
    12/30: $1\i[31:0]
    13/30: $0\mem[15][7:0]
    14/30: $0\mem[14][7:0]
    15/30: $0\mem[13][7:0]
    16/30: $0\mem[12][7:0]
    17/30: $0\mem[11][7:0]
    18/30: $0\mem[10][7:0]
    19/30: $0\mem[9][7:0]
    20/30: $0\mem[8][7:0]
    21/30: $0\mem[7][7:0]
    22/30: $0\mem[6][7:0]
    23/30: $0\mem[5][7:0]
    24/30: $0\mem[4][7:0]
    25/30: $0\mem[3][7:0]
    26/30: $0\mem[2][7:0]
    27/30: $0\mem[1][7:0]
    28/30: $0\mem[0][7:0]
    29/30: $0\rd_data_valid_out[0:0]
    30/30: $0\rd_data_out[7:0]
Creating decoders for process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
     1/6: $5\alu_out_comp[15:0]
     2/6: $4\alu_out_comp[15:0]
     3/6: $3\alu_out_comp[15:0]
     4/6: $2\alu_out_comp[15:0]
     5/6: $1\alu_out_comp[15:0]
     6/6: $1\alu_out_comp_valid[0:0]
Creating decoders for process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
     1/2: $0\data_valid_out[0:0]
     2/2: $0\data_out[15:0]
Creating decoders for process `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
     1/1: $0\count[4:0]
Creating decoders for process `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
     1/1: $1\latch_out[0:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
     1/1: $0\sync_data_out[7:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
     1/1: $0\enable_pulse_out[0:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
     1/1: $0\ff[2:0]
Creating decoders for process `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
     1/1: $0\ff[2:0]
Creating decoders for process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
     1/4: $1\i[31:0]
     2/4: $0\reg_file[0][1:0]
     3/4: $0\sync_data_out[0:0]
     4/4: $1$splitcmplxassign$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:24$3[2:0]$7

27.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\uart_rx_fsm.\data_valid_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\data_sample_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\deser_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\stp_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\strt_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\par_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\counter_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\next_state' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
No latch inferred for signal `\parity_check.\par_err_out' from process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
No latch inferred for signal `\strt_check.\strt_err_out' from process `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
No latch inferred for signal `\stp_check.\stp_err_out' from process `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
No latch inferred for signal `\uart_tx_fsm.\mux_sel_out' from process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
No latch inferred for signal `\uart_tx_fsm.\next_state' from process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
No latch inferred for signal `\mux.\tx_out' from process `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
No latch inferred for signal `\sys_control_rx.\rf_wr_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_rd_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_addr_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_wr_data_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_fun_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\clk_gate_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\clk_div_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\uart_rf_send_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\uart_alu_send_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_addr_en' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_rd_store' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_data_store' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\next_state' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
No latch inferred for signal `\sys_control_tx.\uart_tx_data_valid_out' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
No latch inferred for signal `\sys_control_tx.\uart_tx_data_out' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
No latch inferred for signal `\sys_control_tx.\next_state' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
No latch inferred for signal `\alu.\alu_out_comp' from process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
No latch inferred for signal `\alu.\alu_out_comp_valid' from process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Latch inferred for signal `\clk_gate.\latch_out' from process `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18': $auto$proc_dlatch.cc:427:proc_dlatch$1270

27.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\uart_rx_fsm.\current_state' using process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
  created $adff cell `$procdff$1271' with positive edge clock and negative level reset.
Creating register for signal `\data_sampling.\register' using process `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
  created $adff cell `$procdff$1272' with positive edge clock and negative level reset.
Creating register for signal `\edge_bit_counter.\bit_cnt_out' using process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
  created $adff cell `$procdff$1273' with positive edge clock and negative level reset.
Creating register for signal `\edge_bit_counter.\edge_cnt_out' using process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
  created $adff cell `$procdff$1274' with positive edge clock and negative level reset.
Creating register for signal `\deserializer.\register' using process `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
  created $adff cell `$procdff$1275' with positive edge clock and negative level reset.
Creating register for signal `\parity_check.\register' using process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
  created $adff cell `$procdff$1276' with positive edge clock and negative level reset.
Creating register for signal `\uart_tx_fsm.\busy_out' using process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
  created $adff cell `$procdff$1277' with positive edge clock and negative level reset.
Creating register for signal `\uart_tx_fsm.\current_state' using process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
  created $adff cell `$procdff$1278' with positive edge clock and negative level reset.
Creating register for signal `\parity_calc.\par_bit_out' using process `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
  created $adff cell `$procdff$1279' with positive edge clock and negative level reset.
Creating register for signal `\serializer.\counter' using process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
  created $adff cell `$procdff$1280' with positive edge clock and negative level reset.
Creating register for signal `\serializer.\int_reg' using process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
  created $adff cell `$procdff$1281' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\uart_alu_send_data_out' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
  created $adff cell `$procdff$1282' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\uart_rf_send_data_out' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
  created $adff cell `$procdff$1283' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\rf_addr_reg' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
  created $adff cell `$procdff$1284' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\current_state' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
  created $adff cell `$procdff$1285' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_tx.\current_state' using process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
  created $adff cell `$procdff$1286' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\rd_data_out' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1287' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\rd_data_valid_out' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1288' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\i' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1289' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[0]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1290' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[1]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1291' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[2]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1292' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[3]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1293' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[4]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1294' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[5]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1295' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[6]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1296' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[7]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1297' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[8]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1298' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[9]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1299' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[10]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1300' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[11]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1301' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[12]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1302' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[13]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1303' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[14]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1304' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[15]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1305' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1306' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1307' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1308' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1309' with positive edge clock and negative level reset.
Creating register for signal `\alu.\data_out' using process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
  created $adff cell `$procdff$1310' with positive edge clock and negative level reset.
Creating register for signal `\alu.\data_valid_out' using process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
  created $adff cell `$procdff$1311' with positive edge clock and negative level reset.
Creating register for signal `\clk_divider.\count' using process `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
  created $adff cell `$procdff$1312' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\sync_data_out' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
  created $adff cell `$procdff$1313' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\enable_pulse_out' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
  created $adff cell `$procdff$1314' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\ff' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
  created $adff cell `$procdff$1315' with positive edge clock and negative level reset.
Creating register for signal `\reset_synchronizer.\ff' using process `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
  created $adff cell `$procdff$1316' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\sync_data_out' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1317' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\i' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1318' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.$splitcmplxassign$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:24$3' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1319' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\reg_file[0]' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1320' with positive edge clock and negative level reset.

27.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

27.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
Found and cleaned up 8 empty switches in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
Found and cleaned up 4 empty switches in `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Removing empty process `data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Found and cleaned up 3 empty switches in `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Removing empty process `edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Found and cleaned up 1 empty switch in `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Removing empty process `deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Found and cleaned up 5 empty switches in `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
Removing empty process `parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
Removing empty process `parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
Found and cleaned up 2 empty switches in `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
Removing empty process `strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
Found and cleaned up 2 empty switches in `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
Removing empty process `stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
Found and cleaned up 2 empty switches in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Found and cleaned up 1 empty switch in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
Found and cleaned up 5 empty switches in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
Found and cleaned up 2 empty switches in `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Removing empty process `parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Found and cleaned up 2 empty switches in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Removing empty process `serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Found and cleaned up 2 empty switches in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Removing empty process `serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Found and cleaned up 1 empty switch in `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
Removing empty process `mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Found and cleaned up 9 empty switches in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
Found and cleaned up 11 empty switches in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
Found and cleaned up 1 empty switch in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
Found and cleaned up 7 empty switches in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
Found and cleaned up 4 empty switches in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Removing empty process `reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Found and cleaned up 5 empty switches in `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Removing empty process `alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Removing empty process `alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
Found and cleaned up 3 empty switches in `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Removing empty process `clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Found and cleaned up 1 empty switch in `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
Removing empty process `clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
Found and cleaned up 1 empty switch in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
Removing empty process `reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
Removing empty process `bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
Cleaned up 91 empty switches.

27.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_rx_fsm.
<suppressed ~6 debug messages>
Optimizing module data_sampling.
Optimizing module edge_bit_counter.
Optimizing module deserializer.
Optimizing module parity_check.
<suppressed ~4 debug messages>
Optimizing module strt_check.
<suppressed ~1 debug messages>
Optimizing module stp_check.
Optimizing module uart_tx_fsm.
<suppressed ~6 debug messages>
Optimizing module parity_calc.
<suppressed ~2 debug messages>
Optimizing module serializer.
<suppressed ~1 debug messages>
Optimizing module mux.
<suppressed ~1 debug messages>
Optimizing module uart_tx.
Optimizing module uart_rx.
Optimizing module sys_control_rx.
<suppressed ~3 debug messages>
Optimizing module sys_control_tx.
<suppressed ~4 debug messages>
Optimizing module sys_control.
Optimizing module reg_file.
<suppressed ~2 debug messages>
Optimizing module alu.
<suppressed ~3 debug messages>
Optimizing module uart_top.
Optimizing module clk_divider.
<suppressed ~3 debug messages>
Optimizing module clk_gate.
<suppressed ~7 debug messages>
Optimizing module data_synchronizer.
Optimizing module reset_synchronizer.
Optimizing module bit_synchronizer.
Optimizing module system_top.

27.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_rx_fsm.
<suppressed ~4 debug messages>
Optimizing module data_sampling.
<suppressed ~6 debug messages>
Optimizing module edge_bit_counter.
Optimizing module deserializer.
Optimizing module parity_check.
Optimizing module strt_check.
Optimizing module stp_check.
Optimizing module uart_tx_fsm.
Optimizing module parity_calc.
Optimizing module serializer.
Optimizing module mux.
Optimizing module uart_tx.
Optimizing module uart_rx.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module sys_control.
Optimizing module reg_file.
Optimizing module alu.
Optimizing module uart_top.
Optimizing module clk_divider.
<suppressed ~2 debug messages>
Optimizing module clk_gate.
Optimizing module data_synchronizer.
Optimizing module reset_synchronizer.
Optimizing module bit_synchronizer.
Optimizing module system_top.

27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \uart_tx_fsm..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \system_top..
Removed 46 unused cells and 427 unused wires.
<suppressed ~69 debug messages>

27.5. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

27.6. Executing OPT pass (performing simple optimizations).

27.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~18 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
<suppressed ~3 debug messages>
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~48 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~144 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~36 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~99 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~30 debug messages>
Removed a total of 126 cells.

27.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1193.
    dead port 2/2 on $mux $procmux$1195.
    dead port 2/2 on $mux $procmux$1205.
    dead port 2/2 on $mux $procmux$1207.
    dead port 2/2 on $mux $procmux$1218.
    dead port 2/2 on $mux $procmux$1220.
    dead port 2/2 on $mux $procmux$1240.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1250.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$376.
    dead port 2/2 on $mux $procmux$379.
    dead port 2/2 on $mux $procmux$381.
    dead port 2/2 on $mux $procmux$385.
    dead port 2/2 on $mux $procmux$388.
    dead port 2/2 on $mux $procmux$390.
    dead port 1/2 on $mux $procmux$397.
    dead port 2/2 on $mux $procmux$399.
    dead port 2/2 on $mux $procmux$405.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$945.
    dead port 1/2 on $mux $procmux$948.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$423.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$414.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$654.
    dead port 2/2 on $mux $procmux$516.
    dead port 2/2 on $mux $procmux$522.
    dead port 2/2 on $mux $procmux$529.
    dead port 2/2 on $mux $procmux$536.
    dead port 2/2 on $mux $procmux$543.
    dead port 2/2 on $mux $procmux$551.
    dead port 2/2 on $mux $procmux$559.
    dead port 2/2 on $mux $procmux$567.
    dead port 2/2 on $mux $procmux$740.
    dead port 2/2 on $mux $procmux$576.
    dead port 2/2 on $mux $procmux$747.
    dead port 2/2 on $mux $procmux$755.
    dead port 2/2 on $mux $procmux$764.
    dead port 2/2 on $mux $procmux$586.
    dead port 2/2 on $mux $procmux$774.
    dead port 2/2 on $mux $procmux$785.
    dead port 2/2 on $mux $procmux$797.
    dead port 2/2 on $mux $procmux$596.
    dead port 2/2 on $mux $procmux$810.
    dead port 2/2 on $mux $procmux$828.
    dead port 2/2 on $mux $procmux$830.
    dead port 2/2 on $mux $procmux$844.
    dead port 2/2 on $mux $procmux$607.
    dead port 2/2 on $mux $procmux$618.
    dead port 2/2 on $mux $procmux$629.
    dead port 2/2 on $mux $procmux$641.
    dead port 2/2 on $mux $procmux$510.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$878.
    dead port 2/2 on $mux $procmux$886.
    dead port 2/2 on $mux $procmux$895.
    dead port 1/2 on $mux $procmux$906.
    dead port 2/2 on $mux $procmux$908.
    dead port 2/2 on $mux $procmux$918.
    dead port 2/2 on $mux $procmux$871.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$212.
    dead port 2/2 on $mux $procmux$219.
    dead port 2/2 on $mux $procmux$227.
    dead port 2/2 on $mux $procmux$236.
    dead port 2/2 on $mux $procmux$204.
    dead port 2/2 on $mux $procmux$206.
    dead port 1/2 on $mux $procmux$269.
    dead port 2/2 on $mux $procmux$271.
    dead port 2/2 on $mux $procmux$277.
    dead port 2/2 on $mux $procmux$284.
    dead port 2/2 on $mux $procmux$292.
    dead port 1/2 on $mux $procmux$302.
    dead port 2/2 on $mux $procmux$304.
    dead port 2/2 on $mux $procmux$313.
    dead port 2/2 on $mux $procmux$323.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$442.
    dead port 2/2 on $mux $procmux$451.
    dead port 2/2 on $mux $procmux$453.
    dead port 2/2 on $mux $procmux$461.
    dead port 2/2 on $mux $procmux$471.
Removed 76 multiplexer ports.
<suppressed ~65 debug messages>

27.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    New ctrl vector for $pmux cell $procmux$696: $auto$opt_reduce.cc:134:opt_pmux$1322
    New ctrl vector for $pmux cell $procmux$710: $auto$opt_reduce.cc:134:opt_pmux$1324
    New ctrl vector for $pmux cell $procmux$717: { $auto$opt_reduce.cc:134:opt_pmux$1326 $procmux$537_CMP }
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    New ctrl vector for $pmux cell $procmux$863: $auto$opt_reduce.cc:134:opt_pmux$1328
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
    New ctrl vector for $pmux cell $procmux$251: $auto$opt_reduce.cc:134:opt_pmux$1330
    New ctrl vector for $pmux cell $procmux$245: $auto$opt_reduce.cc:134:opt_pmux$1332
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 6 changes.

27.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~27 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~6 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~3 debug messages>
Removed a total of 13 cells.

27.6.6. Executing OPT_DFF pass (perform DFF optimizations).

27.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 212 unused wires.
<suppressed ~11 debug messages>

27.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.9. Rerunning OPT passes. (Maybe there is more to do..)

27.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    New ctrl vector for $pmux cell $procmux$672: $auto$opt_reduce.cc:134:opt_pmux$1334
    New ctrl vector for $pmux cell $procmux$732: $auto$opt_reduce.cc:134:opt_pmux$1336
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    New ctrl vector for $pmux cell $procmux$921: { $procmux$909_CMP $procmux$860_CMP $procmux$879_CMP $auto$opt_reduce.cc:134:opt_pmux$1338 }
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
    New ctrl vector for $pmux cell $procmux$474: { $procmux$437_CMP \ser_en_out $procmux$435_CMP $auto$opt_reduce.cc:134:opt_pmux$1340 }
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 4 changes.

27.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.6.13. Executing OPT_DFF pass (perform DFF optimizations).

27.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.16. Rerunning OPT passes. (Maybe there is more to do..)

27.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.6.20. Executing OPT_DFF pass (perform DFF optimizations).

27.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.23. Finished OPT passes. (There is nothing left to do.)

27.7. Executing FSM pass (extract and optimize FSM).

27.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking sys_control_rx.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking sys_control_tx.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking uart_rx_fsm.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking uart_tx_fsm.current_state as FSM state register:
    Circuit seems to be self-resetting.

27.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

27.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

27.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

27.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

27.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

27.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27.8. Executing OPT pass (performing simple optimizations).

27.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [2]).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [1]).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [0]).
Adding EN signal on $procdff$1313 ($adff) from module data_synchronizer (D = \unsync_data_in, Q = \sync_data_out).
Adding EN signal on $procdff$1275 ($adff) from module deserializer (D = { \sampled_bit_in \register [7:1] }, Q = \register).
Adding EN signal on $procdff$1274 ($adff) from module edge_bit_counter (D = $0\edge_cnt_out[4:0], Q = \edge_cnt_out).
Adding EN signal on $procdff$1273 ($adff) from module edge_bit_counter (D = $0\bit_cnt_out[3:0], Q = \bit_cnt_out).
Adding EN signal on $procdff$1279 ($adff) from module parity_calc (D = $0\par_bit_out[0:0], Q = \par_bit_out).
Adding EN signal on $procdff$1276 ($adff) from module parity_check (D = \register [8:1], Q = \register [8:1]).
Handling D = Q on $auto$ff.cc:266:slice$1371 ($adffe) from module parity_check (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Adding EN signal on $procdff$1305 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[15]).
Adding EN signal on $procdff$1304 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[14]).
Adding EN signal on $procdff$1303 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[13]).
Adding EN signal on $procdff$1302 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[12]).
Adding EN signal on $procdff$1301 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[11]).
Adding EN signal on $procdff$1300 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[10]).
Adding EN signal on $procdff$1299 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[9]).
Adding EN signal on $procdff$1298 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[8]).
Adding EN signal on $procdff$1297 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[7]).
Adding EN signal on $procdff$1296 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[6]).
Adding EN signal on $procdff$1295 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[5]).
Adding EN signal on $procdff$1294 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[4]).
Adding EN signal on $procdff$1293 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[3]).
Adding EN signal on $procdff$1292 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[2]).
Adding EN signal on $procdff$1291 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[1]).
Adding EN signal on $procdff$1290 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[0]).
Adding EN signal on $procdff$1288 ($adff) from module reg_file (D = $procmux$1175_Y, Q = \rd_data_valid_out).
Adding EN signal on $procdff$1287 ($adff) from module reg_file (D = $4$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$76, Q = \rd_data_out).
Adding EN signal on $procdff$1281 ($adff) from module serializer (D = $0\int_reg[7:0], Q = \int_reg).
Adding EN signal on $procdff$1280 ($adff) from module serializer (D = $0\counter[2:0], Q = \counter).
Adding EN signal on $procdff$1284 ($adff) from module sys_control_rx (D = \uart_rx_data_in, Q = \rf_addr_reg).
Adding EN signal on $procdff$1283 ($adff) from module sys_control_rx (D = \rf_rd_data_in, Q = \uart_rf_send_data_out).
Adding EN signal on $procdff$1282 ($adff) from module sys_control_rx (D = \alu_data_in, Q = \uart_alu_send_data_out).
Adding EN signal on $procdff$1286 ($adff) from module sys_control_tx (D = \next_state, Q = \current_state).
Adding EN signal on $procdff$1271 ($adff) from module uart_rx_fsm (D = \next_state, Q = \current_state).
Adding EN signal on $procdff$1277 ($adff) from module uart_tx_fsm (D = $0\busy_out[0:0], Q = \busy_out).

27.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 50 unused cells and 48 unused wires.
<suppressed ~56 debug messages>

27.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~2 debug messages>
Optimizing module mux.
Optimizing module parity_calc.
<suppressed ~1 debug messages>
Optimizing module parity_check.
<suppressed ~5 debug messages>
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~2 debug messages>
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~1 debug messages>

27.8.9. Rerunning OPT passes. (Maybe there is more to do..)

27.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
<suppressed ~3 debug messages>
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
<suppressed ~3 debug messages>
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 2 cells.

27.8.13. Executing OPT_DFF pass (perform DFF optimizations).

27.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 1 unused cells and 6 unused wires.
<suppressed ~4 debug messages>

27.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.16. Rerunning OPT passes. (Maybe there is more to do..)

27.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.20. Executing OPT_DFF pass (perform DFF optimizations).

27.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.23. Finished OPT passes. (There is nothing left to do.)

27.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 7 bits (of 16) from port Y of cell alu.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35 ($add).
Removed top 7 bits (of 16) from port Y of cell alu.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36 ($sub).
Removed top 8 bits (of 16) from port Y of cell alu.$and$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:55$39 ($and).
Removed top 8 bits (of 16) from port Y of cell alu.$or$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:58$40 ($or).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:61$42 ($not).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:64$44 ($not).
Removed top 8 bits (of 16) from port Y of cell alu.$xor$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:67$45 ($xor).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:70$47 ($not).
Removed top 14 bits (of 16) from mux cell alu.$procmux$1191 ($mux).
Removed top 14 bits (of 16) from mux cell alu.$procmux$1203 ($mux).
Removed top 15 bits (of 16) from mux cell alu.$procmux$1216 ($mux).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1232_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1233_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1234_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1235_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1236_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1237_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$1238_CMP0 ($eq).
Removed top 15 bits (of 16) from wire alu.$3\alu_out_comp[15:0].
Removed top 14 bits (of 16) from wire alu.$4\alu_out_comp[15:0].
Removed top 14 bits (of 16) from wire alu.$5\alu_out_comp[15:0].
Removed top 7 bits (of 16) from wire alu.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35_Y.
Removed top 8 bits (of 16) from wire alu.$and$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:55$39_Y.
Removed top 8 bits (of 16) from wire alu.$or$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:58$40_Y.
Removed top 8 bits (of 16) from wire alu.$xor$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:67$45_Y.
Removed top 31 bits (of 32) from port B of cell clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
Removed top 27 bits (of 32) from port Y of cell clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
Removed top 28 bits (of 32) from port B of cell clk_divider.$le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28 ($le).
Removed top 31 bits (of 32) from mux cell clk_divider.$ternary$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$31 ($mux).
Removed top 27 bits (of 32) from wire clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24_Y.
Removed top 28 bits (of 32) from port A of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 31 bits (of 32) from port B of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 27 bits (of 32) from port Y of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 1 bits (of 5) from port B of cell data_sampling.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:20$152 ($eq).
Removed top 28 bits (of 32) from port A of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 31 bits (of 32) from port B of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 27 bits (of 32) from port Y of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 27 bits (of 32) from port B of cell data_sampling.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$155 ($eq).
Removed top 27 bits (of 32) from wire data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154_Y.
Removed top 24 bits (of 32) from mux cell deserializer.$ternary$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:25$139 ($mux).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
Removed top 27 bits (of 32) from port Y of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
Removed top 26 bits (of 32) from port Y of cell edge_bit_counter.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
Removed top 28 bits (of 32) from port Y of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
Removed top 1 bits (of 3) from port B of cell edge_bit_counter.$auto$opt_dff.cc:195:make_patterns_logic$1365 ($ne).
Removed top 27 bits (of 32) from wire edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142_Y.
Removed top 28 bits (of 32) from wire edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145_Y.
Removed top 1 bits (of 2) from port B of cell mux.$procmux$498_CMP0 ($eq).
Removed top 8 bits (of 9) from wire parity_check.register.
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1052_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1066_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1081_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1097_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell reg_file.$procmux$1114_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell reg_file.$procmux$1132_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell reg_file.$procmux$1151_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
Removed top 29 bits (of 32) from port Y of cell serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
Removed top 29 bits (of 32) from wire serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100_Y.
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$560_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$587_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$608_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sys_control_rx.$procmux$619_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sys_control_rx.$procmux$655_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$745 ($mux).
Removed top 3 bits (of 4) from mux cell sys_control_rx.$procmux$753 ($mux).
Removed top 1 bits (of 4) from mux cell sys_control_rx.$procmux$772 ($mux).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$783 ($mux).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$795 ($mux).
Removed top 3 bits (of 4) from mux cell sys_control_rx.$procmux$808 ($mux).
Removed top 4 bits (of 8) from FF cell sys_control_rx.$auto$ff.cc:266:slice$1435 ($adffe).
Removed top 2 bits (of 4) from wire sys_control_rx.$10\next_state[3:0].
Removed top 3 bits (of 4) from wire sys_control_rx.$4\next_state[3:0].
Removed top 2 bits (of 4) from wire sys_control_rx.$5\next_state[3:0].
Removed top 2 bits (of 4) from wire sys_control_rx.$6\next_state[3:0].
Removed top 4 bits (of 8) from wire sys_control_rx.rf_addr_reg.
Removed top 1 bits (of 3) from port B of cell sys_control_tx.$procmux$860_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell sys_control_tx.$procmux$861_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell sys_control_tx.$procmux$879_CMP0 ($eq).
Removed top 4 bits (of 8) from wire system_top.rf_addr.
Removed top 3 bits (of 4) from port B of cell uart_rx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:48$164 ($eq).
Removed top 28 bits (of 32) from port A of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 30 bits (of 32) from port B of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 27 bits (of 32) from port Y of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 27 bits (of 32) from port B of cell uart_rx_fsm.$gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186 ($gt).
Removed top 28 bits (of 32) from port B of cell uart_rx_fsm.$lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189 ($lt).
Removed top 31 bits (of 32) from port B of cell uart_rx_fsm.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
Removed top 26 bits (of 32) from port Y of cell uart_rx_fsm.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
Removed top 28 bits (of 32) from port A of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 30 bits (of 32) from port B of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 27 bits (of 32) from port Y of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 27 bits (of 32) from port B of cell uart_rx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$195 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_rx_fsm.$procmux$220_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_rx_fsm.$procmux$228_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_rx_fsm.$procmux$237_CMP0 ($eq).
Removed top 27 bits (of 32) from wire uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194_Y.
Removed top 27 bits (of 32) from wire uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185_Y.
Removed top 1 bits (of 3) from port B of cell uart_tx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:69$115 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_tx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:84$120 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_tx_fsm.$procmux$435_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_tx_fsm.$procmux$437_CMP0 ($eq).
Removed top 2 bits (of 3) from mux cell uart_tx_fsm.$procmux$440 ($mux).
Removed top 2 bits (of 3) from wire uart_tx_fsm.$2\next_state[2:0].
Removed top 1 bits (of 3) from wire uart_tx_fsm.next_state.

27.10. Executing PEEPOPT pass (run peephole optimizers).

27.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 24 unused wires.
<suppressed ~11 debug messages>

27.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35 ($add).
  creating $macc model for $mul$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:49$37 ($mul).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35.
  creating $macc cell for $mul$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:49$37: $auto$alumacc.cc:365:replace_macc$1488
  creating $alu model for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49 ($gt): new $alu
  creating $alu model for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:85$50 ($lt): merged with $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49.
  creating $alu model for $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:73$48 ($eq): merged with $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49.
  creating $alu cell for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49, $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:85$50, $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:73$48: $auto$alumacc.cc:485:replace_alu$1490
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35: $auto$alumacc.cc:485:replace_alu$1501
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36: $auto$alumacc.cc:485:replace_alu$1504
  created 3 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module bit_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clk_divider:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24.
  creating $alu model for $le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28 ($le): new $alu
  creating $alu cell for $le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28: $auto$alumacc.cc:485:replace_alu$1508
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24: $auto$alumacc.cc:485:replace_alu$1521
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clk_gate:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_sampling:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154: $auto$alumacc.cc:485:replace_alu$1524
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149: $auto$alumacc.cc:485:replace_alu$1527
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module deserializer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module edge_bit_counter:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142: $auto$alumacc.cc:485:replace_alu$1530
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145: $auto$alumacc.cc:485:replace_alu$1533
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143: $auto$alumacc.cc:485:replace_alu$1536
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module parity_calc:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module parity_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reg_file:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reset_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module serializer:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100: $auto$alumacc.cc:485:replace_alu$1539
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module stp_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module strt_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control_rx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control_tx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module system_top:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_rx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_rx_fsm:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194.
  creating $alu model for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186 ($gt): new $alu
  creating $alu model for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189 ($lt): new $alu
  creating $alu model for $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:60$174 ($eq): merged with $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189.
  creating $alu cell for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189, $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:60$174: $auto$alumacc.cc:485:replace_alu$1544
  creating $alu cell for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186: $auto$alumacc.cc:485:replace_alu$1551
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194: $auto$alumacc.cc:485:replace_alu$1556
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185: $auto$alumacc.cc:485:replace_alu$1559
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191: $auto$alumacc.cc:485:replace_alu$1562
  created 5 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_top:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_tx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_tx_fsm:
  created 0 $alu and 0 $macc cells.

27.13. Executing SHARE pass (SAT-based resource sharing).

27.14. Executing OPT pass (performing simple optimizations).

27.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~1 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~9 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 3 cells.

27.14.6. Executing OPT_DFF pass (perform DFF optimizations).

27.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 2 unused cells and 12 unused wires.
<suppressed ~6 debug messages>

27.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.9. Rerunning OPT passes. (Maybe there is more to do..)

27.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.14.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.16. Finished OPT passes. (There is nothing left to do.)

27.15. Executing MEMORY pass.

27.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

27.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

27.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

27.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

27.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

27.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

27.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

27.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

27.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.17. Executing OPT pass (performing simple optimizations).

27.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~20 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
<suppressed ~1 debug messages>
Optimizing module clk_gate.
Optimizing module data_sampling.
<suppressed ~1 debug messages>
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~4 debug messages>
Optimizing module mux.
<suppressed ~1 debug messages>
Optimizing module parity_calc.
<suppressed ~1 debug messages>
Optimizing module parity_check.
<suppressed ~3 debug messages>
Optimizing module reg_file.
<suppressed ~2 debug messages>
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~2 debug messages>
Optimizing module stp_check.
<suppressed ~2 debug messages>
Optimizing module strt_check.
<suppressed ~2 debug messages>
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~10 debug messages>
Optimizing module sys_control_tx.
<suppressed ~5 debug messages>
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~15 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~4 debug messages>

27.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.17.3. Executing OPT_DFF pass (perform DFF optimizations).

27.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 1 unused cells and 40 unused wires.
<suppressed ~14 debug messages>

27.17.5. Finished fast OPT passes.

27.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

27.19. Executing OPT pass (performing simple optimizations).

27.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
    Consolidated identical input bits for $mux cell $procmux$1191:
      Old ports: A=2'11, B=2'00, Y=$5\alu_out_comp[15:0]
      New ports: A=1'1, B=1'0, Y=$5\alu_out_comp[15:0] [0]
      New connections: $5\alu_out_comp[15:0] [1] = $5\alu_out_comp[15:0] [0]
    Consolidated identical input bits for $mux cell $procmux$1203:
      Old ports: A=2'10, B=2'00, Y=$4\alu_out_comp[15:0]
      New ports: A=1'1, B=1'0, Y=$4\alu_out_comp[15:0] [1]
      New connections: $4\alu_out_comp[15:0] [0] = 1'0
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    Consolidated identical input bits for $mux cell $procmux$738:
      Old ports: A=4'1010, B=4'0000, Y=$11\next_state[3:0]
      New ports: A=1'1, B=1'0, Y=$11\next_state[3:0] [1]
      New connections: { $11\next_state[3:0] [3:2] $11\next_state[3:0] [0] } = { $11\next_state[3:0] [1] 2'00 }
    Consolidated identical input bits for $mux cell $procmux$762:
      Old ports: A=4'0111, B=4'1000, Y=$8\next_state[3:0]
      New ports: A=2'01, B=2'10, Y={ $8\next_state[3:0] [3] $8\next_state[3:0] [0] }
      New connections: $8\next_state[3:0] [2:1] = { $8\next_state[3:0] [0] $8\next_state[3:0] [0] }
    Consolidated identical input bits for $mux cell $procmux$772:
      Old ports: A=3'110, B=3'000, Y=$7\next_state[3:0] [2:0]
      New ports: A=1'1, B=1'0, Y=$7\next_state[3:0] [1]
      New connections: { $7\next_state[3:0] [2] $7\next_state[3:0] [0] } = { $7\next_state[3:0] [1] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$795:
      Old ports: A=2'11, B=2'00, Y=$5\next_state[3:0]
      New ports: A=1'1, B=1'0, Y=$5\next_state[3:0] [0]
      New connections: $5\next_state[3:0] [1] = $5\next_state[3:0] [0]
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    Consolidated identical input bits for $mux cell $procmux$916:
      Old ports: A=3'010, B=3'001, Y=$2\next_state[2:0]
      New ports: A=2'10, B=2'01, Y=$2\next_state[2:0] [1:0]
      New connections: $2\next_state[2:0] [2] = 1'0
    New ctrl vector for $pmux cell $procmux$921: { $procmux$909_CMP $procmux$860_CMP $procmux$879_CMP }
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
    Consolidated identical input bits for $mux cell $procmux$275:
      Old ports: A=3'000, B=3'001, Y=$7\next_state[2:0]
      New ports: A=1'0, B=1'1, Y=$7\next_state[2:0] [0]
      New connections: $7\next_state[2:0] [2:1] = 2'00
    Consolidated identical input bits for $mux cell $procmux$311:
      Old ports: A=3'011, B=3'010, Y=$3\next_state[2:0]
      New ports: A=1'1, B=1'0, Y=$3\next_state[2:0] [0]
      New connections: $3\next_state[2:0] [2:1] = 2'01
    New ctrl vector for $pmux cell $procmux$326: { $procmux$324_CMP $procmux$237_CMP $auto$opt_reduce.cc:134:opt_pmux$1578 $procmux$207_CMP }
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
    Consolidated identical input bits for $mux cell $procmux$448:
      Old ports: A=3'100, B=3'011, Y=$4\next_state[2:0]
      New ports: A=2'10, B=2'01, Y={ $4\next_state[2:0] [2] $4\next_state[2:0] [0] }
      New connections: $4\next_state[2:0] [1] = $4\next_state[2:0] [0]
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 12 changes.

27.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.19.6. Executing OPT_SHARE pass.

27.19.7. Executing OPT_DFF pass (perform DFF optimizations).

27.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~3 debug messages>
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~2 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.10. Rerunning OPT passes. (Maybe there is more to do..)

27.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~3 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.19.14. Executing OPT_SHARE pass.

27.19.15. Executing OPT_DFF pass (perform DFF optimizations).

27.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

27.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.18. Rerunning OPT passes. (Maybe there is more to do..)

27.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.19.22. Executing OPT_SHARE pass.

27.19.23. Executing OPT_DFF pass (perform DFF optimizations).

27.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.26. Finished OPT passes. (There is nothing left to do.)

27.20. Executing TECHMAP pass (map to technology primitives).

27.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

27.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$bfceb922395790c0ce92e9f9b5b428d4fc72cc30\_90_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$332fab4e157f868977379756d21fa99887c3c6c4\_90_alu for cells of type $alu.
Using template $paramod$0ae6dcbc606d0267ec97d3ccf20343286af3366c\_90_alu for cells of type $alu.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using template $paramod$20d3ee62d72123142eb855d7ddafd835e31ba009\_90_pmux for cells of type $pmux.
Using template $paramod$4d45682f6d5f8751d24fc75184ef72226da353f7\_90_pmux for cells of type $pmux.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod$75a16668b548c3bac59647e2f0c7dad55b2b94b9\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_xor.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$943564b9366bbc392bf4bbc801aa0a2d7742a4e0\_90_alu for cells of type $alu.
Using template $paramod$dde52db7035cb02b3cc5e73865788532339e3bcb\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dlatch.
Using template $paramod$83dd457849c736323edf2edb15923eb27f99c683\_90_alu for cells of type $alu.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\_90_alu for cells of type $alu.
Using template $paramod$67686dad8c792aead4495d34957ca1f4c910d0ba\_90_div for cells of type $div.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add \data_a_in * \data_b_in (8x8 bits, unsigned)
Using template $paramod$e85bcdd999a9f7e1064fcb77207041270947b77a\_90_pmux for cells of type $pmux.
Using template $paramod$67686dad8c792aead4495d34957ca1f4c910d0ba\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000010000 for cells of type $__div_mod_u.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod$02488ff6fa51b28bbfa470bdd9b0e548b3357746\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$d66a711d7e97d14a7c7a9fd9e900c39b1fc36cfa\_90_alu for cells of type $alu.
Using template $paramod$8359f4ac8e08a95551ec17e9becbee696d87568d\_90_alu for cells of type $alu.
Using template $paramod$3e9f586ebf39197c9185418e155ec5725178e703\_90_alu for cells of type $alu.
Using template $paramod$99f84fe1e34117baf970301335fa146f92b93eb7\_90_alu for cells of type $alu.
Using template $paramod$10caef7eb223495dec7ca6c51abc18dbd379ce45\_90_alu for cells of type $alu.
Using template $paramod$6ae352d62dfc78ea1f63c7f3961ba142be4a2f93\_90_alu for cells of type $alu.
Using template $paramod$7bdc7d89ea9376c9c454fd05d9b64ca6288b61c9\_90_alu for cells of type $alu.
Using template $paramod$96a374a77d27fe2a5f65189ccd5c4d82c02f3e0c\_90_alu for cells of type $alu.
Using template $paramod$c01a73249af533291d6c07bc7dff8edfd9012ebf\_90_alu for cells of type $alu.
Using template $paramod$4dafc65fa46f14914da22e0fac43fee737cf5e98\_90_alu for cells of type $alu.
Using template $paramod$6514813ccfd0fbcd872b47be16e9bc3f005ba67f\_90_alu for cells of type $alu.
Using template $paramod$90cb621aa18d0bfc972ff6df82973fce6d62f25a\_90_alu for cells of type $alu.
Using template $paramod$28a6ec5648d14f65107108cc45dfc9433b8b29ab\_90_alu for cells of type $alu.
Using template $paramod$1b1e81b08462e7f621826ba0c290068af8e4e550\_90_alu for cells of type $alu.
Using template $paramod$1c5b0982e801b857faf786570d1281fe30bbf0dc\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
No more expansions possible.
<suppressed ~8829 debug messages>

27.21. Executing OPT pass (performing simple optimizations).

27.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~5360 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
<suppressed ~41 debug messages>
Optimizing module clk_gate.
Optimizing module data_sampling.
<suppressed ~59 debug messages>
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~87 debug messages>
Optimizing module mux.
<suppressed ~8 debug messages>
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
<suppressed ~60 debug messages>
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~21 debug messages>
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~128 debug messages>
Optimizing module sys_control_tx.
<suppressed ~36 debug messages>
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~167 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~38 debug messages>

27.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~7638 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
<suppressed ~21 debug messages>
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
<suppressed ~18 debug messages>
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
<suppressed ~12 debug messages>
Finding identical cells in module `\mux'.
<suppressed ~6 debug messages>
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~156 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
<suppressed ~12 debug messages>
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~144 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~15 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~66 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~12 debug messages>
Removed a total of 2700 cells.

27.21.3. Executing OPT_DFF pass (perform DFF optimizations).

27.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 371 unused cells and 5222 unused wires.
<suppressed ~383 debug messages>

27.21.5. Finished fast OPT passes.

27.22. Executing ABC pass (technology mapping using ABC).

27.22.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 2472 gates and 2494 wires to a netlist network with 21 inputs and 16 outputs.

27.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      183
ABC RESULTS:              NAND cells:       47
ABC RESULTS:              XNOR cells:      101
ABC RESULTS:               NOT cells:      109
ABC RESULTS:               AND cells:      110
ABC RESULTS:             ORNOT cells:       84
ABC RESULTS:               NOR cells:      171
ABC RESULTS:               XOR cells:      300
ABC RESULTS:                OR cells:      329
ABC RESULTS:            ANDNOT cells:      832
ABC RESULTS:        internal signals:     2457
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

27.22.2. Extracting gate netlist of module `\bit_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.3. Extracting gate netlist of module `\clk_divider' to `<abc-temp-dir>/input.blif'..
Extracted 61 gates and 74 wires to a netlist network with 11 inputs and 6 outputs.

27.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.3.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               XOR cells:        7
ABC RESULTS:                OR cells:       10
ABC RESULTS:            ANDNOT cells:       21
ABC RESULTS:        internal signals:       57
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        6
Removing temp directory.

27.22.4. Extracting gate netlist of module `\clk_gate' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

27.22.4.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.5. Extracting gate netlist of module `\data_sampling' to `<abc-temp-dir>/input.blif'..
Extracted 63 gates and 76 wires to a netlist network with 13 inputs and 4 outputs.

27.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.5.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        5
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       16
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:            ANDNOT cells:       10
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:       16
ABC RESULTS:        internal signals:       59
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        4
Removing temp directory.

27.22.6. Extracting gate netlist of module `\data_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

27.22.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.6.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.7. Extracting gate netlist of module `\deserializer' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 18 wires to a netlist network with 9 inputs and 8 outputs.

27.22.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        8
Removing temp directory.

27.22.8. Extracting gate netlist of module `\edge_bit_counter' to `<abc-temp-dir>/input.blif'..
Extracted 66 gates and 83 wires to a netlist network with 16 inputs and 11 outputs.

27.22.8.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.8.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:               NOT cells:        4
ABC RESULTS:                OR cells:       11
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               XOR cells:       12
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:        internal signals:       56
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       11
Removing temp directory.

27.22.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 14 gates and 19 wires to a netlist network with 4 inputs and 1 outputs.

27.22.9.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.9.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.10. Extracting gate netlist of module `\parity_calc' to `<abc-temp-dir>/input.blif'..
Extracted 13 gates and 23 wires to a netlist network with 10 inputs and 2 outputs.

27.22.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.10.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:        5
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        2
Removing temp directory.

27.22.11. Extracting gate netlist of module `\parity_check' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 6 wires to a netlist network with 3 inputs and 1 outputs.

27.22.11.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.11.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.12. Extracting gate netlist of module `\reg_file' to `<abc-temp-dir>/input.blif'..
Extracted 320 gates and 454 wires to a netlist network with 134 inputs and 27 outputs.

27.22.12.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.12.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:               AND cells:        2
ABC RESULTS:              NAND cells:        8
ABC RESULTS:            ANDNOT cells:      142
ABC RESULTS:                OR cells:      133
ABC RESULTS:               MUX cells:        8
ABC RESULTS:        internal signals:      293
ABC RESULTS:           input signals:      134
ABC RESULTS:          output signals:       27
Removing temp directory.

27.22.13. Extracting gate netlist of module `\reset_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.14. Extracting gate netlist of module `\serializer' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 46 wires to a netlist network with 21 inputs and 14 outputs.

27.22.14.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.14.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:               MUX cells:        7
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       14
Removing temp directory.

27.22.15. Extracting gate netlist of module `\stp_check' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

27.22.15.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.15.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.16. Extracting gate netlist of module `\strt_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

27.22.16.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.16.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.17. Extracting gate netlist of module `\sys_control' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.18. Extracting gate netlist of module `\sys_control_rx' to `<abc-temp-dir>/input.blif'..
Extracted 158 gates and 178 wires to a netlist network with 19 inputs and 27 outputs.

27.22.18.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.18.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               MUX cells:        2
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              NAND cells:        7
ABC RESULTS:                OR cells:       35
ABC RESULTS:               NOR cells:       10
ABC RESULTS:               AND cells:        4
ABC RESULTS:            ANDNOT cells:       58
ABC RESULTS:        internal signals:      132
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       27
Removing temp directory.

27.22.19. Extracting gate netlist of module `\sys_control_tx' to `<abc-temp-dir>/input.blif'..
Extracted 88 gates and 119 wires to a netlist network with 30 inputs and 13 outputs.

27.22.19.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.19.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              NAND cells:        2
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:               NOR cells:        3
ABC RESULTS:            ANDNOT cells:       51
ABC RESULTS:        internal signals:       76
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       13
Removing temp directory.

27.22.20. Extracting gate netlist of module `\system_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.21. Extracting gate netlist of module `\uart_rx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.22. Extracting gate netlist of module `\uart_rx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 163 gates and 186 wires to a netlist network with 22 inputs and 8 outputs.

27.22.22.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.22.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        3
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:               NOT cells:        9
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               NOR cells:        6
ABC RESULTS:               AND cells:        4
ABC RESULTS:               XOR cells:       20
ABC RESULTS:                OR cells:       31
ABC RESULTS:            ANDNOT cells:       43
ABC RESULTS:        internal signals:      156
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        8
Removing temp directory.

27.22.23. Extracting gate netlist of module `\uart_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.24. Extracting gate netlist of module `\uart_tx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.25. Extracting gate netlist of module `\uart_tx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 58 wires to a netlist network with 6 inputs and 8 outputs.

27.22.25.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.25.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               NOR cells:        3
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:            ANDNOT cells:       20
ABC RESULTS:        internal signals:       44
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        8
Removing temp directory.

27.23. Executing OPT pass (performing simple optimizations).

27.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~1 debug messages>
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~54 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~3 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~3 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 20 cells.

27.23.3. Executing OPT_DFF pass (perform DFF optimizations).

27.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1781 unused wires.
<suppressed ~18 debug messages>

27.23.5. Finished fast OPT passes.

27.24. Executing HIERARCHY pass (managing design hierarchy).

27.24.1. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \alu
Used module:     \bit_synchronizer
Used module:     \clk_divider
Used module:     \clk_gate
Used module:     \data_synchronizer
Used module:     \reg_file
Used module:     \reset_synchronizer
Used module:     \sys_control
Used module:         \sys_control_rx
Used module:         \sys_control_tx
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \data_sampling
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \parity_check
Used module:             \stp_check
Used module:             \strt_check
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \parity_calc
Used module:             \serializer
Used module:             \uart_tx_fsm

27.24.2. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \alu
Used module:     \bit_synchronizer
Used module:     \clk_divider
Used module:     \clk_gate
Used module:     \data_synchronizer
Used module:     \reg_file
Used module:     \reset_synchronizer
Used module:     \sys_control
Used module:         \sys_control_rx
Used module:         \sys_control_tx
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \data_sampling
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \parity_check
Used module:             \stp_check
Used module:             \strt_check
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \parity_calc
Used module:             \serializer
Used module:             \uart_tx_fsm
Removed 0 unused modules.

27.25. Printing statistics.

=== alu ===

   Number of wires:               2242
   Number of wire bits:           2289
   Number of public wires:          10
   Number of public wire bits:      57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2265
     $_ANDNOT_                     818
     $_AND_                        110
     $_DFF_PN0_                     17
     $_MUX_                        183
     $_NAND_                        47
     $_NOR_                        169
     $_NOT_                        109
     $_ORNOT_                       84
     $_OR_                         327
     $_XNOR_                       101
     $_XOR_                        300

=== bit_synchronizer ===

   Number of wires:                  5
   Number of wire bits:              6
   Number of public wires:           5
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_PN0_                      3

=== clk_divider ===

   Number of wires:                 54
   Number of wire bits:             66
   Number of public wires:           6
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 58
     $_ANDNOT_                      21
     $_AND_                          2
     $_DFF_PN0_                      5
     $_NAND_                         3
     $_NOT_                          1
     $_ORNOT_                        3
     $_OR_                          10
     $_XNOR_                         6
     $_XOR_                          7

=== clk_gate ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_AND_                          1
     $_DLATCH_N_                     1

=== data_sampling ===

   Number of wires:                 63
   Number of wire bits:             73
   Number of public wires:           8
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 59
     $_ANDNOT_                      10
     $_AND_                          2
     $_DFFE_PN0P_                    3
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                          5
     $_ORNOT_                        1
     $_OR_                          16
     $_XNOR_                         2
     $_XOR_                         16

=== data_synchronizer ===

   Number of wires:                  8
   Number of wire bits:             24
   Number of public wires:           8
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $_ANDNOT_                       1
     $_DFFE_PN0P_                    8
     $_DFF_PN0_                      4

=== deserializer ===

   Number of wires:                  7
   Number of wire bits:             21
   Number of public wires:           7
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_AND_                          8
     $_DFFE_PN0P_                    8

=== edge_bit_counter ===

   Number of wires:                 56
   Number of wire bits:             74
   Number of public wires:           7
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 65
     $_ANDNOT_                      17
     $_AND_                          2
     $_DFFE_PN0P_                    9
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          4
     $_ORNOT_                        1
     $_OR_                          11
     $_XNOR_                         4
     $_XOR_                         12

=== mux ===

   Number of wires:                 10
   Number of wire bits:             11
   Number of public wires:           4
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $_ANDNOT_                       2
     $_NAND_                         1
     $_NOR_                          1
     $_ORNOT_                        1
     $_OR_                           2

=== parity_calc ===

   Number of wires:                 17
   Number of wire bits:             24
   Number of public wires:           6
   Number of public wire bits:      13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $_ANDNOT_                       1
     $_AND_                          1
     $_DFFE_PN0P_                    1
     $_OR_                           1
     $_XNOR_                         3
     $_XOR_                          5

=== parity_check ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_ANDNOT_                       1
     $_DFF_PN0_                      1
     $_XNOR_                         1

=== reg_file ===

   Number of wires:                317
   Number of wire bits:            481
   Number of public wires:          28
   Number of public wire bits:     185
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                433
     $_ANDNOT_                     141
     $_AND_                          2
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                  133
     $_DFFE_PN1P_                    3
     $_MUX_                          8
     $_NAND_                         8
     $_ORNOT_                        4
     $_OR_                         133

=== reset_synchronizer ===

   Number of wires:                  4
   Number of wire bits:              6
   Number of public wires:           4
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_PN0_                      3

=== serializer ===

   Number of wires:                 18
   Number of wire bits:             43
   Number of public wires:          10
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 29
     $_ANDNOT_                       3
     $_AND_                          2
     $_DFFE_PN0P_                   11
     $_MUX_                          7
     $_NAND_                         1
     $_ORNOT_                        2
     $_OR_                           1
     $_XNOR_                         1
     $_XOR_                          1

=== stp_check ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_ANDNOT_                       1

=== strt_check ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_AND_                          1

=== sys_control ===

   Number of wires:                 23
   Number of wire bits:             94
   Number of public wires:          23
   Number of public wire bits:      94
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     sys_control_rx                  1
     sys_control_tx                  1

=== sys_control_rx ===

   Number of wires:                126
   Number of wire bits:            199
   Number of public wires:          26
   Number of public wire bits:      99
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                159
     $_ANDNOT_                      58
     $_AND_                          4
     $_DFFE_PN0P_                   28
     $_DFF_PN0_                      4
     $_MUX_                          2
     $_NAND_                         7
     $_NOR_                         10
     $_NOT_                          1
     $_ORNOT_                       10
     $_OR_                          35

=== sys_control_tx ===

   Number of wires:                 78
   Number of wire bits:            111
   Number of public wires:          11
   Number of public wire bits:      44
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                      51
     $_DFFE_PN0P_                    3
     $_MUX_                          2
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                       12
     $_OR_                           7

=== system_top ===

   Number of wires:                 35
   Number of wire bits:            126
   Number of public wires:          35
   Number of public wire bits:     126
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     alu                             1
     bit_synchronizer                1
     clk_divider                     1
     clk_gate                        1
     data_synchronizer               2
     reg_file                        1
     reset_synchronizer              2
     sys_control                     1
     uart_top                        1

=== uart_rx ===

   Number of wires:                 20
   Number of wire bits:             38
   Number of public wires:          20
   Number of public wire bits:      38
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     data_sampling                   1
     deserializer                    1
     edge_bit_counter                1
     parity_check                    1
     stp_check                       1
     strt_check                      1
     uart_rx_fsm                     1

=== uart_rx_fsm ===

   Number of wires:                137
   Number of wire bits:            152
   Number of public wires:          19
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                128
     $_ANDNOT_                      42
     $_AND_                          4
     $_DFFE_PN0P_                    3
     $_MUX_                          1
     $_NAND_                         3
     $_NOR_                          6
     $_NOT_                          9
     $_ORNOT_                        6
     $_OR_                          31
     $_XNOR_                         3
     $_XOR_                         20

=== uart_top ===

   Number of wires:                 13
   Number of wire bits:             31
   Number of public wires:          13
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     uart_rx                         1
     uart_tx                         1

=== uart_tx ===

   Number of wires:                 13
   Number of wire bits:             21
   Number of public wires:          13
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     mux                             1
     parity_calc                     1
     serializer                      1
     uart_tx_fsm                     1

=== uart_tx_fsm ===

   Number of wires:                 45
   Number of wire bits:             51
   Number of public wires:          10
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     $_ANDNOT_                      20
     $_DFFE_PN0P_                    1
     $_DFF_PN0_                      3
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                        6
     $_OR_                           7

=== design hierarchy ===

   system_top                        1
     alu                             1
     bit_synchronizer                1
     clk_divider                     1
     clk_gate                        1
     data_synchronizer               2
     reg_file                        1
     reset_synchronizer              2
     sys_control                     1
       sys_control_rx                1
       sys_control_tx                1
     uart_top                        1
       uart_rx                       1
         data_sampling               1
         deserializer                1
         edge_bit_counter            1
         parity_check                1
         stp_check                   1
         strt_check                  1
         uart_rx_fsm                 1
       uart_tx                       1
         mux                         1
         parity_calc                 1
         serializer                  1
         uart_tx_fsm                 1

   Number of wires:               3321
   Number of wire bits:           3989
   Number of public wires:         302
   Number of public wire bits:     941
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3399
     $_ANDNOT_                    1188
     $_AND_                        139
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                  216
     $_DFFE_PN1P_                    3
     $_DFF_PN0_                     47
     $_DLATCH_N_                     1
     $_MUX_                        203
     $_NAND_                        78
     $_NOR_                        197
     $_NOT_                        133
     $_ORNOT_                      130
     $_OR_                         581
     $_XNOR_                       121
     $_XOR_                        361

27.26. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

28. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

28.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alu':
  mapped 17 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\bit_synchronizer':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\clk_divider':
  mapped 5 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\clk_gate':
Mapping DFF cells in module `\data_sampling':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\data_synchronizer':
  mapped 12 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\deserializer':
  mapped 8 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\edge_bit_counter':
  mapped 9 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\mux':
Mapping DFF cells in module `\parity_calc':
  mapped 1 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\parity_check':
  mapped 1 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\reg_file':
  mapped 137 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\reset_synchronizer':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\serializer':
  mapped 11 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\stp_check':
Mapping DFF cells in module `\strt_check':
Mapping DFF cells in module `\sys_control':
Mapping DFF cells in module `\sys_control_rx':
  mapped 32 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\sys_control_tx':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\system_top':
Mapping DFF cells in module `\uart_rx':
Mapping DFF cells in module `\uart_rx_fsm':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\uart_top':
Mapping DFF cells in module `\uart_tx':
Mapping DFF cells in module `\uart_tx_fsm':
  mapped 4 $_DFFSR_PNN_ cells to \DFFSR cells.

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

29.6. Executing OPT_DFF pass (perform DFF optimizations).

29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

29.9. Finished OPT passes. (There is nothing left to do.)

30. Executing ABC pass (technology mapping using ABC).

30.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 2248 gates and 2269 wires to a netlist network with 21 inputs and 16 outputs.

30.1.1. Executing ABC.

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)


-- Executing script file `synth/synth.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/system_top.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/system_top.v' to AST representation.
Generating RTLIL representation for module `\system_top'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\bit_synchronizer'.
Warning: Replacing memory \reg_file with list of registers. See /home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:17
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\reset_synchronizer'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\data_synchronizer'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v' to AST representation.
Generating RTLIL representation for module `\clk_gate'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v' to AST representation.
Generating RTLIL representation for module `\clk_divider'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_top.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_top.v' to AST representation.
Generating RTLIL representation for module `\uart_top'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v' to AST representation.
Generating RTLIL representation for module `\reg_file'.
Warning: Replacing memory \mem with list of registers. See /home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:33
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control.v' to AST representation.
Generating RTLIL representation for module `\sys_control'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v' to AST representation.
Generating RTLIL representation for module `\sys_control_tx'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v' to AST representation.
Generating RTLIL representation for module `\sys_control_rx'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx.v' to AST representation.
Generating RTLIL representation for module `\uart_rx'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx.v' to AST representation.
Generating RTLIL representation for module `\uart_tx'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v' to AST representation.
Generating RTLIL representation for module `\mux'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v' to AST representation.
Generating RTLIL representation for module `\serializer'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v' to AST representation.
Generating RTLIL representation for module `\parity_calc'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v' to AST representation.
Generating RTLIL representation for module `\uart_tx_fsm'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v' to AST representation.
Generating RTLIL representation for module `\stp_check'.
Successfully finished Verilog frontend.

21. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v' to AST representation.
Generating RTLIL representation for module `\strt_check'.
Successfully finished Verilog frontend.

22. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v' to AST representation.
Generating RTLIL representation for module `\parity_check'.
Successfully finished Verilog frontend.

23. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v' to AST representation.
Generating RTLIL representation for module `\deserializer'.
Successfully finished Verilog frontend.

24. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v' to AST representation.
Generating RTLIL representation for module `\edge_bit_counter'.
Successfully finished Verilog frontend.

25. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v' to AST representation.
Generating RTLIL representation for module `\data_sampling'.
Successfully finished Verilog frontend.

26. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v' to AST representation.
Generating RTLIL representation for module `\uart_rx_fsm'.
Successfully finished Verilog frontend.

27. Executing SYNTH pass.

27.1. Executing HIERARCHY pass (managing design hierarchy).

27.1.1. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \bit_synchronizer
Used module:     \reset_synchronizer
Used module:     \data_synchronizer
Used module:     \clk_gate
Used module:     \clk_divider
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \stp_check
Used module:             \strt_check
Used module:             \parity_check
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \data_sampling
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \serializer
Used module:             \parity_calc
Used module:             \uart_tx_fsm
Used module:     \alu
Used module:     \reg_file
Used module:     \sys_control
Used module:         \sys_control_tx
Used module:         \sys_control_rx

27.1.2. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \bit_synchronizer
Used module:     \reset_synchronizer
Used module:     \data_synchronizer
Used module:     \clk_gate
Used module:     \clk_divider
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \stp_check
Used module:             \strt_check
Used module:             \parity_check
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \data_sampling
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \serializer
Used module:             \parity_calc
Used module:             \uart_tx_fsm
Used module:     \alu
Used module:     \reg_file
Used module:     \sys_control
Used module:         \sys_control_tx
Used module:         \sys_control_rx
Removed 0 unused modules.
Warning: Resizing cell port system_top.reg_file_inst.addr_in from 8 bits to 4 bits.
Warning: Resizing cell port system_top.sys_control_inst.rf_addr_out from 8 bits to 4 bits.

27.2. Executing PROC pass (convert processes to netlists).

27.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 31 empty switches in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Cleaned up 31 empty switches.

27.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 6 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183 in module uart_rx_fsm.
Marked 8 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162 in module uart_rx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160 in module uart_rx_fsm.
Marked 3 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146 in module data_sampling.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140 in module edge_bit_counter.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136 in module deserializer.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130 in module parity_check.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128 in module parity_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126 in module strt_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125 in module stp_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117 in module uart_tx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116 in module uart_tx_fsm.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113 in module uart_tx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111 in module uart_tx_fsm.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102 in module parity_calc.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98 in module serializer.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93 in module serializer.
Removed 1 dead cases from process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92 in module mux.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92 in module mux.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86 in module sys_control_rx.
Marked 9 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85 in module sys_control_rx.
Marked 11 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81 in module sys_control_tx.
Marked 7 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79 in module sys_control_tx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77 in module sys_control_tx.
Removed 1 dead cases from process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56 in module reg_file.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56 in module reg_file.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34 in module alu.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32 in module alu.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21 in module clk_divider.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18 in module clk_gate.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8 in module reset_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4 in module bit_synchronizer.
Removed a total of 2 dead cases.

27.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 12 redundant assignments.
Promoted 41 assignments to connections.

27.2.4. Executing PROC_INIT pass (extract init attributes).

27.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
Found async reset \reset_n in `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Found async reset \reset_n in `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Found async reset \reset_n in `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Found async reset \reset_n in `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
Found async reset \reset_n in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Found async reset \reset_n in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
Found async reset \reset_n in `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Found async reset \reset_n in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Found async reset \reset_n in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
Found async reset \reset_n in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
Found async reset \reset_n in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Found async reset \reset_n in `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
Found async reset \reset_n in `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
Found async reset \reset_n in `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
Found async reset \reset_n in `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.

27.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~91 debug messages>

27.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
     1/10: $3\data_valid_out[0:0]
     2/10: $2\data_valid_out[0:0]
     3/10: $3\deser_en_out[0:0]
     4/10: $2\deser_en_out[0:0]
     5/10: $2\strt_chk_en_out[0:0]
     6/10: $1\strt_chk_en_out[0:0]
     7/10: $1\counter_en_out[0:0]
     8/10: $1\data_sample_en_out[0:0]
     9/10: $1\deser_en_out[0:0]
    10/10: $1\data_valid_out[0:0]
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
     1/8: $8\next_state[2:0]
     2/8: $7\next_state[2:0]
     3/8: $6\next_state[2:0]
     4/8: $5\next_state[2:0]
     5/8: $4\next_state[2:0]
     6/8: $3\next_state[2:0]
     7/8: $2\next_state[2:0]
     8/8: $1\next_state[2:0]
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
     1/3: $0\register[2:0] [2]
     2/3: $0\register[2:0] [1]
     3/3: $0\register[2:0] [0]
Creating decoders for process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
     1/2: $0\edge_cnt_out[4:0]
     2/2: $0\bit_cnt_out[3:0]
Creating decoders for process `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
     1/1: $0\register[7:0]
Creating decoders for process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
     1/5: $5\par_err_out[0:0]
     2/5: $4\par_err_out[0:0]
     3/5: $3\par_err_out[0:0]
     4/5: $2\par_err_out[0:0]
     5/5: $1\par_err_out[0:0]
Creating decoders for process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
     1/1: $0\register[8:0]
Creating decoders for process `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
     1/2: $2\strt_err_out[0:0]
     2/2: $1\strt_err_out[0:0]
Creating decoders for process `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
     1/2: $2\stp_err_out[0:0]
     2/2: $1\stp_err_out[0:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
     1/1: $0\busy_out[0:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
     1/1: $1\mux_sel_out[1:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
     1/5: $5\next_state[2:0]
     2/5: $4\next_state[2:0]
     3/5: $3\next_state[2:0]
     4/5: $2\next_state[2:0]
     5/5: $1\next_state[2:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
     1/1: $0\par_bit_out[0:0]
Creating decoders for process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
     1/1: $0\counter[2:0]
Creating decoders for process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
     1/1: $0\int_reg[7:0]
Creating decoders for process `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
     1/1: $1\tx_out[0:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
     1/1: $0\uart_alu_send_data_out[15:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
     1/1: $0\uart_rf_send_data_out[7:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
     1/1: $0\rf_addr_reg[7:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
     1/30: $2\alu_data_store[0:0]
     2/30: $2\uart_alu_send_out[0:0]
     3/30: $2\alu_fun_out[3:0]
     4/30: $2\alu_en_out[0:0]
     5/30: $4\rf_addr_out[3:0]
     6/30: $4\rf_wr_data_out[7:0]
     7/30: $4\rf_wr_en_out[0:0]
     8/30: $3\rf_addr_out[3:0]
     9/30: $3\rf_wr_data_out[7:0]
    10/30: $3\rf_wr_en_out[0:0]
    11/30: $2\rf_rd_store[0:0]
    12/30: $2\uart_rf_send_out[0:0]
    13/30: $3\rf_addr_en[0:0]
    14/30: $2\rf_wr_data_out[7:0]
    15/30: $2\rf_addr_out[3:0]
    16/30: $2\rf_wr_en_out[0:0]
    17/30: $2\rf_addr_en[0:0]
    18/30: $1\alu_data_store[0:0]
    19/30: $1\rf_rd_store[0:0]
    20/30: $1\rf_addr_en[0:0]
    21/30: $1\uart_alu_send_out[0:0]
    22/30: $1\uart_rf_send_out[0:0]
    23/30: $1\clk_div_en_out[0:0]
    24/30: $1\clk_gate_en_out[0:0]
    25/30: $1\alu_fun_out[3:0]
    26/30: $1\alu_en_out[0:0]
    27/30: $1\rf_wr_data_out[7:0]
    28/30: $1\rf_addr_out[3:0]
    29/30: $1\rf_rd_en_out[0:0]
    30/30: $1\rf_wr_en_out[0:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
     1/11: $11\next_state[3:0]
     2/11: $10\next_state[3:0]
     3/11: $9\next_state[3:0]
     4/11: $8\next_state[3:0]
     5/11: $7\next_state[3:0]
     6/11: $6\next_state[3:0]
     7/11: $5\next_state[3:0]
     8/11: $4\next_state[3:0]
     9/11: $3\next_state[3:0]
    10/11: $2\next_state[3:0]
    11/11: $1\next_state[3:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
     1/1: $0\current_state[3:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
     1/2: $1\uart_tx_data_out[7:0]
     2/2: $1\uart_tx_data_valid_out[0:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
     1/7: $7\next_state[2:0]
     2/7: $6\next_state[2:0]
     3/7: $5\next_state[2:0]
     4/7: $4\next_state[2:0]
     5/7: $3\next_state[2:0]
     6/7: $2\next_state[2:0]
     7/7: $1\next_state[2:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
     1/30: $4$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$76
     2/30: $3$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$75
     3/30: $3$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$74
     4/30: $2$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR[3:0]$68
     5/30: $2$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA[7:0]$69
     6/30: $2$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$71
     7/30: $2$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$70
     8/30: $1$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$65
     9/30: $1$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$64
    10/30: $1$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA[7:0]$63
    11/30: $1$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR[3:0]$62
    12/30: $1\i[31:0]
    13/30: $0\mem[15][7:0]
    14/30: $0\mem[14][7:0]
    15/30: $0\mem[13][7:0]
    16/30: $0\mem[12][7:0]
    17/30: $0\mem[11][7:0]
    18/30: $0\mem[10][7:0]
    19/30: $0\mem[9][7:0]
    20/30: $0\mem[8][7:0]
    21/30: $0\mem[7][7:0]
    22/30: $0\mem[6][7:0]
    23/30: $0\mem[5][7:0]
    24/30: $0\mem[4][7:0]
    25/30: $0\mem[3][7:0]
    26/30: $0\mem[2][7:0]
    27/30: $0\mem[1][7:0]
    28/30: $0\mem[0][7:0]
    29/30: $0\rd_data_valid_out[0:0]
    30/30: $0\rd_data_out[7:0]
Creating decoders for process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
     1/6: $5\alu_out_comp[15:0]
     2/6: $4\alu_out_comp[15:0]
     3/6: $3\alu_out_comp[15:0]
     4/6: $2\alu_out_comp[15:0]
     5/6: $1\alu_out_comp[15:0]
     6/6: $1\alu_out_comp_valid[0:0]
Creating decoders for process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
     1/2: $0\data_valid_out[0:0]
     2/2: $0\data_out[15:0]
Creating decoders for process `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
     1/1: $0\count[4:0]
Creating decoders for process `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
     1/1: $1\latch_out[0:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
     1/1: $0\sync_data_out[7:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
     1/1: $0\enable_pulse_out[0:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
     1/1: $0\ff[2:0]
Creating decoders for process `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
     1/1: $0\ff[2:0]
Creating decoders for process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
     1/4: $1\i[31:0]
     2/4: $0\reg_file[0][1:0]
     3/4: $0\sync_data_out[0:0]
     4/4: $1$splitcmplxassign$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:24$3[2:0]$7

27.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\uart_rx_fsm.\data_valid_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\data_sample_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\deser_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\stp_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\strt_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\par_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\counter_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\next_state' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
No latch inferred for signal `\parity_check.\par_err_out' from process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
No latch inferred for signal `\strt_check.\strt_err_out' from process `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
No latch inferred for signal `\stp_check.\stp_err_out' from process `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
No latch inferred for signal `\uart_tx_fsm.\mux_sel_out' from process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
No latch inferred for signal `\uart_tx_fsm.\next_state' from process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
No latch inferred for signal `\mux.\tx_out' from process `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
No latch inferred for signal `\sys_control_rx.\rf_wr_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_rd_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_addr_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_wr_data_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_fun_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\clk_gate_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\clk_div_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\uart_rf_send_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\uart_alu_send_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_addr_en' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_rd_store' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_data_store' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\next_state' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
No latch inferred for signal `\sys_control_tx.\uart_tx_data_valid_out' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
No latch inferred for signal `\sys_control_tx.\uart_tx_data_out' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
No latch inferred for signal `\sys_control_tx.\next_state' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
No latch inferred for signal `\alu.\alu_out_comp' from process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
No latch inferred for signal `\alu.\alu_out_comp_valid' from process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Latch inferred for signal `\clk_gate.\latch_out' from process `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18': $auto$proc_dlatch.cc:427:proc_dlatch$1270

27.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\uart_rx_fsm.\current_state' using process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
  created $adff cell `$procdff$1271' with positive edge clock and negative level reset.
Creating register for signal `\data_sampling.\register' using process `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
  created $adff cell `$procdff$1272' with positive edge clock and negative level reset.
Creating register for signal `\edge_bit_counter.\bit_cnt_out' using process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
  created $adff cell `$procdff$1273' with positive edge clock and negative level reset.
Creating register for signal `\edge_bit_counter.\edge_cnt_out' using process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
  created $adff cell `$procdff$1274' with positive edge clock and negative level reset.
Creating register for signal `\deserializer.\register' using process `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
  created $adff cell `$procdff$1275' with positive edge clock and negative level reset.
Creating register for signal `\parity_check.\register' using process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
  created $adff cell `$procdff$1276' with positive edge clock and negative level reset.
Creating register for signal `\uart_tx_fsm.\busy_out' using process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
  created $adff cell `$procdff$1277' with positive edge clock and negative level reset.
Creating register for signal `\uart_tx_fsm.\current_state' using process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
  created $adff cell `$procdff$1278' with positive edge clock and negative level reset.
Creating register for signal `\parity_calc.\par_bit_out' using process `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
  created $adff cell `$procdff$1279' with positive edge clock and negative level reset.
Creating register for signal `\serializer.\counter' using process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
  created $adff cell `$procdff$1280' with positive edge clock and negative level reset.
Creating register for signal `\serializer.\int_reg' using process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
  created $adff cell `$procdff$1281' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\uart_alu_send_data_out' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
  created $adff cell `$procdff$1282' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\uart_rf_send_data_out' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
  created $adff cell `$procdff$1283' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\rf_addr_reg' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
  created $adff cell `$procdff$1284' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\current_state' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
  created $adff cell `$procdff$1285' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_tx.\current_state' using process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
  created $adff cell `$procdff$1286' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\rd_data_out' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1287' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\rd_data_valid_out' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1288' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\i' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1289' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[0]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1290' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[1]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1291' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[2]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1292' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[3]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1293' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[4]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1294' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[5]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1295' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[6]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1296' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[7]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1297' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[8]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1298' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[9]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1299' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[10]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1300' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[11]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1301' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[12]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1302' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[13]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1303' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[14]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1304' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[15]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1305' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1306' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1307' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1308' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1309' with positive edge clock and negative level reset.
Creating register for signal `\alu.\data_out' using process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
  created $adff cell `$procdff$1310' with positive edge clock and negative level reset.
Creating register for signal `\alu.\data_valid_out' using process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
  created $adff cell `$procdff$1311' with positive edge clock and negative level reset.
Creating register for signal `\clk_divider.\count' using process `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
  created $adff cell `$procdff$1312' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\sync_data_out' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
  created $adff cell `$procdff$1313' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\enable_pulse_out' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
  created $adff cell `$procdff$1314' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\ff' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
  created $adff cell `$procdff$1315' with positive edge clock and negative level reset.
Creating register for signal `\reset_synchronizer.\ff' using process `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
  created $adff cell `$procdff$1316' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\sync_data_out' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1317' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\i' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1318' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.$splitcmplxassign$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:24$3' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1319' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\reg_file[0]' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1320' with positive edge clock and negative level reset.

27.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

27.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
Found and cleaned up 8 empty switches in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
Found and cleaned up 4 empty switches in `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Removing empty process `data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Found and cleaned up 3 empty switches in `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Removing empty process `edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Found and cleaned up 1 empty switch in `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Removing empty process `deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Found and cleaned up 5 empty switches in `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
Removing empty process `parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
Removing empty process `parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
Found and cleaned up 2 empty switches in `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
Removing empty process `strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
Found and cleaned up 2 empty switches in `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
Removing empty process `stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
Found and cleaned up 2 empty switches in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Found and cleaned up 1 empty switch in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
Found and cleaned up 5 empty switches in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
Found and cleaned up 2 empty switches in `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Removing empty process `parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Found and cleaned up 2 empty switches in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Removing empty process `serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Found and cleaned up 2 empty switches in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Removing empty process `serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Found and cleaned up 1 empty switch in `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
Removing empty process `mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Found and cleaned up 9 empty switches in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
Found and cleaned up 11 empty switches in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
Found and cleaned up 1 empty switch in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
Found and cleaned up 7 empty switches in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
Found and cleaned up 4 empty switches in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Removing empty process `reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Found and cleaned up 5 empty switches in `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Removing empty process `alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Removing empty process `alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
Found and cleaned up 3 empty switches in `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Removing empty process `clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Found and cleaned up 1 empty switch in `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
Removing empty process `clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
Found and cleaned up 1 empty switch in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
Removing empty process `reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
Removing empty process `bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
Cleaned up 91 empty switches.

27.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_rx_fsm.
<suppressed ~6 debug messages>
Optimizing module data_sampling.
Optimizing module edge_bit_counter.
Optimizing module deserializer.
Optimizing module parity_check.
<suppressed ~4 debug messages>
Optimizing module strt_check.
<suppressed ~1 debug messages>
Optimizing module stp_check.
Optimizing module uart_tx_fsm.
<suppressed ~6 debug messages>
Optimizing module parity_calc.
<suppressed ~2 debug messages>
Optimizing module serializer.
<suppressed ~1 debug messages>
Optimizing module mux.
<suppressed ~1 debug messages>
Optimizing module uart_tx.
Optimizing module uart_rx.
Optimizing module sys_control_rx.
<suppressed ~3 debug messages>
Optimizing module sys_control_tx.
<suppressed ~4 debug messages>
Optimizing module sys_control.
Optimizing module reg_file.
<suppressed ~2 debug messages>
Optimizing module alu.
<suppressed ~3 debug messages>
Optimizing module uart_top.
Optimizing module clk_divider.
<suppressed ~3 debug messages>
Optimizing module clk_gate.
<suppressed ~7 debug messages>
Optimizing module data_synchronizer.
Optimizing module reset_synchronizer.
Optimizing module bit_synchronizer.
Optimizing module system_top.

27.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_rx_fsm.
<suppressed ~4 debug messages>
Optimizing module data_sampling.
<suppressed ~6 debug messages>
Optimizing module edge_bit_counter.
Optimizing module deserializer.
Optimizing module parity_check.
Optimizing module strt_check.
Optimizing module stp_check.
Optimizing module uart_tx_fsm.
Optimizing module parity_calc.
Optimizing module serializer.
Optimizing module mux.
Optimizing module uart_tx.
Optimizing module uart_rx.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module sys_control.
Optimizing module reg_file.
Optimizing module alu.
Optimizing module uart_top.
Optimizing module clk_divider.
<suppressed ~2 debug messages>
Optimizing module clk_gate.
Optimizing module data_synchronizer.
Optimizing module reset_synchronizer.
Optimizing module bit_synchronizer.
Optimizing module system_top.

27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \uart_tx_fsm..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \system_top..
Removed 46 unused cells and 427 unused wires.
<suppressed ~69 debug messages>

27.5. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

27.6. Executing OPT pass (performing simple optimizations).

27.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~18 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
<suppressed ~3 debug messages>
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~48 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~144 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~36 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~99 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~30 debug messages>
Removed a total of 126 cells.

27.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1193.
    dead port 2/2 on $mux $procmux$1195.
    dead port 2/2 on $mux $procmux$1205.
    dead port 2/2 on $mux $procmux$1207.
    dead port 2/2 on $mux $procmux$1218.
    dead port 2/2 on $mux $procmux$1220.
    dead port 2/2 on $mux $procmux$1240.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1250.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$376.
    dead port 2/2 on $mux $procmux$379.
    dead port 2/2 on $mux $procmux$381.
    dead port 2/2 on $mux $procmux$385.
    dead port 2/2 on $mux $procmux$388.
    dead port 2/2 on $mux $procmux$390.
    dead port 1/2 on $mux $procmux$397.
    dead port 2/2 on $mux $procmux$399.
    dead port 2/2 on $mux $procmux$405.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$945.
    dead port 1/2 on $mux $procmux$948.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$423.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$414.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$654.
    dead port 2/2 on $mux $procmux$516.
    dead port 2/2 on $mux $procmux$522.
    dead port 2/2 on $mux $procmux$529.
    dead port 2/2 on $mux $procmux$536.
    dead port 2/2 on $mux $procmux$543.
    dead port 2/2 on $mux $procmux$551.
    dead port 2/2 on $mux $procmux$559.
    dead port 2/2 on $mux $procmux$567.
    dead port 2/2 on $mux $procmux$740.
    dead port 2/2 on $mux $procmux$576.
    dead port 2/2 on $mux $procmux$747.
    dead port 2/2 on $mux $procmux$755.
    dead port 2/2 on $mux $procmux$764.
    dead port 2/2 on $mux $procmux$586.
    dead port 2/2 on $mux $procmux$774.
    dead port 2/2 on $mux $procmux$785.
    dead port 2/2 on $mux $procmux$797.
    dead port 2/2 on $mux $procmux$596.
    dead port 2/2 on $mux $procmux$810.
    dead port 2/2 on $mux $procmux$828.
    dead port 2/2 on $mux $procmux$830.
    dead port 2/2 on $mux $procmux$844.
    dead port 2/2 on $mux $procmux$607.
    dead port 2/2 on $mux $procmux$618.
    dead port 2/2 on $mux $procmux$629.
    dead port 2/2 on $mux $procmux$641.
    dead port 2/2 on $mux $procmux$510.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$878.
    dead port 2/2 on $mux $procmux$886.
    dead port 2/2 on $mux $procmux$895.
    dead port 1/2 on $mux $procmux$906.
    dead port 2/2 on $mux $procmux$908.
    dead port 2/2 on $mux $procmux$918.
    dead port 2/2 on $mux $procmux$871.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$212.
    dead port 2/2 on $mux $procmux$219.
    dead port 2/2 on $mux $procmux$227.
    dead port 2/2 on $mux $procmux$236.
    dead port 2/2 on $mux $procmux$204.
    dead port 2/2 on $mux $procmux$206.
    dead port 1/2 on $mux $procmux$269.
    dead port 2/2 on $mux $procmux$271.
    dead port 2/2 on $mux $procmux$277.
    dead port 2/2 on $mux $procmux$284.
    dead port 2/2 on $mux $procmux$292.
    dead port 1/2 on $mux $procmux$302.
    dead port 2/2 on $mux $procmux$304.
    dead port 2/2 on $mux $procmux$313.
    dead port 2/2 on $mux $procmux$323.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$442.
    dead port 2/2 on $mux $procmux$451.
    dead port 2/2 on $mux $procmux$453.
    dead port 2/2 on $mux $procmux$461.
    dead port 2/2 on $mux $procmux$471.
Removed 76 multiplexer ports.
<suppressed ~65 debug messages>

27.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    New ctrl vector for $pmux cell $procmux$696: $auto$opt_reduce.cc:134:opt_pmux$1322
    New ctrl vector for $pmux cell $procmux$710: $auto$opt_reduce.cc:134:opt_pmux$1324
    New ctrl vector for $pmux cell $procmux$717: { $auto$opt_reduce.cc:134:opt_pmux$1326 $procmux$537_CMP }
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    New ctrl vector for $pmux cell $procmux$863: $auto$opt_reduce.cc:134:opt_pmux$1328
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
    New ctrl vector for $pmux cell $procmux$251: $auto$opt_reduce.cc:134:opt_pmux$1330
    New ctrl vector for $pmux cell $procmux$245: $auto$opt_reduce.cc:134:opt_pmux$1332
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 6 changes.

27.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~27 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~6 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~3 debug messages>
Removed a total of 13 cells.

27.6.6. Executing OPT_DFF pass (perform DFF optimizations).

27.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 212 unused wires.
<suppressed ~11 debug messages>

27.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.9. Rerunning OPT passes. (Maybe there is more to do..)

27.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    New ctrl vector for $pmux cell $procmux$672: $auto$opt_reduce.cc:134:opt_pmux$1334
    New ctrl vector for $pmux cell $procmux$732: $auto$opt_reduce.cc:134:opt_pmux$1336
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    New ctrl vector for $pmux cell $procmux$921: { $procmux$909_CMP $procmux$860_CMP $procmux$879_CMP $auto$opt_reduce.cc:134:opt_pmux$1338 }
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
    New ctrl vector for $pmux cell $procmux$474: { $procmux$437_CMP \ser_en_out $procmux$435_CMP $auto$opt_reduce.cc:134:opt_pmux$1340 }
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 4 changes.

27.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.6.13. Executing OPT_DFF pass (perform DFF optimizations).

27.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.16. Rerunning OPT passes. (Maybe there is more to do..)

27.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.6.20. Executing OPT_DFF pass (perform DFF optimizations).

27.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.23. Finished OPT passes. (There is nothing left to do.)

27.7. Executing FSM pass (extract and optimize FSM).

27.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking sys_control_rx.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking sys_control_tx.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking uart_rx_fsm.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking uart_tx_fsm.current_state as FSM state register:
    Circuit seems to be self-resetting.

27.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

27.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

27.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

27.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

27.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

27.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27.8. Executing OPT pass (performing simple optimizations).

27.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [2]).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [1]).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [0]).
Adding EN signal on $procdff$1313 ($adff) from module data_synchronizer (D = \unsync_data_in, Q = \sync_data_out).
Adding EN signal on $procdff$1275 ($adff) from module deserializer (D = { \sampled_bit_in \register [7:1] }, Q = \register).
Adding EN signal on $procdff$1274 ($adff) from module edge_bit_counter (D = $0\edge_cnt_out[4:0], Q = \edge_cnt_out).
Adding EN signal on $procdff$1273 ($adff) from module edge_bit_counter (D = $0\bit_cnt_out[3:0], Q = \bit_cnt_out).
Adding EN signal on $procdff$1279 ($adff) from module parity_calc (D = $0\par_bit_out[0:0], Q = \par_bit_out).
Adding EN signal on $procdff$1276 ($adff) from module parity_check (D = \register [8:1], Q = \register [8:1]).
Handling D = Q on $auto$ff.cc:266:slice$1371 ($adffe) from module parity_check (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Adding EN signal on $procdff$1305 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[15]).
Adding EN signal on $procdff$1304 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[14]).
Adding EN signal on $procdff$1303 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[13]).
Adding EN signal on $procdff$1302 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[12]).
Adding EN signal on $procdff$1301 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[11]).
Adding EN signal on $procdff$1300 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[10]).
Adding EN signal on $procdff$1299 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[9]).
Adding EN signal on $procdff$1298 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[8]).
Adding EN signal on $procdff$1297 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[7]).
Adding EN signal on $procdff$1296 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[6]).
Adding EN signal on $procdff$1295 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[5]).
Adding EN signal on $procdff$1294 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[4]).
Adding EN signal on $procdff$1293 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[3]).
Adding EN signal on $procdff$1292 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[2]).
Adding EN signal on $procdff$1291 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[1]).
Adding EN signal on $procdff$1290 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[0]).
Adding EN signal on $procdff$1288 ($adff) from module reg_file (D = $procmux$1175_Y, Q = \rd_data_valid_out).
Adding EN signal on $procdff$1287 ($adff) from module reg_file (D = $4$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$76, Q = \rd_data_out).
Adding EN signal on $procdff$1281 ($adff) from module serializer (D = $0\int_reg[7:0], Q = \int_reg).
Adding EN signal on $procdff$1280 ($adff) from module serializer (D = $0\counter[2:0], Q = \counter).
Adding EN signal on $procdff$1284 ($adff) from module sys_control_rx (D = \uart_rx_data_in, Q = \rf_addr_reg).
Adding EN signal on $procdff$1283 ($adff) from module sys_control_rx (D = \rf_rd_data_in, Q = \uart_rf_send_data_out).
Adding EN signal on $procdff$1282 ($adff) from module sys_control_rx (D = \alu_data_in, Q = \uart_alu_send_data_out).
Adding EN signal on $procdff$1286 ($adff) from module sys_control_tx (D = \next_state, Q = \current_state).
Adding EN signal on $procdff$1271 ($adff) from module uart_rx_fsm (D = \next_state, Q = \current_state).
Adding EN signal on $procdff$1277 ($adff) from module uart_tx_fsm (D = $0\busy_out[0:0], Q = \busy_out).

27.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 50 unused cells and 48 unused wires.
<suppressed ~56 debug messages>

27.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~2 debug messages>
Optimizing module mux.
Optimizing module parity_calc.
<suppressed ~1 debug messages>
Optimizing module parity_check.
<suppressed ~5 debug messages>
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~2 debug messages>
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~1 debug messages>

27.8.9. Rerunning OPT passes. (Maybe there is more to do..)

27.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
<suppressed ~3 debug messages>
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
<suppressed ~3 debug messages>
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 2 cells.

27.8.13. Executing OPT_DFF pass (perform DFF optimizations).

27.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 1 unused cells and 6 unused wires.
<suppressed ~4 debug messages>

27.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.16. Rerunning OPT passes. (Maybe there is more to do..)

27.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.20. Executing OPT_DFF pass (perform DFF optimizations).

27.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.23. Finished OPT passes. (There is nothing left to do.)

27.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 7 bits (of 16) from port Y of cell alu.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35 ($add).
Removed top 7 bits (of 16) from port Y of cell alu.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36 ($sub).
Removed top 8 bits (of 16) from port Y of cell alu.$and$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:55$39 ($and).
Removed top 8 bits (of 16) from port Y of cell alu.$or$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:58$40 ($or).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:61$42 ($not).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:64$44 ($not).
Removed top 8 bits (of 16) from port Y of cell alu.$xor$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:67$45 ($xor).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:70$47 ($not).
Removed top 14 bits (of 16) from mux cell alu.$procmux$1191 ($mux).
Removed top 14 bits (of 16) from mux cell alu.$procmux$1203 ($mux).
Removed top 15 bits (of 16) from mux cell alu.$procmux$1216 ($mux).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1232_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1233_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1234_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1235_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1236_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1237_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$1238_CMP0 ($eq).
Removed top 15 bits (of 16) from wire alu.$3\alu_out_comp[15:0].
Removed top 14 bits (of 16) from wire alu.$4\alu_out_comp[15:0].
Removed top 14 bits (of 16) from wire alu.$5\alu_out_comp[15:0].
Removed top 7 bits (of 16) from wire alu.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35_Y.
Removed top 8 bits (of 16) from wire alu.$and$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:55$39_Y.
Removed top 8 bits (of 16) from wire alu.$or$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:58$40_Y.
Removed top 8 bits (of 16) from wire alu.$xor$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:67$45_Y.
Removed top 31 bits (of 32) from port B of cell clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
Removed top 27 bits (of 32) from port Y of cell clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
Removed top 28 bits (of 32) from port B of cell clk_divider.$le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28 ($le).
Removed top 31 bits (of 32) from mux cell clk_divider.$ternary$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$31 ($mux).
Removed top 27 bits (of 32) from wire clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24_Y.
Removed top 28 bits (of 32) from port A of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 31 bits (of 32) from port B of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 27 bits (of 32) from port Y of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 1 bits (of 5) from port B of cell data_sampling.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:20$152 ($eq).
Removed top 28 bits (of 32) from port A of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 31 bits (of 32) from port B of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 27 bits (of 32) from port Y of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 27 bits (of 32) from port B of cell data_sampling.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$155 ($eq).
Removed top 27 bits (of 32) from wire data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154_Y.
Removed top 24 bits (of 32) from mux cell deserializer.$ternary$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:25$139 ($mux).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
Removed top 27 bits (of 32) from port Y of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
Removed top 26 bits (of 32) from port Y of cell edge_bit_counter.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
Removed top 28 bits (of 32) from port Y of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
Removed top 1 bits (of 3) from port B of cell edge_bit_counter.$auto$opt_dff.cc:195:make_patterns_logic$1365 ($ne).
Removed top 27 bits (of 32) from wire edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142_Y.
Removed top 28 bits (of 32) from wire edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145_Y.
Removed top 1 bits (of 2) from port B of cell mux.$procmux$498_CMP0 ($eq).
Removed top 8 bits (of 9) from wire parity_check.register.
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1052_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1066_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1081_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1097_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell reg_file.$procmux$1114_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell reg_file.$procmux$1132_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell reg_file.$procmux$1151_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
Removed top 29 bits (of 32) from port Y of cell serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
Removed top 29 bits (of 32) from wire serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100_Y.
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$560_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$587_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$608_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sys_control_rx.$procmux$619_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sys_control_rx.$procmux$655_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$745 ($mux).
Removed top 3 bits (of 4) from mux cell sys_control_rx.$procmux$753 ($mux).
Removed top 1 bits (of 4) from mux cell sys_control_rx.$procmux$772 ($mux).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$783 ($mux).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$795 ($mux).
Removed top 3 bits (of 4) from mux cell sys_control_rx.$procmux$808 ($mux).
Removed top 4 bits (of 8) from FF cell sys_control_rx.$auto$ff.cc:266:slice$1435 ($adffe).
Removed top 2 bits (of 4) from wire sys_control_rx.$10\next_state[3:0].
Removed top 3 bits (of 4) from wire sys_control_rx.$4\next_state[3:0].
Removed top 2 bits (of 4) from wire sys_control_rx.$5\next_state[3:0].
Removed top 2 bits (of 4) from wire sys_control_rx.$6\next_state[3:0].
Removed top 4 bits (of 8) from wire sys_control_rx.rf_addr_reg.
Removed top 1 bits (of 3) from port B of cell sys_control_tx.$procmux$860_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell sys_control_tx.$procmux$861_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell sys_control_tx.$procmux$879_CMP0 ($eq).
Removed top 4 bits (of 8) from wire system_top.rf_addr.
Removed top 3 bits (of 4) from port B of cell uart_rx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:48$164 ($eq).
Removed top 28 bits (of 32) from port A of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 30 bits (of 32) from port B of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 27 bits (of 32) from port Y of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 27 bits (of 32) from port B of cell uart_rx_fsm.$gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186 ($gt).
Removed top 28 bits (of 32) from port B of cell uart_rx_fsm.$lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189 ($lt).
Removed top 31 bits (of 32) from port B of cell uart_rx_fsm.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
Removed top 26 bits (of 32) from port Y of cell uart_rx_fsm.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
Removed top 28 bits (of 32) from port A of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 30 bits (of 32) from port B of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 27 bits (of 32) from port Y of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 27 bits (of 32) from port B of cell uart_rx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$195 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_rx_fsm.$procmux$220_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_rx_fsm.$procmux$228_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_rx_fsm.$procmux$237_CMP0 ($eq).
Removed top 27 bits (of 32) from wire uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194_Y.
Removed top 27 bits (of 32) from wire uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185_Y.
Removed top 1 bits (of 3) from port B of cell uart_tx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:69$115 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_tx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:84$120 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_tx_fsm.$procmux$435_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_tx_fsm.$procmux$437_CMP0 ($eq).
Removed top 2 bits (of 3) from mux cell uart_tx_fsm.$procmux$440 ($mux).
Removed top 2 bits (of 3) from wire uart_tx_fsm.$2\next_state[2:0].
Removed top 1 bits (of 3) from wire uart_tx_fsm.next_state.

27.10. Executing PEEPOPT pass (run peephole optimizers).

27.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 24 unused wires.
<suppressed ~11 debug messages>

27.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35 ($add).
  creating $macc model for $mul$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:49$37 ($mul).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35.
  creating $macc cell for $mul$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:49$37: $auto$alumacc.cc:365:replace_macc$1488
  creating $alu model for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49 ($gt): new $alu
  creating $alu model for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:85$50 ($lt): merged with $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49.
  creating $alu model for $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:73$48 ($eq): merged with $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49.
  creating $alu cell for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49, $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:85$50, $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:73$48: $auto$alumacc.cc:485:replace_alu$1490
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35: $auto$alumacc.cc:485:replace_alu$1501
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36: $auto$alumacc.cc:485:replace_alu$1504
  created 3 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module bit_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clk_divider:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24.
  creating $alu model for $le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28 ($le): new $alu
  creating $alu cell for $le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28: $auto$alumacc.cc:485:replace_alu$1508
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24: $auto$alumacc.cc:485:replace_alu$1521
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clk_gate:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_sampling:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154: $auto$alumacc.cc:485:replace_alu$1524
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149: $auto$alumacc.cc:485:replace_alu$1527
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module deserializer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module edge_bit_counter:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142: $auto$alumacc.cc:485:replace_alu$1530
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145: $auto$alumacc.cc:485:replace_alu$1533
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143: $auto$alumacc.cc:485:replace_alu$1536
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module parity_calc:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module parity_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reg_file:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reset_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module serializer:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100: $auto$alumacc.cc:485:replace_alu$1539
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module stp_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module strt_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control_rx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control_tx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module system_top:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_rx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_rx_fsm:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194.
  creating $alu model for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186 ($gt): new $alu
  creating $alu model for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189 ($lt): new $alu
  creating $alu model for $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:60$174 ($eq): merged with $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189.
  creating $alu cell for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189, $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:60$174: $auto$alumacc.cc:485:replace_alu$1544
  creating $alu cell for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186: $auto$alumacc.cc:485:replace_alu$1551
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194: $auto$alumacc.cc:485:replace_alu$1556
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185: $auto$alumacc.cc:485:replace_alu$1559
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191: $auto$alumacc.cc:485:replace_alu$1562
  created 5 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_top:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_tx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_tx_fsm:
  created 0 $alu and 0 $macc cells.

27.13. Executing SHARE pass (SAT-based resource sharing).

27.14. Executing OPT pass (performing simple optimizations).

27.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~1 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~9 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 3 cells.

27.14.6. Executing OPT_DFF pass (perform DFF optimizations).

27.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 2 unused cells and 12 unused wires.
<suppressed ~6 debug messages>

27.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.9. Rerunning OPT passes. (Maybe there is more to do..)

27.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.14.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.16. Finished OPT passes. (There is nothing left to do.)

27.15. Executing MEMORY pass.

27.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

27.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

27.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

27.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

27.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

27.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

27.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

27.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

27.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.17. Executing OPT pass (performing simple optimizations).

27.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~20 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
<suppressed ~1 debug messages>
Optimizing module clk_gate.
Optimizing module data_sampling.
<suppressed ~1 debug messages>
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~4 debug messages>
Optimizing module mux.
<suppressed ~1 debug messages>
Optimizing module parity_calc.
<suppressed ~1 debug messages>
Optimizing module parity_check.
<suppressed ~3 debug messages>
Optimizing module reg_file.
<suppressed ~2 debug messages>
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~2 debug messages>
Optimizing module stp_check.
<suppressed ~2 debug messages>
Optimizing module strt_check.
<suppressed ~2 debug messages>
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~10 debug messages>
Optimizing module sys_control_tx.
<suppressed ~5 debug messages>
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~15 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~4 debug messages>

27.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.17.3. Executing OPT_DFF pass (perform DFF optimizations).

27.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 1 unused cells and 40 unused wires.
<suppressed ~14 debug messages>

27.17.5. Finished fast OPT passes.

27.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

27.19. Executing OPT pass (performing simple optimizations).

27.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
    Consolidated identical input bits for $mux cell $procmux$1191:
      Old ports: A=2'11, B=2'00, Y=$5\alu_out_comp[15:0]
      New ports: A=1'1, B=1'0, Y=$5\alu_out_comp[15:0] [0]
      New connections: $5\alu_out_comp[15:0] [1] = $5\alu_out_comp[15:0] [0]
    Consolidated identical input bits for $mux cell $procmux$1203:
      Old ports: A=2'10, B=2'00, Y=$4\alu_out_comp[15:0]
      New ports: A=1'1, B=1'0, Y=$4\alu_out_comp[15:0] [1]
      New connections: $4\alu_out_comp[15:0] [0] = 1'0
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    Consolidated identical input bits for $mux cell $procmux$738:
      Old ports: A=4'1010, B=4'0000, Y=$11\next_state[3:0]
      New ports: A=1'1, B=1'0, Y=$11\next_state[3:0] [1]
      New connections: { $11\next_state[3:0] [3:2] $11\next_state[3:0] [0] } = { $11\next_state[3:0] [1] 2'00 }
    Consolidated identical input bits for $mux cell $procmux$762:
      Old ports: A=4'0111, B=4'1000, Y=$8\next_state[3:0]
      New ports: A=2'01, B=2'10, Y={ $8\next_state[3:0] [3] $8\next_state[3:0] [0] }
      New connections: $8\next_state[3:0] [2:1] = { $8\next_state[3:0] [0] $8\next_state[3:0] [0] }
    Consolidated identical input bits for $mux cell $procmux$772:
      Old ports: A=3'110, B=3'000, Y=$7\next_state[3:0] [2:0]
      New ports: A=1'1, B=1'0, Y=$7\next_state[3:0] [1]
      New connections: { $7\next_state[3:0] [2] $7\next_state[3:0] [0] } = { $7\next_state[3:0] [1] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$795:
      Old ports: A=2'11, B=2'00, Y=$5\next_state[3:0]
      New ports: A=1'1, B=1'0, Y=$5\next_state[3:0] [0]
      New connections: $5\next_state[3:0] [1] = $5\next_state[3:0] [0]
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    Consolidated identical input bits for $mux cell $procmux$916:
      Old ports: A=3'010, B=3'001, Y=$2\next_state[2:0]
      New ports: A=2'10, B=2'01, Y=$2\next_state[2:0] [1:0]
      New connections: $2\next_state[2:0] [2] = 1'0
    New ctrl vector for $pmux cell $procmux$921: { $procmux$909_CMP $procmux$860_CMP $procmux$879_CMP }
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
    Consolidated identical input bits for $mux cell $procmux$275:
      Old ports: A=3'000, B=3'001, Y=$7\next_state[2:0]
      New ports: A=1'0, B=1'1, Y=$7\next_state[2:0] [0]
      New connections: $7\next_state[2:0] [2:1] = 2'00
    Consolidated identical input bits for $mux cell $procmux$311:
      Old ports: A=3'011, B=3'010, Y=$3\next_state[2:0]
      New ports: A=1'1, B=1'0, Y=$3\next_state[2:0] [0]
      New connections: $3\next_state[2:0] [2:1] = 2'01
    New ctrl vector for $pmux cell $procmux$326: { $procmux$324_CMP $procmux$237_CMP $auto$opt_reduce.cc:134:opt_pmux$1578 $procmux$207_CMP }
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
    Consolidated identical input bits for $mux cell $procmux$448:
      Old ports: A=3'100, B=3'011, Y=$4\next_state[2:0]
      New ports: A=2'10, B=2'01, Y={ $4\next_state[2:0] [2] $4\next_state[2:0] [0] }
      New connections: $4\next_state[2:0] [1] = $4\next_state[2:0] [0]
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 12 changes.

27.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.19.6. Executing OPT_SHARE pass.

27.19.7. Executing OPT_DFF pass (perform DFF optimizations).

27.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~3 debug messages>
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~2 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.10. Rerunning OPT passes. (Maybe there is more to do..)

27.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~3 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.19.14. Executing OPT_SHARE pass.

27.19.15. Executing OPT_DFF pass (perform DFF optimizations).

27.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

27.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.18. Rerunning OPT passes. (Maybe there is more to do..)

27.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.19.22. Executing OPT_SHARE pass.

27.19.23. Executing OPT_DFF pass (perform DFF optimizations).

27.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.26. Finished OPT passes. (There is nothing left to do.)

27.20. Executing TECHMAP pass (map to technology primitives).

27.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

27.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$bfceb922395790c0ce92e9f9b5b428d4fc72cc30\_90_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$332fab4e157f868977379756d21fa99887c3c6c4\_90_alu for cells of type $alu.
Using template $paramod$0ae6dcbc606d0267ec97d3ccf20343286af3366c\_90_alu for cells of type $alu.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using template $paramod$20d3ee62d72123142eb855d7ddafd835e31ba009\_90_pmux for cells of type $pmux.
Using template $paramod$4d45682f6d5f8751d24fc75184ef72226da353f7\_90_pmux for cells of type $pmux.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod$75a16668b548c3bac59647e2f0c7dad55b2b94b9\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_xor.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$943564b9366bbc392bf4bbc801aa0a2d7742a4e0\_90_alu for cells of type $alu.
Using template $paramod$dde52db7035cb02b3cc5e73865788532339e3bcb\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dlatch.
Using template $paramod$83dd457849c736323edf2edb15923eb27f99c683\_90_alu for cells of type $alu.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\_90_alu for cells of type $alu.
Using template $paramod$67686dad8c792aead4495d34957ca1f4c910d0ba\_90_div for cells of type $div.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add \data_a_in * \data_b_in (8x8 bits, unsigned)
Using template $paramod$e85bcdd999a9f7e1064fcb77207041270947b77a\_90_pmux for cells of type $pmux.
Using template $paramod$67686dad8c792aead4495d34957ca1f4c910d0ba\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000010000 for cells of type $__div_mod_u.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod$02488ff6fa51b28bbfa470bdd9b0e548b3357746\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$d66a711d7e97d14a7c7a9fd9e900c39b1fc36cfa\_90_alu for cells of type $alu.
Using template $paramod$8359f4ac8e08a95551ec17e9becbee696d87568d\_90_alu for cells of type $alu.
Using template $paramod$3e9f586ebf39197c9185418e155ec5725178e703\_90_alu for cells of type $alu.
Using template $paramod$99f84fe1e34117baf970301335fa146f92b93eb7\_90_alu for cells of type $alu.
Using template $paramod$10caef7eb223495dec7ca6c51abc18dbd379ce45\_90_alu for cells of type $alu.
Using template $paramod$6ae352d62dfc78ea1f63c7f3961ba142be4a2f93\_90_alu for cells of type $alu.
Using template $paramod$7bdc7d89ea9376c9c454fd05d9b64ca6288b61c9\_90_alu for cells of type $alu.
Using template $paramod$96a374a77d27fe2a5f65189ccd5c4d82c02f3e0c\_90_alu for cells of type $alu.
Using template $paramod$c01a73249af533291d6c07bc7dff8edfd9012ebf\_90_alu for cells of type $alu.
Using template $paramod$4dafc65fa46f14914da22e0fac43fee737cf5e98\_90_alu for cells of type $alu.
Using template $paramod$6514813ccfd0fbcd872b47be16e9bc3f005ba67f\_90_alu for cells of type $alu.
Using template $paramod$90cb621aa18d0bfc972ff6df82973fce6d62f25a\_90_alu for cells of type $alu.
Using template $paramod$28a6ec5648d14f65107108cc45dfc9433b8b29ab\_90_alu for cells of type $alu.
Using template $paramod$1b1e81b08462e7f621826ba0c290068af8e4e550\_90_alu for cells of type $alu.
Using template $paramod$1c5b0982e801b857faf786570d1281fe30bbf0dc\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
No more expansions possible.
<suppressed ~8829 debug messages>

27.21. Executing OPT pass (performing simple optimizations).

27.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~5360 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
<suppressed ~41 debug messages>
Optimizing module clk_gate.
Optimizing module data_sampling.
<suppressed ~59 debug messages>
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~87 debug messages>
Optimizing module mux.
<suppressed ~8 debug messages>
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
<suppressed ~60 debug messages>
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~21 debug messages>
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~128 debug messages>
Optimizing module sys_control_tx.
<suppressed ~36 debug messages>
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~167 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~38 debug messages>

27.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~7638 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
<suppressed ~21 debug messages>
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
<suppressed ~18 debug messages>
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
<suppressed ~12 debug messages>
Finding identical cells in module `\mux'.
<suppressed ~6 debug messages>
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~156 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
<suppressed ~12 debug messages>
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~144 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~15 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~66 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~12 debug messages>
Removed a total of 2700 cells.

27.21.3. Executing OPT_DFF pass (perform DFF optimizations).

27.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 371 unused cells and 5222 unused wires.
<suppressed ~383 debug messages>

27.21.5. Finished fast OPT passes.

27.22. Executing ABC pass (technology mapping using ABC).

27.22.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 2472 gates and 2494 wires to a netlist network with 21 inputs and 16 outputs.

27.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      183
ABC RESULTS:              NAND cells:       47
ABC RESULTS:              XNOR cells:      101
ABC RESULTS:               NOT cells:      109
ABC RESULTS:               AND cells:      110
ABC RESULTS:             ORNOT cells:       84
ABC RESULTS:               NOR cells:      171
ABC RESULTS:               XOR cells:      300
ABC RESULTS:                OR cells:      329
ABC RESULTS:            ANDNOT cells:      832
ABC RESULTS:        internal signals:     2457
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

27.22.2. Extracting gate netlist of module `\bit_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.3. Extracting gate netlist of module `\clk_divider' to `<abc-temp-dir>/input.blif'..
Extracted 61 gates and 74 wires to a netlist network with 11 inputs and 6 outputs.

27.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.3.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               XOR cells:        7
ABC RESULTS:                OR cells:       10
ABC RESULTS:            ANDNOT cells:       21
ABC RESULTS:        internal signals:       57
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        6
Removing temp directory.

27.22.4. Extracting gate netlist of module `\clk_gate' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

27.22.4.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.5. Extracting gate netlist of module `\data_sampling' to `<abc-temp-dir>/input.blif'..
Extracted 63 gates and 76 wires to a netlist network with 13 inputs and 4 outputs.

27.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.5.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        5
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       16
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:            ANDNOT cells:       10
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:       16
ABC RESULTS:        internal signals:       59
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        4
Removing temp directory.

27.22.6. Extracting gate netlist of module `\data_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

27.22.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.6.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.7. Extracting gate netlist of module `\deserializer' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 18 wires to a netlist network with 9 inputs and 8 outputs.

27.22.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        8
Removing temp directory.

27.22.8. Extracting gate netlist of module `\edge_bit_counter' to `<abc-temp-dir>/input.blif'..
Extracted 66 gates and 83 wires to a netlist network with 16 inputs and 11 outputs.

27.22.8.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.8.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:               NOT cells:        4
ABC RESULTS:                OR cells:       11
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               XOR cells:       12
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:        internal signals:       56
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       11
Removing temp directory.

27.22.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 14 gates and 19 wires to a netlist network with 4 inputs and 1 outputs.

27.22.9.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.9.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.10. Extracting gate netlist of module `\parity_calc' to `<abc-temp-dir>/input.blif'..
Extracted 13 gates and 23 wires to a netlist network with 10 inputs and 2 outputs.

27.22.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.10.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:        5
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        2
Removing temp directory.

27.22.11. Extracting gate netlist of module `\parity_check' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 6 wires to a netlist network with 3 inputs and 1 outputs.

27.22.11.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.11.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.12. Extracting gate netlist of module `\reg_file' to `<abc-temp-dir>/input.blif'..
Extracted 320 gates and 454 wires to a netlist network with 134 inputs and 27 outputs.

27.22.12.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.12.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:               AND cells:        2
ABC RESULTS:              NAND cells:        8
ABC RESULTS:            ANDNOT cells:      142
ABC RESULTS:                OR cells:      133
ABC RESULTS:               MUX cells:        8
ABC RESULTS:        internal signals:      293
ABC RESULTS:           input signals:      134
ABC RESULTS:          output signals:       27
Removing temp directory.

27.22.13. Extracting gate netlist of module `\reset_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.14. Extracting gate netlist of module `\serializer' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 46 wires to a netlist network with 21 inputs and 14 outputs.

27.22.14.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.14.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:               MUX cells:        7
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       14
Removing temp directory.

27.22.15. Extracting gate netlist of module `\stp_check' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

27.22.15.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.15.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.16. Extracting gate netlist of module `\strt_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

27.22.16.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.16.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.17. Extracting gate netlist of module `\sys_control' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.18. Extracting gate netlist of module `\sys_control_rx' to `<abc-temp-dir>/input.blif'..
Extracted 158 gates and 178 wires to a netlist network with 19 inputs and 27 outputs.

27.22.18.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.18.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               MUX cells:        2
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              NAND cells:        7
ABC RESULTS:                OR cells:       35
ABC RESULTS:               NOR cells:       10
ABC RESULTS:               AND cells:        4
ABC RESULTS:            ANDNOT cells:       58
ABC RESULTS:        internal signals:      132
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       27
Removing temp directory.

27.22.19. Extracting gate netlist of module `\sys_control_tx' to `<abc-temp-dir>/input.blif'..
Extracted 88 gates and 119 wires to a netlist network with 30 inputs and 13 outputs.

27.22.19.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.19.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              NAND cells:        2
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:               NOR cells:        3
ABC RESULTS:            ANDNOT cells:       51
ABC RESULTS:        internal signals:       76
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       13
Removing temp directory.

27.22.20. Extracting gate netlist of module `\system_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.21. Extracting gate netlist of module `\uart_rx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.22. Extracting gate netlist of module `\uart_rx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 163 gates and 186 wires to a netlist network with 22 inputs and 8 outputs.

27.22.22.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.22.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        3
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:               NOT cells:        9
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               NOR cells:        6
ABC RESULTS:               AND cells:        4
ABC RESULTS:               XOR cells:       20
ABC RESULTS:                OR cells:       31
ABC RESULTS:            ANDNOT cells:       43
ABC RESULTS:        internal signals:      156
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        8
Removing temp directory.

27.22.23. Extracting gate netlist of module `\uart_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.24. Extracting gate netlist of module `\uart_tx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.25. Extracting gate netlist of module `\uart_tx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 58 wires to a netlist network with 6 inputs and 8 outputs.

27.22.25.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.25.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               NOR cells:        3
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:            ANDNOT cells:       20
ABC RESULTS:        internal signals:       44
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        8
Removing temp directory.

27.23. Executing OPT pass (performing simple optimizations).

27.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~1 debug messages>
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~54 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~3 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~3 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 20 cells.

27.23.3. Executing OPT_DFF pass (perform DFF optimizations).

27.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1781 unused wires.
<suppressed ~18 debug messages>

27.23.5. Finished fast OPT passes.

27.24. Executing HIERARCHY pass (managing design hierarchy).

27.24.1. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \alu
Used module:     \bit_synchronizer
Used module:     \clk_divider
Used module:     \clk_gate
Used module:     \data_synchronizer
Used module:     \reg_file
Used module:     \reset_synchronizer
Used module:     \sys_control
Used module:         \sys_control_rx
Used module:         \sys_control_tx
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \data_sampling
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \parity_check
Used module:             \stp_check
Used module:             \strt_check
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \parity_calc
Used module:             \serializer
Used module:             \uart_tx_fsm

27.24.2. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \alu
Used module:     \bit_synchronizer
Used module:     \clk_divider
Used module:     \clk_gate
Used module:     \data_synchronizer
Used module:     \reg_file
Used module:     \reset_synchronizer
Used module:     \sys_control
Used module:         \sys_control_rx
Used module:         \sys_control_tx
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \data_sampling
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \parity_check
Used module:             \stp_check
Used module:             \strt_check
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \parity_calc
Used module:             \serializer
Used module:             \uart_tx_fsm
Removed 0 unused modules.

27.25. Printing statistics.

=== alu ===

   Number of wires:               2242
   Number of wire bits:           2289
   Number of public wires:          10
   Number of public wire bits:      57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2265
     $_ANDNOT_                     818
     $_AND_                        110
     $_DFF_PN0_                     17
     $_MUX_                        183
     $_NAND_                        47
     $_NOR_                        169
     $_NOT_                        109
     $_ORNOT_                       84
     $_OR_                         327
     $_XNOR_                       101
     $_XOR_                        300

=== bit_synchronizer ===

   Number of wires:                  5
   Number of wire bits:              6
   Number of public wires:           5
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_PN0_                      3

=== clk_divider ===

   Number of wires:                 54
   Number of wire bits:             66
   Number of public wires:           6
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 58
     $_ANDNOT_                      21
     $_AND_                          2
     $_DFF_PN0_                      5
     $_NAND_                         3
     $_NOT_                          1
     $_ORNOT_                        3
     $_OR_                          10
     $_XNOR_                         6
     $_XOR_                          7

=== clk_gate ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_AND_                          1
     $_DLATCH_N_                     1

=== data_sampling ===

   Number of wires:                 63
   Number of wire bits:             73
   Number of public wires:           8
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 59
     $_ANDNOT_                      10
     $_AND_                          2
     $_DFFE_PN0P_                    3
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                          5
     $_ORNOT_                        1
     $_OR_                          16
     $_XNOR_                         2
     $_XOR_                         16

=== data_synchronizer ===

   Number of wires:                  8
   Number of wire bits:             24
   Number of public wires:           8
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $_ANDNOT_                       1
     $_DFFE_PN0P_                    8
     $_DFF_PN0_                      4

=== deserializer ===

   Number of wires:                  7
   Number of wire bits:             21
   Number of public wires:           7
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_AND_                          8
     $_DFFE_PN0P_                    8

=== edge_bit_counter ===

   Number of wires:                 56
   Number of wire bits:             74
   Number of public wires:           7
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 65
     $_ANDNOT_                      17
     $_AND_                          2
     $_DFFE_PN0P_                    9
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          4
     $_ORNOT_                        1
     $_OR_                          11
     $_XNOR_                         4
     $_XOR_                         12

=== mux ===

   Number of wires:                 10
   Number of wire bits:             11
   Number of public wires:           4
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $_ANDNOT_                       2
     $_NAND_                         1
     $_NOR_                          1
     $_ORNOT_                        1
     $_OR_                           2

=== parity_calc ===

   Number of wires:                 17
   Number of wire bits:             24
   Number of public wires:           6
   Number of public wire bits:      13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $_ANDNOT_                       1
     $_AND_                          1
     $_DFFE_PN0P_                    1
     $_OR_                           1
     $_XNOR_                         3
     $_XOR_                          5

=== parity_check ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_ANDNOT_                       1
     $_DFF_PN0_                      1
     $_XNOR_                         1

=== reg_file ===

   Number of wires:                317
   Number of wire bits:            481
   Number of public wires:          28
   Number of public wire bits:     185
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                433
     $_ANDNOT_                     141
     $_AND_                          2
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                  133
     $_DFFE_PN1P_                    3
     $_MUX_                          8
     $_NAND_                         8
     $_ORNOT_                        4
     $_OR_                         133

=== reset_synchronizer ===

   Number of wires:                  4
   Number of wire bits:              6
   Number of public wires:           4
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_PN0_                      3

=== serializer ===

   Number of wires:                 18
   Number of wire bits:             43
   Number of public wires:          10
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 29
     $_ANDNOT_                       3
     $_AND_                          2
     $_DFFE_PN0P_                   11
     $_MUX_                          7
     $_NAND_                         1
     $_ORNOT_                        2
     $_OR_                           1
     $_XNOR_                         1
     $_XOR_                          1

=== stp_check ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_ANDNOT_                       1

=== strt_check ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_AND_                          1

=== sys_control ===

   Number of wires:                 23
   Number of wire bits:             94
   Number of public wires:          23
   Number of public wire bits:      94
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     sys_control_rx                  1
     sys_control_tx                  1

=== sys_control_rx ===

   Number of wires:                126
   Number of wire bits:            199
   Number of public wires:          26
   Number of public wire bits:      99
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                159
     $_ANDNOT_                      58
     $_AND_                          4
     $_DFFE_PN0P_                   28
     $_DFF_PN0_                      4
     $_MUX_                          2
     $_NAND_                         7
     $_NOR_                         10
     $_NOT_                          1
     $_ORNOT_                       10
     $_OR_                          35

=== sys_control_tx ===

   Number of wires:                 78
   Number of wire bits:            111
   Number of public wires:          11
   Number of public wire bits:      44
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                      51
     $_DFFE_PN0P_                    3
     $_MUX_                          2
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                       12
     $_OR_                           7

=== system_top ===

   Number of wires:                 35
   Number of wire bits:            126
   Number of public wires:          35
   Number of public wire bits:     126
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     alu                             1
     bit_synchronizer                1
     clk_divider                     1
     clk_gate                        1
     data_synchronizer               2
     reg_file                        1
     reset_synchronizer              2
     sys_control                     1
     uart_top                        1

=== uart_rx ===

   Number of wires:                 20
   Number of wire bits:             38
   Number of public wires:          20
   Number of public wire bits:      38
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     data_sampling                   1
     deserializer                    1
     edge_bit_counter                1
     parity_check                    1
     stp_check                       1
     strt_check                      1
     uart_rx_fsm                     1

=== uart_rx_fsm ===

   Number of wires:                137
   Number of wire bits:            152
   Number of public wires:          19
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                128
     $_ANDNOT_                      42
     $_AND_                          4
     $_DFFE_PN0P_                    3
     $_MUX_                          1
     $_NAND_                         3
     $_NOR_                          6
     $_NOT_                          9
     $_ORNOT_                        6
     $_OR_                          31
     $_XNOR_                         3
     $_XOR_                         20

=== uart_top ===

   Number of wires:                 13
   Number of wire bits:             31
   Number of public wires:          13
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     uart_rx                         1
     uart_tx                         1

=== uart_tx ===

   Number of wires:                 13
   Number of wire bits:             21
   Number of public wires:          13
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     mux                             1
     parity_calc                     1
     serializer                      1
     uart_tx_fsm                     1

=== uart_tx_fsm ===

   Number of wires:                 45
   Number of wire bits:             51
   Number of public wires:          10
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     $_ANDNOT_                      20
     $_DFFE_PN0P_                    1
     $_DFF_PN0_                      3
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                        6
     $_OR_                           7

=== design hierarchy ===

   system_top                        1
     alu                             1
     bit_synchronizer                1
     clk_divider                     1
     clk_gate                        1
     data_synchronizer               2
     reg_file                        1
     reset_synchronizer              2
     sys_control                     1
       sys_control_rx                1
       sys_control_tx                1
     uart_top                        1
       uart_rx                       1
         data_sampling               1
         deserializer                1
         edge_bit_counter            1
         parity_check                1
         stp_check                   1
         strt_check                  1
         uart_rx_fsm                 1
       uart_tx                       1
         mux                         1
         parity_calc                 1
         serializer                  1
         uart_tx_fsm                 1

   Number of wires:               3321
   Number of wire bits:           3989
   Number of public wires:         302
   Number of public wire bits:     941
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3399
     $_ANDNOT_                    1188
     $_AND_                        139
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                  216
     $_DFFE_PN1P_                    3
     $_DFF_PN0_                     47
     $_DLATCH_N_                     1
     $_MUX_                        203
     $_NAND_                        78
     $_NOR_                        197
     $_NOT_                        133
     $_ORNOT_                      130
     $_OR_                         581
     $_XNOR_                       121
     $_XOR_                        361

27.26. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

28. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

28.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alu':
  mapped 17 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\bit_synchronizer':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\clk_divider':
  mapped 5 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\clk_gate':
Mapping DFF cells in module `\data_sampling':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\data_synchronizer':
  mapped 12 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\deserializer':
  mapped 8 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\edge_bit_counter':
  mapped 9 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\mux':
Mapping DFF cells in module `\parity_calc':
  mapped 1 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\parity_check':
  mapped 1 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\reg_file':
  mapped 137 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\reset_synchronizer':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\serializer':
  mapped 11 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\stp_check':
Mapping DFF cells in module `\strt_check':
Mapping DFF cells in module `\sys_control':
Mapping DFF cells in module `\sys_control_rx':
  mapped 32 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\sys_control_tx':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\system_top':
Mapping DFF cells in module `\uart_rx':
Mapping DFF cells in module `\uart_rx_fsm':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\uart_top':
Mapping DFF cells in module `\uart_tx':
Mapping DFF cells in module `\uart_tx_fsm':
  mapped 4 $_DFFSR_PNN_ cells to \DFFSR cells.

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

29.6. Executing OPT_DFF pass (perform DFF optimizations).

29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

29.9. Finished OPT passes. (There is nothing left to do.)

30. Executing ABC pass (technology mapping using ABC).

30.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 2248 gates and 2269 wires to a netlist network with 21 inputs and 16 outputs.

30.1.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.1.2. Re-integrating ABC results.
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:           AOI22X1 cells:       15
ABC RESULTS:            MUX2X1 cells:        1
ABC RESULTS:            NOR3X1 cells:       12
ABC RESULTS:            AND2X2 cells:       36
ABC RESULTS:             OR2X2 cells:       20
ABC RESULTS:           XNOR2X1 cells:       34
ABC RESULTS:            NOR2X1 cells:      200
ABC RESULTS:           NAND3X1 cells:       93
ABC RESULTS:            XOR2X1 cells:       21
ABC RESULTS:             INVX1 cells:      174
ABC RESULTS:           OAI21X1 cells:      264
ABC RESULTS:           NAND2X1 cells:      162
ABC RESULTS:           AOI21X1 cells:      117
ABC RESULTS:        internal signals:     2232
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

30.2. Extracting gate netlist of module `\bit_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.3. Extracting gate netlist of module `\clk_divider' to `<abc-temp-dir>/input.blif'..
Extracted 53 gates and 64 wires to a netlist network with 11 inputs and 6 outputs.

30.3.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.3.2. Re-integrating ABC results.
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:            XOR2X1 cells:        2
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:           NAND3X1 cells:        4
ABC RESULTS:           AOI21X1 cells:        8
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           XNOR2X1 cells:        4
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:           OAI21X1 cells:        5
ABC RESULTS:            NOR2X1 cells:        6
ABC RESULTS:        internal signals:       47
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        6
Removing temp directory.

30.4. Extracting gate netlist of module `\clk_gate' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

30.4.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

30.5. Extracting gate netlist of module `\data_sampling' to `<abc-temp-dir>/input.blif'..
Extracted 59 gates and 73 wires to a netlist network with 14 inputs and 4 outputs.

30.5.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.5.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            XOR2X1 cells:        3
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:            NOR2X1 cells:        9
ABC RESULTS:            NOR3X1 cells:        3
ABC RESULTS:             OR2X2 cells:        5
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:           XNOR2X1 cells:        3
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:           NAND3X1 cells:        8
ABC RESULTS:           NAND2X1 cells:       12
ABC RESULTS:           OAI21X1 cells:       10
ABC RESULTS:        internal signals:       55
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        4
Removing temp directory.

30.6. Extracting gate netlist of module `\data_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 9 gates and 27 wires to a netlist network with 18 inputs and 9 outputs.

30.6.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.6.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        2
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:           NAND3X1 cells:        8
ABC RESULTS:           NAND2X1 cells:        8
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       18
ABC RESULTS:          output signals:        9
Removing temp directory.

30.7. Extracting gate netlist of module `\deserializer' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 27 wires to a netlist network with 11 inputs and 16 outputs.

30.7.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.7.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:            NOR2X1 cells:        8
ABC RESULTS:           NAND2X1 cells:        8
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:       16
Removing temp directory.

30.8. Extracting gate netlist of module `\edge_bit_counter' to `<abc-temp-dir>/input.blif'..
Extracted 65 gates and 81 wires to a netlist network with 16 inputs and 9 outputs.

30.8.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.8.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:            NOR3X1 cells:        2
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:             INVX1 cells:       17
ABC RESULTS:           NAND3X1 cells:       14
ABC RESULTS:           OAI21X1 cells:       13
ABC RESULTS:           NAND2X1 cells:       13
ABC RESULTS:            NOR2X1 cells:       11
ABC RESULTS:           XNOR2X1 cells:        5
ABC RESULTS:           OAI22X1 cells:        7
ABC RESULTS:        internal signals:       56
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

30.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 7 gates and 11 wires to a netlist network with 4 inputs and 1 outputs.

30.9.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.9.2. Re-integrating ABC results.
ABC RESULTS:           NAND3X1 cells:        1
ABC RESULTS:             INVX1 cells:        2
ABC RESULTS:           OAI21X1 cells:        1
ABC RESULTS:           NAND2X1 cells:        1
ABC RESULTS:        internal signals:        6
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

30.10. Extracting gate netlist of module `\parity_calc' to `<abc-temp-dir>/input.blif'..
Extracted 12 gates and 23 wires to a netlist network with 11 inputs and 1 outputs.

30.10.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.10.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:        3
ABC RESULTS:           NAND3X1 cells:        4
ABC RESULTS:           XNOR2X1 cells:        5
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        2
ABC RESULTS:           NAND2X1 cells:        6
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        1
Removing temp directory.

30.11. Extracting gate netlist of module `\parity_check' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 5 wires to a netlist network with 3 inputs and 1 outputs.

30.11.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.11.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

30.12. Extracting gate netlist of module `\reg_file' to `<abc-temp-dir>/input.blif'..
Extracted 433 gates and 584 wires to a netlist network with 151 inputs and 137 outputs.

30.12.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.12.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:             INVX1 cells:       53
ABC RESULTS:           AOI22X1 cells:       22
ABC RESULTS:           NAND3X1 cells:       32
ABC RESULTS:            NOR3X1 cells:       21
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:            NOR2X1 cells:       64
ABC RESULTS:           AOI21X1 cells:       48
ABC RESULTS:           NAND2X1 cells:      130
ABC RESULTS:           OAI21X1 cells:      133
ABC RESULTS:        internal signals:      296
ABC RESULTS:           input signals:      151
ABC RESULTS:          output signals:      137
Removing temp directory.

30.13. Extracting gate netlist of module `\reset_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.14. Extracting gate netlist of module `\serializer' to `<abc-temp-dir>/input.blif'..
Extracted 29 gates and 51 wires to a netlist network with 22 inputs and 12 outputs.

30.14.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.14.2. Re-integrating ABC results.
ABC RESULTS:           NAND2X1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:           AOI22X1 cells:        7
ABC RESULTS:            NOR3X1 cells:        7
ABC RESULTS:           OAI22X1 cells:        7
ABC RESULTS:             INVX1 cells:       13
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:           OAI21X1 cells:        4
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:       12
Removing temp directory.

30.15. Extracting gate netlist of module `\stp_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

30.15.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.15.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

30.16. Extracting gate netlist of module `\strt_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

30.16.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.16.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

30.17. Extracting gate netlist of module `\sys_control' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.18. Extracting gate netlist of module `\sys_control_rx' to `<abc-temp-dir>/input.blif'..
Extracted 155 gates and 222 wires to a netlist network with 67 inputs and 54 outputs.

30.18.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.18.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:            AND2X2 cells:        5
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:            NOR3X1 cells:        7
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:           AOI21X1 cells:        6
ABC RESULTS:           NAND3X1 cells:        9
ABC RESULTS:            NOR2X1 cells:       32
ABC RESULTS:            MUX2X1 cells:        4
ABC RESULTS:             INVX1 cells:       45
ABC RESULTS:           NAND2X1 cells:       44
ABC RESULTS:           OAI21X1 cells:       28
ABC RESULTS:        internal signals:      101
ABC RESULTS:           input signals:       67
ABC RESULTS:          output signals:       54
Removing temp directory.

30.19. Extracting gate netlist of module `\sys_control_tx' to `<abc-temp-dir>/input.blif'..
Extracted 82 gates and 112 wires to a netlist network with 30 inputs and 12 outputs.

30.19.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.19.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        4
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:           NAND3X1 cells:       17
ABC RESULTS:           NAND2X1 cells:       32
ABC RESULTS:        internal signals:       70
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       12
Removing temp directory.

30.20. Extracting gate netlist of module `\system_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.21. Extracting gate netlist of module `\uart_rx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.22. Extracting gate netlist of module `\uart_rx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 128 gates and 150 wires to a netlist network with 22 inputs and 7 outputs.

30.22.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.22.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:            MUX2X1 cells:        1
ABC RESULTS:           AOI22X1 cells:        3
ABC RESULTS:           OAI22X1 cells:        3
ABC RESULTS:           NAND2X1 cells:       16
ABC RESULTS:            AND2X2 cells:        7
ABC RESULTS:             OR2X2 cells:        4
ABC RESULTS:            NOR2X1 cells:       27
ABC RESULTS:             INVX1 cells:       20
ABC RESULTS:           AOI21X1 cells:       13
ABC RESULTS:           NAND3X1 cells:       12
ABC RESULTS:           OAI21X1 cells:       23
ABC RESULTS:        internal signals:      121
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        7
Removing temp directory.

30.23. Extracting gate netlist of module `\uart_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.24. Extracting gate netlist of module `\uart_tx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.25. Extracting gate netlist of module `\uart_tx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 41 gates and 48 wires to a netlist network with 7 inputs and 7 outputs.

30.25.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.25.2. Re-integrating ABC results.
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        7
ABC RESULTS:           OAI21X1 cells:        6
ABC RESULTS:           NAND2X1 cells:        5
ABC RESULTS:        internal signals:       34
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        7
Removing temp directory.

31. Executing FLATTEN pass (flatten design).
Deleting now unused module alu.
Deleting now unused module bit_synchronizer.
Deleting now unused module clk_divider.
Deleting now unused module clk_gate.
Deleting now unused module data_sampling.
Deleting now unused module data_synchronizer.
Deleting now unused module deserializer.
Deleting now unused module edge_bit_counter.
Deleting now unused module mux.
Deleting now unused module parity_calc.
Deleting now unused module parity_check.
Deleting now unused module reg_file.
Deleting now unused module reset_synchronizer.
Deleting now unused module serializer.
Deleting now unused module stp_check.
Deleting now unused module strt_check.
Deleting now unused module sys_control.
Deleting now unused module sys_control_rx.
Deleting now unused module sys_control_tx.
Deleting now unused module uart_rx.
Deleting now unused module uart_rx_fsm.
Deleting now unused module uart_top.
Deleting now unused module uart_tx.
Deleting now unused module uart_tx_fsm.
<suppressed ~26 debug messages>

32. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 3966 unused wires.

33. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port system_top.ref_clk: Missing option -inpad.
Don't map input port system_top.reset_n: Missing option -inpad.
Don't map input port system_top.rx_in: Missing option -inpad.
Mapping port system_top.tx_out using BUFX2.
Don't map input port system_top.uart_clk: Missing option -inpad.

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module system_top.

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system_top'.
Removed a total of 0 cells.

34.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

34.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \system_top.
Performed a total of 0 changes.

34.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system_top'.
Removed a total of 0 cells.

34.6. Executing OPT_DFF pass (perform DFF optimizations).

34.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \system_top..

34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module system_top.

34.9. Finished OPT passes. (There is nothing left to do.)

35. Executing BLIF backend.

36. Printing statistics.

=== system_top ===

   Number of wires:               2472
   Number of wire bits:           2749
   Number of public wires:        2472
   Number of public wire bits:    2749
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2733
     $_DLATCH_N_                     1
     AND2X2                         60
     AOI21X1                       206
     AOI22X1                        53
     BUFX2                           1
     DFFSR                         267
     INVX1                         376
     MUX2X1                          6
     NAND2X1                       457
     NAND3X1                       215
     NOR2X1                        368
     NOR3X1                         55
     OAI21X1                       521
     OAI22X1                        30
     OR2X2                          38
     XNOR2X1                        52
     XOR2X1                         27

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: ec85467b8f, CPU: user 3.99s system 0.14s, MEM: 87.89 MB peak
Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)
Time spent: 39% 2x abc (2 sec), 19% 68x opt_expr (1 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)


-- Executing script file `synth/synth.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/system_top.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/system_top.v' to AST representation.
Generating RTLIL representation for module `\system_top'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\bit_synchronizer'.
Warning: Replacing memory \reg_file with list of registers. See /home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:17
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\reset_synchronizer'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\data_synchronizer'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v' to AST representation.
Generating RTLIL representation for module `\clk_gate'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v' to AST representation.
Generating RTLIL representation for module `\clk_divider'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_top.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_top.v' to AST representation.
Generating RTLIL representation for module `\uart_top'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v' to AST representation.
Generating RTLIL representation for module `\reg_file'.
Warning: Replacing memory \mem with list of registers. See /home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:33
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control.v' to AST representation.
Generating RTLIL representation for module `\sys_control'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v' to AST representation.
Generating RTLIL representation for module `\sys_control_tx'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v' to AST representation.
Generating RTLIL representation for module `\sys_control_rx'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx.v' to AST representation.
Generating RTLIL representation for module `\uart_rx'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx.v' to AST representation.
Generating RTLIL representation for module `\uart_tx'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v' to AST representation.
Generating RTLIL representation for module `\mux'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v' to AST representation.
Generating RTLIL representation for module `\serializer'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v' to AST representation.
Generating RTLIL representation for module `\parity_calc'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v' to AST representation.
Generating RTLIL representation for module `\uart_tx_fsm'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v' to AST representation.
Generating RTLIL representation for module `\stp_check'.
Successfully finished Verilog frontend.

21. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v' to AST representation.
Generating RTLIL representation for module `\strt_check'.
Successfully finished Verilog frontend.

22. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v' to AST representation.
Generating RTLIL representation for module `\parity_check'.
Successfully finished Verilog frontend.

23. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v' to AST representation.
Generating RTLIL representation for module `\deserializer'.
Successfully finished Verilog frontend.

24. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v' to AST representation.
Generating RTLIL representation for module `\edge_bit_counter'.
Successfully finished Verilog frontend.

25. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v' to AST representation.
Generating RTLIL representation for module `\data_sampling'.
Successfully finished Verilog frontend.

26. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v' to AST representation.
Generating RTLIL representation for module `\uart_rx_fsm'.
Successfully finished Verilog frontend.

27. Executing SYNTH pass.

27.1. Executing HIERARCHY pass (managing design hierarchy).

27.1.1. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \bit_synchronizer
Used module:     \reset_synchronizer
Used module:     \data_synchronizer
Used module:     \clk_gate
Used module:     \clk_divider
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \stp_check
Used module:             \strt_check
Used module:             \parity_check
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \data_sampling
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \serializer
Used module:             \parity_calc
Used module:             \uart_tx_fsm
Used module:     \alu
Used module:     \reg_file
Used module:     \sys_control
Used module:         \sys_control_tx
Used module:         \sys_control_rx

27.1.2. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \bit_synchronizer
Used module:     \reset_synchronizer
Used module:     \data_synchronizer
Used module:     \clk_gate
Used module:     \clk_divider
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \stp_check
Used module:             \strt_check
Used module:             \parity_check
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \data_sampling
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \serializer
Used module:             \parity_calc
Used module:             \uart_tx_fsm
Used module:     \alu
Used module:     \reg_file
Used module:     \sys_control
Used module:         \sys_control_tx
Used module:         \sys_control_rx
Removed 0 unused modules.
Warning: Resizing cell port system_top.reg_file_inst.addr_in from 8 bits to 4 bits.
Warning: Resizing cell port system_top.sys_control_inst.rf_addr_out from 8 bits to 4 bits.

27.2. Executing PROC pass (convert processes to netlists).

27.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 31 empty switches in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Cleaned up 31 empty switches.

27.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 6 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183 in module uart_rx_fsm.
Marked 8 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162 in module uart_rx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160 in module uart_rx_fsm.
Marked 3 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146 in module data_sampling.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140 in module edge_bit_counter.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136 in module deserializer.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130 in module parity_check.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128 in module parity_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126 in module strt_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125 in module stp_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117 in module uart_tx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116 in module uart_tx_fsm.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113 in module uart_tx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111 in module uart_tx_fsm.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102 in module parity_calc.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98 in module serializer.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93 in module serializer.
Removed 1 dead cases from process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92 in module mux.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92 in module mux.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86 in module sys_control_rx.
Marked 9 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85 in module sys_control_rx.
Marked 11 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81 in module sys_control_tx.
Marked 7 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79 in module sys_control_tx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77 in module sys_control_tx.
Removed 1 dead cases from process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56 in module reg_file.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56 in module reg_file.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34 in module alu.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32 in module alu.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21 in module clk_divider.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18 in module clk_gate.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8 in module reset_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4 in module bit_synchronizer.
Removed a total of 2 dead cases.

27.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 12 redundant assignments.
Promoted 41 assignments to connections.

27.2.4. Executing PROC_INIT pass (extract init attributes).

27.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
Found async reset \reset_n in `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Found async reset \reset_n in `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Found async reset \reset_n in `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Found async reset \reset_n in `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
Found async reset \reset_n in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Found async reset \reset_n in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
Found async reset \reset_n in `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Found async reset \reset_n in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Found async reset \reset_n in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
Found async reset \reset_n in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
Found async reset \reset_n in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Found async reset \reset_n in `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
Found async reset \reset_n in `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
Found async reset \reset_n in `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
Found async reset \reset_n in `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.

27.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~91 debug messages>

27.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
     1/10: $3\data_valid_out[0:0]
     2/10: $2\data_valid_out[0:0]
     3/10: $3\deser_en_out[0:0]
     4/10: $2\deser_en_out[0:0]
     5/10: $2\strt_chk_en_out[0:0]
     6/10: $1\strt_chk_en_out[0:0]
     7/10: $1\counter_en_out[0:0]
     8/10: $1\data_sample_en_out[0:0]
     9/10: $1\deser_en_out[0:0]
    10/10: $1\data_valid_out[0:0]
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
     1/8: $8\next_state[2:0]
     2/8: $7\next_state[2:0]
     3/8: $6\next_state[2:0]
     4/8: $5\next_state[2:0]
     5/8: $4\next_state[2:0]
     6/8: $3\next_state[2:0]
     7/8: $2\next_state[2:0]
     8/8: $1\next_state[2:0]
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
     1/3: $0\register[2:0] [2]
     2/3: $0\register[2:0] [1]
     3/3: $0\register[2:0] [0]
Creating decoders for process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
     1/2: $0\edge_cnt_out[4:0]
     2/2: $0\bit_cnt_out[3:0]
Creating decoders for process `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
     1/1: $0\register[7:0]
Creating decoders for process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
     1/5: $5\par_err_out[0:0]
     2/5: $4\par_err_out[0:0]
     3/5: $3\par_err_out[0:0]
     4/5: $2\par_err_out[0:0]
     5/5: $1\par_err_out[0:0]
Creating decoders for process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
     1/1: $0\register[8:0]
Creating decoders for process `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
     1/2: $2\strt_err_out[0:0]
     2/2: $1\strt_err_out[0:0]
Creating decoders for process `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
     1/2: $2\stp_err_out[0:0]
     2/2: $1\stp_err_out[0:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
     1/1: $0\busy_out[0:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
     1/1: $1\mux_sel_out[1:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
     1/5: $5\next_state[2:0]
     2/5: $4\next_state[2:0]
     3/5: $3\next_state[2:0]
     4/5: $2\next_state[2:0]
     5/5: $1\next_state[2:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
     1/1: $0\par_bit_out[0:0]
Creating decoders for process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
     1/1: $0\counter[2:0]
Creating decoders for process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
     1/1: $0\int_reg[7:0]
Creating decoders for process `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
     1/1: $1\tx_out[0:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
     1/1: $0\uart_alu_send_data_out[15:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
     1/1: $0\uart_rf_send_data_out[7:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
     1/1: $0\rf_addr_reg[7:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
     1/30: $2\alu_data_store[0:0]
     2/30: $2\uart_alu_send_out[0:0]
     3/30: $2\alu_fun_out[3:0]
     4/30: $2\alu_en_out[0:0]
     5/30: $4\rf_addr_out[3:0]
     6/30: $4\rf_wr_data_out[7:0]
     7/30: $4\rf_wr_en_out[0:0]
     8/30: $3\rf_addr_out[3:0]
     9/30: $3\rf_wr_data_out[7:0]
    10/30: $3\rf_wr_en_out[0:0]
    11/30: $2\rf_rd_store[0:0]
    12/30: $2\uart_rf_send_out[0:0]
    13/30: $3\rf_addr_en[0:0]
    14/30: $2\rf_wr_data_out[7:0]
    15/30: $2\rf_addr_out[3:0]
    16/30: $2\rf_wr_en_out[0:0]
    17/30: $2\rf_addr_en[0:0]
    18/30: $1\alu_data_store[0:0]
    19/30: $1\rf_rd_store[0:0]
    20/30: $1\rf_addr_en[0:0]
    21/30: $1\uart_alu_send_out[0:0]
    22/30: $1\uart_rf_send_out[0:0]
    23/30: $1\clk_div_en_out[0:0]
    24/30: $1\clk_gate_en_out[0:0]
    25/30: $1\alu_fun_out[3:0]
    26/30: $1\alu_en_out[0:0]
    27/30: $1\rf_wr_data_out[7:0]
    28/30: $1\rf_addr_out[3:0]
    29/30: $1\rf_rd_en_out[0:0]
    30/30: $1\rf_wr_en_out[0:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
     1/11: $11\next_state[3:0]
     2/11: $10\next_state[3:0]
     3/11: $9\next_state[3:0]
     4/11: $8\next_state[3:0]
     5/11: $7\next_state[3:0]
     6/11: $6\next_state[3:0]
     7/11: $5\next_state[3:0]
     8/11: $4\next_state[3:0]
     9/11: $3\next_state[3:0]
    10/11: $2\next_state[3:0]
    11/11: $1\next_state[3:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
     1/1: $0\current_state[3:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
     1/2: $1\uart_tx_data_out[7:0]
     2/2: $1\uart_tx_data_valid_out[0:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
     1/7: $7\next_state[2:0]
     2/7: $6\next_state[2:0]
     3/7: $5\next_state[2:0]
     4/7: $4\next_state[2:0]
     5/7: $3\next_state[2:0]
     6/7: $2\next_state[2:0]
     7/7: $1\next_state[2:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
     1/30: $4$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$76
     2/30: $3$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$75
     3/30: $3$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$74
     4/30: $2$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR[3:0]$68
     5/30: $2$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA[7:0]$69
     6/30: $2$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$71
     7/30: $2$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$70
     8/30: $1$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$65
     9/30: $1$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$64
    10/30: $1$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA[7:0]$63
    11/30: $1$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR[3:0]$62
    12/30: $1\i[31:0]
    13/30: $0\mem[15][7:0]
    14/30: $0\mem[14][7:0]
    15/30: $0\mem[13][7:0]
    16/30: $0\mem[12][7:0]
    17/30: $0\mem[11][7:0]
    18/30: $0\mem[10][7:0]
    19/30: $0\mem[9][7:0]
    20/30: $0\mem[8][7:0]
    21/30: $0\mem[7][7:0]
    22/30: $0\mem[6][7:0]
    23/30: $0\mem[5][7:0]
    24/30: $0\mem[4][7:0]
    25/30: $0\mem[3][7:0]
    26/30: $0\mem[2][7:0]
    27/30: $0\mem[1][7:0]
    28/30: $0\mem[0][7:0]
    29/30: $0\rd_data_valid_out[0:0]
    30/30: $0\rd_data_out[7:0]
Creating decoders for process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
     1/6: $5\alu_out_comp[15:0]
     2/6: $4\alu_out_comp[15:0]
     3/6: $3\alu_out_comp[15:0]
     4/6: $2\alu_out_comp[15:0]
     5/6: $1\alu_out_comp[15:0]
     6/6: $1\alu_out_comp_valid[0:0]
Creating decoders for process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
     1/2: $0\data_valid_out[0:0]
     2/2: $0\data_out[15:0]
Creating decoders for process `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
     1/1: $0\count[4:0]
Creating decoders for process `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
     1/1: $1\latch_out[0:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
     1/1: $0\sync_data_out[7:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
     1/1: $0\enable_pulse_out[0:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
     1/1: $0\ff[2:0]
Creating decoders for process `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
     1/1: $0\ff[2:0]
Creating decoders for process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
     1/4: $1\i[31:0]
     2/4: $0\reg_file[0][1:0]
     3/4: $0\sync_data_out[0:0]
     4/4: $1$splitcmplxassign$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:24$3[2:0]$7

27.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\uart_rx_fsm.\data_valid_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\data_sample_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\deser_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\stp_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\strt_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\par_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\counter_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\next_state' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
No latch inferred for signal `\parity_check.\par_err_out' from process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
No latch inferred for signal `\strt_check.\strt_err_out' from process `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
No latch inferred for signal `\stp_check.\stp_err_out' from process `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
No latch inferred for signal `\uart_tx_fsm.\mux_sel_out' from process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
No latch inferred for signal `\uart_tx_fsm.\next_state' from process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
No latch inferred for signal `\mux.\tx_out' from process `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
No latch inferred for signal `\sys_control_rx.\rf_wr_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_rd_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_addr_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_wr_data_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_fun_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\clk_gate_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\clk_div_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\uart_rf_send_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\uart_alu_send_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_addr_en' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_rd_store' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_data_store' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\next_state' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
No latch inferred for signal `\sys_control_tx.\uart_tx_data_valid_out' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
No latch inferred for signal `\sys_control_tx.\uart_tx_data_out' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
No latch inferred for signal `\sys_control_tx.\next_state' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
No latch inferred for signal `\alu.\alu_out_comp' from process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
No latch inferred for signal `\alu.\alu_out_comp_valid' from process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Latch inferred for signal `\clk_gate.\latch_out' from process `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18': $auto$proc_dlatch.cc:427:proc_dlatch$1270

27.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\uart_rx_fsm.\current_state' using process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
  created $adff cell `$procdff$1271' with positive edge clock and negative level reset.
Creating register for signal `\data_sampling.\register' using process `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
  created $adff cell `$procdff$1272' with positive edge clock and negative level reset.
Creating register for signal `\edge_bit_counter.\bit_cnt_out' using process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
  created $adff cell `$procdff$1273' with positive edge clock and negative level reset.
Creating register for signal `\edge_bit_counter.\edge_cnt_out' using process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
  created $adff cell `$procdff$1274' with positive edge clock and negative level reset.
Creating register for signal `\deserializer.\register' using process `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
  created $adff cell `$procdff$1275' with positive edge clock and negative level reset.
Creating register for signal `\parity_check.\register' using process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
  created $adff cell `$procdff$1276' with positive edge clock and negative level reset.
Creating register for signal `\uart_tx_fsm.\busy_out' using process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
  created $adff cell `$procdff$1277' with positive edge clock and negative level reset.
Creating register for signal `\uart_tx_fsm.\current_state' using process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
  created $adff cell `$procdff$1278' with positive edge clock and negative level reset.
Creating register for signal `\parity_calc.\par_bit_out' using process `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
  created $adff cell `$procdff$1279' with positive edge clock and negative level reset.
Creating register for signal `\serializer.\counter' using process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
  created $adff cell `$procdff$1280' with positive edge clock and negative level reset.
Creating register for signal `\serializer.\int_reg' using process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
  created $adff cell `$procdff$1281' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\uart_alu_send_data_out' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
  created $adff cell `$procdff$1282' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\uart_rf_send_data_out' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
  created $adff cell `$procdff$1283' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\rf_addr_reg' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
  created $adff cell `$procdff$1284' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\current_state' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
  created $adff cell `$procdff$1285' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_tx.\current_state' using process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
  created $adff cell `$procdff$1286' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\rd_data_out' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1287' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\rd_data_valid_out' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1288' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\i' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1289' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[0]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1290' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[1]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1291' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[2]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1292' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[3]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1293' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[4]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1294' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[5]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1295' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[6]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1296' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[7]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1297' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[8]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1298' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[9]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1299' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[10]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1300' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[11]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1301' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[12]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1302' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[13]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1303' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[14]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1304' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[15]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1305' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1306' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1307' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1308' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1309' with positive edge clock and negative level reset.
Creating register for signal `\alu.\data_out' using process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
  created $adff cell `$procdff$1310' with positive edge clock and negative level reset.
Creating register for signal `\alu.\data_valid_out' using process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
  created $adff cell `$procdff$1311' with positive edge clock and negative level reset.
Creating register for signal `\clk_divider.\count' using process `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
  created $adff cell `$procdff$1312' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\sync_data_out' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
  created $adff cell `$procdff$1313' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\enable_pulse_out' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
  created $adff cell `$procdff$1314' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\ff' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
  created $adff cell `$procdff$1315' with positive edge clock and negative level reset.
Creating register for signal `\reset_synchronizer.\ff' using process `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
  created $adff cell `$procdff$1316' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\sync_data_out' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1317' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\i' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1318' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.$splitcmplxassign$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:24$3' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1319' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\reg_file[0]' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1320' with positive edge clock and negative level reset.

27.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

27.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
Found and cleaned up 8 empty switches in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
Found and cleaned up 4 empty switches in `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Removing empty process `data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Found and cleaned up 3 empty switches in `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Removing empty process `edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Found and cleaned up 1 empty switch in `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Removing empty process `deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Found and cleaned up 5 empty switches in `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
Removing empty process `parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
Removing empty process `parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
Found and cleaned up 2 empty switches in `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
Removing empty process `strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
Found and cleaned up 2 empty switches in `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
Removing empty process `stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
Found and cleaned up 2 empty switches in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Found and cleaned up 1 empty switch in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
Found and cleaned up 5 empty switches in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
Found and cleaned up 2 empty switches in `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Removing empty process `parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Found and cleaned up 2 empty switches in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Removing empty process `serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Found and cleaned up 2 empty switches in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Removing empty process `serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Found and cleaned up 1 empty switch in `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
Removing empty process `mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Found and cleaned up 9 empty switches in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
Found and cleaned up 11 empty switches in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
Found and cleaned up 1 empty switch in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
Found and cleaned up 7 empty switches in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
Found and cleaned up 4 empty switches in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Removing empty process `reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Found and cleaned up 5 empty switches in `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Removing empty process `alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Removing empty process `alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
Found and cleaned up 3 empty switches in `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Removing empty process `clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Found and cleaned up 1 empty switch in `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
Removing empty process `clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
Found and cleaned up 1 empty switch in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
Removing empty process `reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
Removing empty process `bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
Cleaned up 91 empty switches.

27.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_rx_fsm.
<suppressed ~6 debug messages>
Optimizing module data_sampling.
Optimizing module edge_bit_counter.
Optimizing module deserializer.
Optimizing module parity_check.
<suppressed ~4 debug messages>
Optimizing module strt_check.
<suppressed ~1 debug messages>
Optimizing module stp_check.
Optimizing module uart_tx_fsm.
<suppressed ~6 debug messages>
Optimizing module parity_calc.
<suppressed ~2 debug messages>
Optimizing module serializer.
<suppressed ~1 debug messages>
Optimizing module mux.
<suppressed ~1 debug messages>
Optimizing module uart_tx.
Optimizing module uart_rx.
Optimizing module sys_control_rx.
<suppressed ~3 debug messages>
Optimizing module sys_control_tx.
<suppressed ~4 debug messages>
Optimizing module sys_control.
Optimizing module reg_file.
<suppressed ~2 debug messages>
Optimizing module alu.
<suppressed ~3 debug messages>
Optimizing module uart_top.
Optimizing module clk_divider.
<suppressed ~3 debug messages>
Optimizing module clk_gate.
<suppressed ~7 debug messages>
Optimizing module data_synchronizer.
Optimizing module reset_synchronizer.
Optimizing module bit_synchronizer.
Optimizing module system_top.

27.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_rx_fsm.
<suppressed ~4 debug messages>
Optimizing module data_sampling.
<suppressed ~6 debug messages>
Optimizing module edge_bit_counter.
Optimizing module deserializer.
Optimizing module parity_check.
Optimizing module strt_check.
Optimizing module stp_check.
Optimizing module uart_tx_fsm.
Optimizing module parity_calc.
Optimizing module serializer.
Optimizing module mux.
Optimizing module uart_tx.
Optimizing module uart_rx.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module sys_control.
Optimizing module reg_file.
Optimizing module alu.
Optimizing module uart_top.
Optimizing module clk_divider.
<suppressed ~2 debug messages>
Optimizing module clk_gate.
Optimizing module data_synchronizer.
Optimizing module reset_synchronizer.
Optimizing module bit_synchronizer.
Optimizing module system_top.

27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \uart_tx_fsm..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \system_top..
Removed 46 unused cells and 427 unused wires.
<suppressed ~69 debug messages>

27.5. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

27.6. Executing OPT pass (performing simple optimizations).

27.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~18 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
<suppressed ~3 debug messages>
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~48 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~144 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~36 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~99 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~30 debug messages>
Removed a total of 126 cells.

27.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1193.
    dead port 2/2 on $mux $procmux$1195.
    dead port 2/2 on $mux $procmux$1205.
    dead port 2/2 on $mux $procmux$1207.
    dead port 2/2 on $mux $procmux$1218.
    dead port 2/2 on $mux $procmux$1220.
    dead port 2/2 on $mux $procmux$1240.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1250.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$376.
    dead port 2/2 on $mux $procmux$379.
    dead port 2/2 on $mux $procmux$381.
    dead port 2/2 on $mux $procmux$385.
    dead port 2/2 on $mux $procmux$388.
    dead port 2/2 on $mux $procmux$390.
    dead port 1/2 on $mux $procmux$397.
    dead port 2/2 on $mux $procmux$399.
    dead port 2/2 on $mux $procmux$405.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$945.
    dead port 1/2 on $mux $procmux$948.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$423.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$414.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$654.
    dead port 2/2 on $mux $procmux$516.
    dead port 2/2 on $mux $procmux$522.
    dead port 2/2 on $mux $procmux$529.
    dead port 2/2 on $mux $procmux$536.
    dead port 2/2 on $mux $procmux$543.
    dead port 2/2 on $mux $procmux$551.
    dead port 2/2 on $mux $procmux$559.
    dead port 2/2 on $mux $procmux$567.
    dead port 2/2 on $mux $procmux$740.
    dead port 2/2 on $mux $procmux$576.
    dead port 2/2 on $mux $procmux$747.
    dead port 2/2 on $mux $procmux$755.
    dead port 2/2 on $mux $procmux$764.
    dead port 2/2 on $mux $procmux$586.
    dead port 2/2 on $mux $procmux$774.
    dead port 2/2 on $mux $procmux$785.
    dead port 2/2 on $mux $procmux$797.
    dead port 2/2 on $mux $procmux$596.
    dead port 2/2 on $mux $procmux$810.
    dead port 2/2 on $mux $procmux$828.
    dead port 2/2 on $mux $procmux$830.
    dead port 2/2 on $mux $procmux$844.
    dead port 2/2 on $mux $procmux$607.
    dead port 2/2 on $mux $procmux$618.
    dead port 2/2 on $mux $procmux$629.
    dead port 2/2 on $mux $procmux$641.
    dead port 2/2 on $mux $procmux$510.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$878.
    dead port 2/2 on $mux $procmux$886.
    dead port 2/2 on $mux $procmux$895.
    dead port 1/2 on $mux $procmux$906.
    dead port 2/2 on $mux $procmux$908.
    dead port 2/2 on $mux $procmux$918.
    dead port 2/2 on $mux $procmux$871.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$212.
    dead port 2/2 on $mux $procmux$219.
    dead port 2/2 on $mux $procmux$227.
    dead port 2/2 on $mux $procmux$236.
    dead port 2/2 on $mux $procmux$204.
    dead port 2/2 on $mux $procmux$206.
    dead port 1/2 on $mux $procmux$269.
    dead port 2/2 on $mux $procmux$271.
    dead port 2/2 on $mux $procmux$277.
    dead port 2/2 on $mux $procmux$284.
    dead port 2/2 on $mux $procmux$292.
    dead port 1/2 on $mux $procmux$302.
    dead port 2/2 on $mux $procmux$304.
    dead port 2/2 on $mux $procmux$313.
    dead port 2/2 on $mux $procmux$323.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$442.
    dead port 2/2 on $mux $procmux$451.
    dead port 2/2 on $mux $procmux$453.
    dead port 2/2 on $mux $procmux$461.
    dead port 2/2 on $mux $procmux$471.
Removed 76 multiplexer ports.
<suppressed ~65 debug messages>

27.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    New ctrl vector for $pmux cell $procmux$696: $auto$opt_reduce.cc:134:opt_pmux$1322
    New ctrl vector for $pmux cell $procmux$710: $auto$opt_reduce.cc:134:opt_pmux$1324
    New ctrl vector for $pmux cell $procmux$717: { $auto$opt_reduce.cc:134:opt_pmux$1326 $procmux$537_CMP }
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    New ctrl vector for $pmux cell $procmux$863: $auto$opt_reduce.cc:134:opt_pmux$1328
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
    New ctrl vector for $pmux cell $procmux$251: $auto$opt_reduce.cc:134:opt_pmux$1330
    New ctrl vector for $pmux cell $procmux$245: $auto$opt_reduce.cc:134:opt_pmux$1332
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 6 changes.

27.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~27 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~6 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~3 debug messages>
Removed a total of 13 cells.

27.6.6. Executing OPT_DFF pass (perform DFF optimizations).

27.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 212 unused wires.
<suppressed ~11 debug messages>

27.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.9. Rerunning OPT passes. (Maybe there is more to do..)

27.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    New ctrl vector for $pmux cell $procmux$672: $auto$opt_reduce.cc:134:opt_pmux$1334
    New ctrl vector for $pmux cell $procmux$732: $auto$opt_reduce.cc:134:opt_pmux$1336
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    New ctrl vector for $pmux cell $procmux$921: { $procmux$909_CMP $procmux$860_CMP $procmux$879_CMP $auto$opt_reduce.cc:134:opt_pmux$1338 }
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
    New ctrl vector for $pmux cell $procmux$474: { $procmux$437_CMP \ser_en_out $procmux$435_CMP $auto$opt_reduce.cc:134:opt_pmux$1340 }
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 4 changes.

27.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.6.13. Executing OPT_DFF pass (perform DFF optimizations).

27.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.16. Rerunning OPT passes. (Maybe there is more to do..)

27.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.6.20. Executing OPT_DFF pass (perform DFF optimizations).

27.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.23. Finished OPT passes. (There is nothing left to do.)

27.7. Executing FSM pass (extract and optimize FSM).

27.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking sys_control_rx.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking sys_control_tx.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking uart_rx_fsm.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking uart_tx_fsm.current_state as FSM state register:
    Circuit seems to be self-resetting.

27.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

27.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

27.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

27.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

27.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

27.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27.8. Executing OPT pass (performing simple optimizations).

27.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [2]).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [1]).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [0]).
Adding EN signal on $procdff$1313 ($adff) from module data_synchronizer (D = \unsync_data_in, Q = \sync_data_out).
Adding EN signal on $procdff$1275 ($adff) from module deserializer (D = { \sampled_bit_in \register [7:1] }, Q = \register).
Adding EN signal on $procdff$1274 ($adff) from module edge_bit_counter (D = $0\edge_cnt_out[4:0], Q = \edge_cnt_out).
Adding EN signal on $procdff$1273 ($adff) from module edge_bit_counter (D = $0\bit_cnt_out[3:0], Q = \bit_cnt_out).
Adding EN signal on $procdff$1279 ($adff) from module parity_calc (D = $0\par_bit_out[0:0], Q = \par_bit_out).
Adding EN signal on $procdff$1276 ($adff) from module parity_check (D = \register [8:1], Q = \register [8:1]).
Handling D = Q on $auto$ff.cc:266:slice$1371 ($adffe) from module parity_check (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Adding EN signal on $procdff$1305 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[15]).
Adding EN signal on $procdff$1304 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[14]).
Adding EN signal on $procdff$1303 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[13]).
Adding EN signal on $procdff$1302 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[12]).
Adding EN signal on $procdff$1301 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[11]).
Adding EN signal on $procdff$1300 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[10]).
Adding EN signal on $procdff$1299 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[9]).
Adding EN signal on $procdff$1298 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[8]).
Adding EN signal on $procdff$1297 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[7]).
Adding EN signal on $procdff$1296 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[6]).
Adding EN signal on $procdff$1295 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[5]).
Adding EN signal on $procdff$1294 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[4]).
Adding EN signal on $procdff$1293 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[3]).
Adding EN signal on $procdff$1292 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[2]).
Adding EN signal on $procdff$1291 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[1]).
Adding EN signal on $procdff$1290 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[0]).
Adding EN signal on $procdff$1288 ($adff) from module reg_file (D = $procmux$1175_Y, Q = \rd_data_valid_out).
Adding EN signal on $procdff$1287 ($adff) from module reg_file (D = $4$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$76, Q = \rd_data_out).
Adding EN signal on $procdff$1281 ($adff) from module serializer (D = $0\int_reg[7:0], Q = \int_reg).
Adding EN signal on $procdff$1280 ($adff) from module serializer (D = $0\counter[2:0], Q = \counter).
Adding EN signal on $procdff$1284 ($adff) from module sys_control_rx (D = \uart_rx_data_in, Q = \rf_addr_reg).
Adding EN signal on $procdff$1283 ($adff) from module sys_control_rx (D = \rf_rd_data_in, Q = \uart_rf_send_data_out).
Adding EN signal on $procdff$1282 ($adff) from module sys_control_rx (D = \alu_data_in, Q = \uart_alu_send_data_out).
Adding EN signal on $procdff$1286 ($adff) from module sys_control_tx (D = \next_state, Q = \current_state).
Adding EN signal on $procdff$1271 ($adff) from module uart_rx_fsm (D = \next_state, Q = \current_state).
Adding EN signal on $procdff$1277 ($adff) from module uart_tx_fsm (D = $0\busy_out[0:0], Q = \busy_out).

27.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 50 unused cells and 48 unused wires.
<suppressed ~56 debug messages>

27.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~2 debug messages>
Optimizing module mux.
Optimizing module parity_calc.
<suppressed ~1 debug messages>
Optimizing module parity_check.
<suppressed ~5 debug messages>
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~2 debug messages>
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~1 debug messages>

27.8.9. Rerunning OPT passes. (Maybe there is more to do..)

27.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
<suppressed ~3 debug messages>
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
<suppressed ~3 debug messages>
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 2 cells.

27.8.13. Executing OPT_DFF pass (perform DFF optimizations).

27.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 1 unused cells and 6 unused wires.
<suppressed ~4 debug messages>

27.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.16. Rerunning OPT passes. (Maybe there is more to do..)

27.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.20. Executing OPT_DFF pass (perform DFF optimizations).

27.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.23. Finished OPT passes. (There is nothing left to do.)

27.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 7 bits (of 16) from port Y of cell alu.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35 ($add).
Removed top 7 bits (of 16) from port Y of cell alu.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36 ($sub).
Removed top 8 bits (of 16) from port Y of cell alu.$and$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:55$39 ($and).
Removed top 8 bits (of 16) from port Y of cell alu.$or$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:58$40 ($or).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:61$42 ($not).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:64$44 ($not).
Removed top 8 bits (of 16) from port Y of cell alu.$xor$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:67$45 ($xor).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:70$47 ($not).
Removed top 14 bits (of 16) from mux cell alu.$procmux$1191 ($mux).
Removed top 14 bits (of 16) from mux cell alu.$procmux$1203 ($mux).
Removed top 15 bits (of 16) from mux cell alu.$procmux$1216 ($mux).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1232_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1233_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1234_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1235_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1236_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1237_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$1238_CMP0 ($eq).
Removed top 15 bits (of 16) from wire alu.$3\alu_out_comp[15:0].
Removed top 14 bits (of 16) from wire alu.$4\alu_out_comp[15:0].
Removed top 14 bits (of 16) from wire alu.$5\alu_out_comp[15:0].
Removed top 7 bits (of 16) from wire alu.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35_Y.
Removed top 8 bits (of 16) from wire alu.$and$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:55$39_Y.
Removed top 8 bits (of 16) from wire alu.$or$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:58$40_Y.
Removed top 8 bits (of 16) from wire alu.$xor$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:67$45_Y.
Removed top 31 bits (of 32) from port B of cell clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
Removed top 27 bits (of 32) from port Y of cell clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
Removed top 28 bits (of 32) from port B of cell clk_divider.$le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28 ($le).
Removed top 31 bits (of 32) from mux cell clk_divider.$ternary$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$31 ($mux).
Removed top 27 bits (of 32) from wire clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24_Y.
Removed top 28 bits (of 32) from port A of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 31 bits (of 32) from port B of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 27 bits (of 32) from port Y of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 1 bits (of 5) from port B of cell data_sampling.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:20$152 ($eq).
Removed top 28 bits (of 32) from port A of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 31 bits (of 32) from port B of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 27 bits (of 32) from port Y of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 27 bits (of 32) from port B of cell data_sampling.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$155 ($eq).
Removed top 27 bits (of 32) from wire data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154_Y.
Removed top 24 bits (of 32) from mux cell deserializer.$ternary$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:25$139 ($mux).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
Removed top 27 bits (of 32) from port Y of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
Removed top 26 bits (of 32) from port Y of cell edge_bit_counter.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
Removed top 28 bits (of 32) from port Y of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
Removed top 1 bits (of 3) from port B of cell edge_bit_counter.$auto$opt_dff.cc:195:make_patterns_logic$1365 ($ne).
Removed top 27 bits (of 32) from wire edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142_Y.
Removed top 28 bits (of 32) from wire edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145_Y.
Removed top 1 bits (of 2) from port B of cell mux.$procmux$498_CMP0 ($eq).
Removed top 8 bits (of 9) from wire parity_check.register.
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1052_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1066_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1081_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1097_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell reg_file.$procmux$1114_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell reg_file.$procmux$1132_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell reg_file.$procmux$1151_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
Removed top 29 bits (of 32) from port Y of cell serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
Removed top 29 bits (of 32) from wire serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100_Y.
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$560_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$587_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$608_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sys_control_rx.$procmux$619_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sys_control_rx.$procmux$655_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$745 ($mux).
Removed top 3 bits (of 4) from mux cell sys_control_rx.$procmux$753 ($mux).
Removed top 1 bits (of 4) from mux cell sys_control_rx.$procmux$772 ($mux).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$783 ($mux).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$795 ($mux).
Removed top 3 bits (of 4) from mux cell sys_control_rx.$procmux$808 ($mux).
Removed top 4 bits (of 8) from FF cell sys_control_rx.$auto$ff.cc:266:slice$1435 ($adffe).
Removed top 2 bits (of 4) from wire sys_control_rx.$10\next_state[3:0].
Removed top 3 bits (of 4) from wire sys_control_rx.$4\next_state[3:0].
Removed top 2 bits (of 4) from wire sys_control_rx.$5\next_state[3:0].
Removed top 2 bits (of 4) from wire sys_control_rx.$6\next_state[3:0].
Removed top 4 bits (of 8) from wire sys_control_rx.rf_addr_reg.
Removed top 1 bits (of 3) from port B of cell sys_control_tx.$procmux$860_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell sys_control_tx.$procmux$861_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell sys_control_tx.$procmux$879_CMP0 ($eq).
Removed top 4 bits (of 8) from wire system_top.rf_addr.
Removed top 3 bits (of 4) from port B of cell uart_rx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:48$164 ($eq).
Removed top 28 bits (of 32) from port A of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 30 bits (of 32) from port B of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 27 bits (of 32) from port Y of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 27 bits (of 32) from port B of cell uart_rx_fsm.$gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186 ($gt).
Removed top 28 bits (of 32) from port B of cell uart_rx_fsm.$lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189 ($lt).
Removed top 31 bits (of 32) from port B of cell uart_rx_fsm.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
Removed top 26 bits (of 32) from port Y of cell uart_rx_fsm.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
Removed top 28 bits (of 32) from port A of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 30 bits (of 32) from port B of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 27 bits (of 32) from port Y of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 27 bits (of 32) from port B of cell uart_rx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$195 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_rx_fsm.$procmux$220_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_rx_fsm.$procmux$228_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_rx_fsm.$procmux$237_CMP0 ($eq).
Removed top 27 bits (of 32) from wire uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194_Y.
Removed top 27 bits (of 32) from wire uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185_Y.
Removed top 1 bits (of 3) from port B of cell uart_tx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:69$115 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_tx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:84$120 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_tx_fsm.$procmux$435_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_tx_fsm.$procmux$437_CMP0 ($eq).
Removed top 2 bits (of 3) from mux cell uart_tx_fsm.$procmux$440 ($mux).
Removed top 2 bits (of 3) from wire uart_tx_fsm.$2\next_state[2:0].
Removed top 1 bits (of 3) from wire uart_tx_fsm.next_state.

27.10. Executing PEEPOPT pass (run peephole optimizers).

27.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 24 unused wires.
<suppressed ~11 debug messages>

27.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35 ($add).
  creating $macc model for $mul$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:49$37 ($mul).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35.
  creating $macc cell for $mul$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:49$37: $auto$alumacc.cc:365:replace_macc$1488
  creating $alu model for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49 ($gt): new $alu
  creating $alu model for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:85$50 ($lt): merged with $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49.
  creating $alu model for $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:73$48 ($eq): merged with $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49.
  creating $alu cell for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49, $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:85$50, $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:73$48: $auto$alumacc.cc:485:replace_alu$1490
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35: $auto$alumacc.cc:485:replace_alu$1501
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36: $auto$alumacc.cc:485:replace_alu$1504
  created 3 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module bit_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clk_divider:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24.
  creating $alu model for $le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28 ($le): new $alu
  creating $alu cell for $le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28: $auto$alumacc.cc:485:replace_alu$1508
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24: $auto$alumacc.cc:485:replace_alu$1521
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clk_gate:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_sampling:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154: $auto$alumacc.cc:485:replace_alu$1524
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149: $auto$alumacc.cc:485:replace_alu$1527
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module deserializer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module edge_bit_counter:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142: $auto$alumacc.cc:485:replace_alu$1530
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145: $auto$alumacc.cc:485:replace_alu$1533
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143: $auto$alumacc.cc:485:replace_alu$1536
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module parity_calc:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module parity_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reg_file:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reset_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module serializer:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100: $auto$alumacc.cc:485:replace_alu$1539
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module stp_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module strt_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control_rx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control_tx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module system_top:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_rx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_rx_fsm:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194.
  creating $alu model for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186 ($gt): new $alu
  creating $alu model for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189 ($lt): new $alu
  creating $alu model for $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:60$174 ($eq): merged with $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189.
  creating $alu cell for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189, $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:60$174: $auto$alumacc.cc:485:replace_alu$1544
  creating $alu cell for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186: $auto$alumacc.cc:485:replace_alu$1551
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194: $auto$alumacc.cc:485:replace_alu$1556
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185: $auto$alumacc.cc:485:replace_alu$1559
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191: $auto$alumacc.cc:485:replace_alu$1562
  created 5 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_top:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_tx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_tx_fsm:
  created 0 $alu and 0 $macc cells.

27.13. Executing SHARE pass (SAT-based resource sharing).

27.14. Executing OPT pass (performing simple optimizations).

27.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~1 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~9 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 3 cells.

27.14.6. Executing OPT_DFF pass (perform DFF optimizations).

27.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 2 unused cells and 12 unused wires.
<suppressed ~6 debug messages>

27.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.9. Rerunning OPT passes. (Maybe there is more to do..)

27.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.14.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.16. Finished OPT passes. (There is nothing left to do.)

27.15. Executing MEMORY pass.

27.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

27.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

27.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

27.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

27.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

27.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

27.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

27.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

27.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.17. Executing OPT pass (performing simple optimizations).

27.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~20 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
<suppressed ~1 debug messages>
Optimizing module clk_gate.
Optimizing module data_sampling.
<suppressed ~1 debug messages>
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~4 debug messages>
Optimizing module mux.
<suppressed ~1 debug messages>
Optimizing module parity_calc.
<suppressed ~1 debug messages>
Optimizing module parity_check.
<suppressed ~3 debug messages>
Optimizing module reg_file.
<suppressed ~2 debug messages>
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~2 debug messages>
Optimizing module stp_check.
<suppressed ~2 debug messages>
Optimizing module strt_check.
<suppressed ~2 debug messages>
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~10 debug messages>
Optimizing module sys_control_tx.
<suppressed ~5 debug messages>
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~15 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~4 debug messages>

27.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.17.3. Executing OPT_DFF pass (perform DFF optimizations).

27.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 1 unused cells and 40 unused wires.
<suppressed ~14 debug messages>

27.17.5. Finished fast OPT passes.

27.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

27.19. Executing OPT pass (performing simple optimizations).

27.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
    Consolidated identical input bits for $mux cell $procmux$1191:
      Old ports: A=2'11, B=2'00, Y=$5\alu_out_comp[15:0]
      New ports: A=1'1, B=1'0, Y=$5\alu_out_comp[15:0] [0]
      New connections: $5\alu_out_comp[15:0] [1] = $5\alu_out_comp[15:0] [0]
    Consolidated identical input bits for $mux cell $procmux$1203:
      Old ports: A=2'10, B=2'00, Y=$4\alu_out_comp[15:0]
      New ports: A=1'1, B=1'0, Y=$4\alu_out_comp[15:0] [1]
      New connections: $4\alu_out_comp[15:0] [0] = 1'0
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    Consolidated identical input bits for $mux cell $procmux$738:
      Old ports: A=4'1010, B=4'0000, Y=$11\next_state[3:0]
      New ports: A=1'1, B=1'0, Y=$11\next_state[3:0] [1]
      New connections: { $11\next_state[3:0] [3:2] $11\next_state[3:0] [0] } = { $11\next_state[3:0] [1] 2'00 }
    Consolidated identical input bits for $mux cell $procmux$762:
      Old ports: A=4'0111, B=4'1000, Y=$8\next_state[3:0]
      New ports: A=2'01, B=2'10, Y={ $8\next_state[3:0] [3] $8\next_state[3:0] [0] }
      New connections: $8\next_state[3:0] [2:1] = { $8\next_state[3:0] [0] $8\next_state[3:0] [0] }
    Consolidated identical input bits for $mux cell $procmux$772:
      Old ports: A=3'110, B=3'000, Y=$7\next_state[3:0] [2:0]
      New ports: A=1'1, B=1'0, Y=$7\next_state[3:0] [1]
      New connections: { $7\next_state[3:0] [2] $7\next_state[3:0] [0] } = { $7\next_state[3:0] [1] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$795:
      Old ports: A=2'11, B=2'00, Y=$5\next_state[3:0]
      New ports: A=1'1, B=1'0, Y=$5\next_state[3:0] [0]
      New connections: $5\next_state[3:0] [1] = $5\next_state[3:0] [0]
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    Consolidated identical input bits for $mux cell $procmux$916:
      Old ports: A=3'010, B=3'001, Y=$2\next_state[2:0]
      New ports: A=2'10, B=2'01, Y=$2\next_state[2:0] [1:0]
      New connections: $2\next_state[2:0] [2] = 1'0
    New ctrl vector for $pmux cell $procmux$921: { $procmux$909_CMP $procmux$860_CMP $procmux$879_CMP }
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
    Consolidated identical input bits for $mux cell $procmux$275:
      Old ports: A=3'000, B=3'001, Y=$7\next_state[2:0]
      New ports: A=1'0, B=1'1, Y=$7\next_state[2:0] [0]
      New connections: $7\next_state[2:0] [2:1] = 2'00
    Consolidated identical input bits for $mux cell $procmux$311:
      Old ports: A=3'011, B=3'010, Y=$3\next_state[2:0]
      New ports: A=1'1, B=1'0, Y=$3\next_state[2:0] [0]
      New connections: $3\next_state[2:0] [2:1] = 2'01
    New ctrl vector for $pmux cell $procmux$326: { $procmux$324_CMP $procmux$237_CMP $auto$opt_reduce.cc:134:opt_pmux$1578 $procmux$207_CMP }
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
    Consolidated identical input bits for $mux cell $procmux$448:
      Old ports: A=3'100, B=3'011, Y=$4\next_state[2:0]
      New ports: A=2'10, B=2'01, Y={ $4\next_state[2:0] [2] $4\next_state[2:0] [0] }
      New connections: $4\next_state[2:0] [1] = $4\next_state[2:0] [0]
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 12 changes.

27.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.19.6. Executing OPT_SHARE pass.

27.19.7. Executing OPT_DFF pass (perform DFF optimizations).

27.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~3 debug messages>
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~2 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.10. Rerunning OPT passes. (Maybe there is more to do..)

27.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~3 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.19.14. Executing OPT_SHARE pass.

27.19.15. Executing OPT_DFF pass (perform DFF optimizations).

27.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

27.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.18. Rerunning OPT passes. (Maybe there is more to do..)

27.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.19.22. Executing OPT_SHARE pass.

27.19.23. Executing OPT_DFF pass (perform DFF optimizations).

27.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.26. Finished OPT passes. (There is nothing left to do.)

27.20. Executing TECHMAP pass (map to technology primitives).

27.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

27.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$bfceb922395790c0ce92e9f9b5b428d4fc72cc30\_90_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$332fab4e157f868977379756d21fa99887c3c6c4\_90_alu for cells of type $alu.
Using template $paramod$0ae6dcbc606d0267ec97d3ccf20343286af3366c\_90_alu for cells of type $alu.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using template $paramod$20d3ee62d72123142eb855d7ddafd835e31ba009\_90_pmux for cells of type $pmux.
Using template $paramod$4d45682f6d5f8751d24fc75184ef72226da353f7\_90_pmux for cells of type $pmux.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod$75a16668b548c3bac59647e2f0c7dad55b2b94b9\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_xor.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$943564b9366bbc392bf4bbc801aa0a2d7742a4e0\_90_alu for cells of type $alu.
Using template $paramod$dde52db7035cb02b3cc5e73865788532339e3bcb\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dlatch.
Using template $paramod$83dd457849c736323edf2edb15923eb27f99c683\_90_alu for cells of type $alu.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\_90_alu for cells of type $alu.
Using template $paramod$67686dad8c792aead4495d34957ca1f4c910d0ba\_90_div for cells of type $div.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add \data_a_in * \data_b_in (8x8 bits, unsigned)
Using template $paramod$e85bcdd999a9f7e1064fcb77207041270947b77a\_90_pmux for cells of type $pmux.
Using template $paramod$67686dad8c792aead4495d34957ca1f4c910d0ba\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000010000 for cells of type $__div_mod_u.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod$02488ff6fa51b28bbfa470bdd9b0e548b3357746\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$d66a711d7e97d14a7c7a9fd9e900c39b1fc36cfa\_90_alu for cells of type $alu.
Using template $paramod$8359f4ac8e08a95551ec17e9becbee696d87568d\_90_alu for cells of type $alu.
Using template $paramod$3e9f586ebf39197c9185418e155ec5725178e703\_90_alu for cells of type $alu.
Using template $paramod$99f84fe1e34117baf970301335fa146f92b93eb7\_90_alu for cells of type $alu.
Using template $paramod$10caef7eb223495dec7ca6c51abc18dbd379ce45\_90_alu for cells of type $alu.
Using template $paramod$6ae352d62dfc78ea1f63c7f3961ba142be4a2f93\_90_alu for cells of type $alu.
Using template $paramod$7bdc7d89ea9376c9c454fd05d9b64ca6288b61c9\_90_alu for cells of type $alu.
Using template $paramod$96a374a77d27fe2a5f65189ccd5c4d82c02f3e0c\_90_alu for cells of type $alu.
Using template $paramod$c01a73249af533291d6c07bc7dff8edfd9012ebf\_90_alu for cells of type $alu.
Using template $paramod$4dafc65fa46f14914da22e0fac43fee737cf5e98\_90_alu for cells of type $alu.
Using template $paramod$6514813ccfd0fbcd872b47be16e9bc3f005ba67f\_90_alu for cells of type $alu.
Using template $paramod$90cb621aa18d0bfc972ff6df82973fce6d62f25a\_90_alu for cells of type $alu.
Using template $paramod$28a6ec5648d14f65107108cc45dfc9433b8b29ab\_90_alu for cells of type $alu.
Using template $paramod$1b1e81b08462e7f621826ba0c290068af8e4e550\_90_alu for cells of type $alu.
Using template $paramod$1c5b0982e801b857faf786570d1281fe30bbf0dc\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
No more expansions possible.
<suppressed ~8829 debug messages>

27.21. Executing OPT pass (performing simple optimizations).

27.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~5360 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
<suppressed ~41 debug messages>
Optimizing module clk_gate.
Optimizing module data_sampling.
<suppressed ~59 debug messages>
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~87 debug messages>
Optimizing module mux.
<suppressed ~8 debug messages>
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
<suppressed ~60 debug messages>
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~21 debug messages>
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~128 debug messages>
Optimizing module sys_control_tx.
<suppressed ~36 debug messages>
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~167 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~38 debug messages>

27.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~7638 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
<suppressed ~21 debug messages>
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
<suppressed ~18 debug messages>
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
<suppressed ~12 debug messages>
Finding identical cells in module `\mux'.
<suppressed ~6 debug messages>
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~156 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
<suppressed ~12 debug messages>
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~144 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~15 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~66 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~12 debug messages>
Removed a total of 2700 cells.

27.21.3. Executing OPT_DFF pass (perform DFF optimizations).

27.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 371 unused cells and 5222 unused wires.
<suppressed ~383 debug messages>

27.21.5. Finished fast OPT passes.

27.22. Executing ABC pass (technology mapping using ABC).

27.22.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 2472 gates and 2494 wires to a netlist network with 21 inputs and 16 outputs.

27.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      183
ABC RESULTS:              NAND cells:       47
ABC RESULTS:              XNOR cells:      101
ABC RESULTS:               NOT cells:      109
ABC RESULTS:               AND cells:      110
ABC RESULTS:             ORNOT cells:       84
ABC RESULTS:               NOR cells:      171
ABC RESULTS:               XOR cells:      300
ABC RESULTS:                OR cells:      329
ABC RESULTS:            ANDNOT cells:      832
ABC RESULTS:        internal signals:     2457
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

27.22.2. Extracting gate netlist of module `\bit_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.3. Extracting gate netlist of module `\clk_divider' to `<abc-temp-dir>/input.blif'..
Extracted 61 gates and 74 wires to a netlist network with 11 inputs and 6 outputs.

27.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.3.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               XOR cells:        7
ABC RESULTS:                OR cells:       10
ABC RESULTS:            ANDNOT cells:       21
ABC RESULTS:        internal signals:       57
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        6
Removing temp directory.

27.22.4. Extracting gate netlist of module `\clk_gate' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

27.22.4.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.5. Extracting gate netlist of module `\data_sampling' to `<abc-temp-dir>/input.blif'..
Extracted 63 gates and 76 wires to a netlist network with 13 inputs and 4 outputs.

27.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.5.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        5
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       16
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:            ANDNOT cells:       10
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:       16
ABC RESULTS:        internal signals:       59
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        4
Removing temp directory.

27.22.6. Extracting gate netlist of module `\data_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

27.22.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.6.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.7. Extracting gate netlist of module `\deserializer' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 18 wires to a netlist network with 9 inputs and 8 outputs.

27.22.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        8
Removing temp directory.

27.22.8. Extracting gate netlist of module `\edge_bit_counter' to `<abc-temp-dir>/input.blif'..
Extracted 66 gates and 83 wires to a netlist network with 16 inputs and 11 outputs.

27.22.8.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.8.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:               NOT cells:        4
ABC RESULTS:                OR cells:       11
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               XOR cells:       12
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:        internal signals:       56
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       11
Removing temp directory.

27.22.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 14 gates and 19 wires to a netlist network with 4 inputs and 1 outputs.

27.22.9.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.9.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.10. Extracting gate netlist of module `\parity_calc' to `<abc-temp-dir>/input.blif'..
Extracted 13 gates and 23 wires to a netlist network with 10 inputs and 2 outputs.

27.22.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.10.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:        5
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        2
Removing temp directory.

27.22.11. Extracting gate netlist of module `\parity_check' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 6 wires to a netlist network with 3 inputs and 1 outputs.

27.22.11.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.11.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.12. Extracting gate netlist of module `\reg_file' to `<abc-temp-dir>/input.blif'..
Extracted 320 gates and 454 wires to a netlist network with 134 inputs and 27 outputs.

27.22.12.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.12.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:               AND cells:        2
ABC RESULTS:              NAND cells:        8
ABC RESULTS:            ANDNOT cells:      142
ABC RESULTS:                OR cells:      133
ABC RESULTS:               MUX cells:        8
ABC RESULTS:        internal signals:      293
ABC RESULTS:           input signals:      134
ABC RESULTS:          output signals:       27
Removing temp directory.

27.22.13. Extracting gate netlist of module `\reset_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.14. Extracting gate netlist of module `\serializer' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 46 wires to a netlist network with 21 inputs and 14 outputs.

27.22.14.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.14.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:               MUX cells:        7
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       14
Removing temp directory.

27.22.15. Extracting gate netlist of module `\stp_check' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

27.22.15.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.15.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.16. Extracting gate netlist of module `\strt_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

27.22.16.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.16.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.17. Extracting gate netlist of module `\sys_control' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.18. Extracting gate netlist of module `\sys_control_rx' to `<abc-temp-dir>/input.blif'..
Extracted 158 gates and 178 wires to a netlist network with 19 inputs and 27 outputs.

27.22.18.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.18.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               MUX cells:        2
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              NAND cells:        7
ABC RESULTS:                OR cells:       35
ABC RESULTS:               NOR cells:       10
ABC RESULTS:               AND cells:        4
ABC RESULTS:            ANDNOT cells:       58
ABC RESULTS:        internal signals:      132
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       27
Removing temp directory.

27.22.19. Extracting gate netlist of module `\sys_control_tx' to `<abc-temp-dir>/input.blif'..
Extracted 88 gates and 119 wires to a netlist network with 30 inputs and 13 outputs.

27.22.19.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.19.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              NAND cells:        2
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:               NOR cells:        3
ABC RESULTS:            ANDNOT cells:       51
ABC RESULTS:        internal signals:       76
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       13
Removing temp directory.

27.22.20. Extracting gate netlist of module `\system_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.21. Extracting gate netlist of module `\uart_rx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.22. Extracting gate netlist of module `\uart_rx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 163 gates and 186 wires to a netlist network with 22 inputs and 8 outputs.

27.22.22.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.22.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        3
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:               NOT cells:        9
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               NOR cells:        6
ABC RESULTS:               AND cells:        4
ABC RESULTS:               XOR cells:       20
ABC RESULTS:                OR cells:       31
ABC RESULTS:            ANDNOT cells:       43
ABC RESULTS:        internal signals:      156
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        8
Removing temp directory.

27.22.23. Extracting gate netlist of module `\uart_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.24. Extracting gate netlist of module `\uart_tx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.25. Extracting gate netlist of module `\uart_tx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 58 wires to a netlist network with 6 inputs and 8 outputs.

27.22.25.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.25.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               NOR cells:        3
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:            ANDNOT cells:       20
ABC RESULTS:        internal signals:       44
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        8
Removing temp directory.

27.23. Executing OPT pass (performing simple optimizations).

27.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~1 debug messages>
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~54 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~3 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~3 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 20 cells.

27.23.3. Executing OPT_DFF pass (perform DFF optimizations).

27.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1781 unused wires.
<suppressed ~18 debug messages>

27.23.5. Finished fast OPT passes.

27.24. Executing HIERARCHY pass (managing design hierarchy).

27.24.1. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \alu
Used module:     \bit_synchronizer
Used module:     \clk_divider
Used module:     \clk_gate
Used module:     \data_synchronizer
Used module:     \reg_file
Used module:     \reset_synchronizer
Used module:     \sys_control
Used module:         \sys_control_rx
Used module:         \sys_control_tx
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \data_sampling
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \parity_check
Used module:             \stp_check
Used module:             \strt_check
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \parity_calc
Used module:             \serializer
Used module:             \uart_tx_fsm

27.24.2. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \alu
Used module:     \bit_synchronizer
Used module:     \clk_divider
Used module:     \clk_gate
Used module:     \data_synchronizer
Used module:     \reg_file
Used module:     \reset_synchronizer
Used module:     \sys_control
Used module:         \sys_control_rx
Used module:         \sys_control_tx
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \data_sampling
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \parity_check
Used module:             \stp_check
Used module:             \strt_check
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \parity_calc
Used module:             \serializer
Used module:             \uart_tx_fsm
Removed 0 unused modules.

27.25. Printing statistics.

=== alu ===

   Number of wires:               2242
   Number of wire bits:           2289
   Number of public wires:          10
   Number of public wire bits:      57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2265
     $_ANDNOT_                     818
     $_AND_                        110
     $_DFF_PN0_                     17
     $_MUX_                        183
     $_NAND_                        47
     $_NOR_                        169
     $_NOT_                        109
     $_ORNOT_                       84
     $_OR_                         327
     $_XNOR_                       101
     $_XOR_                        300

=== bit_synchronizer ===

   Number of wires:                  5
   Number of wire bits:              6
   Number of public wires:           5
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_PN0_                      3

=== clk_divider ===

   Number of wires:                 54
   Number of wire bits:             66
   Number of public wires:           6
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 58
     $_ANDNOT_                      21
     $_AND_                          2
     $_DFF_PN0_                      5
     $_NAND_                         3
     $_NOT_                          1
     $_ORNOT_                        3
     $_OR_                          10
     $_XNOR_                         6
     $_XOR_                          7

=== clk_gate ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_AND_                          1
     $_DLATCH_N_                     1

=== data_sampling ===

   Number of wires:                 63
   Number of wire bits:             73
   Number of public wires:           8
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 59
     $_ANDNOT_                      10
     $_AND_                          2
     $_DFFE_PN0P_                    3
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                          5
     $_ORNOT_                        1
     $_OR_                          16
     $_XNOR_                         2
     $_XOR_                         16

=== data_synchronizer ===

   Number of wires:                  8
   Number of wire bits:             24
   Number of public wires:           8
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $_ANDNOT_                       1
     $_DFFE_PN0P_                    8
     $_DFF_PN0_                      4

=== deserializer ===

   Number of wires:                  7
   Number of wire bits:             21
   Number of public wires:           7
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_AND_                          8
     $_DFFE_PN0P_                    8

=== edge_bit_counter ===

   Number of wires:                 56
   Number of wire bits:             74
   Number of public wires:           7
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 65
     $_ANDNOT_                      17
     $_AND_                          2
     $_DFFE_PN0P_                    9
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          4
     $_ORNOT_                        1
     $_OR_                          11
     $_XNOR_                         4
     $_XOR_                         12

=== mux ===

   Number of wires:                 10
   Number of wire bits:             11
   Number of public wires:           4
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $_ANDNOT_                       2
     $_NAND_                         1
     $_NOR_                          1
     $_ORNOT_                        1
     $_OR_                           2

=== parity_calc ===

   Number of wires:                 17
   Number of wire bits:             24
   Number of public wires:           6
   Number of public wire bits:      13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $_ANDNOT_                       1
     $_AND_                          1
     $_DFFE_PN0P_                    1
     $_OR_                           1
     $_XNOR_                         3
     $_XOR_                          5

=== parity_check ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_ANDNOT_                       1
     $_DFF_PN0_                      1
     $_XNOR_                         1

=== reg_file ===

   Number of wires:                317
   Number of wire bits:            481
   Number of public wires:          28
   Number of public wire bits:     185
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                433
     $_ANDNOT_                     141
     $_AND_                          2
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                  133
     $_DFFE_PN1P_                    3
     $_MUX_                          8
     $_NAND_                         8
     $_ORNOT_                        4
     $_OR_                         133

=== reset_synchronizer ===

   Number of wires:                  4
   Number of wire bits:              6
   Number of public wires:           4
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_PN0_                      3

=== serializer ===

   Number of wires:                 18
   Number of wire bits:             43
   Number of public wires:          10
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 29
     $_ANDNOT_                       3
     $_AND_                          2
     $_DFFE_PN0P_                   11
     $_MUX_                          7
     $_NAND_                         1
     $_ORNOT_                        2
     $_OR_                           1
     $_XNOR_                         1
     $_XOR_                          1

=== stp_check ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_ANDNOT_                       1

=== strt_check ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_AND_                          1

=== sys_control ===

   Number of wires:                 23
   Number of wire bits:             94
   Number of public wires:          23
   Number of public wire bits:      94
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     sys_control_rx                  1
     sys_control_tx                  1

=== sys_control_rx ===

   Number of wires:                126
   Number of wire bits:            199
   Number of public wires:          26
   Number of public wire bits:      99
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                159
     $_ANDNOT_                      58
     $_AND_                          4
     $_DFFE_PN0P_                   28
     $_DFF_PN0_                      4
     $_MUX_                          2
     $_NAND_                         7
     $_NOR_                         10
     $_NOT_                          1
     $_ORNOT_                       10
     $_OR_                          35

=== sys_control_tx ===

   Number of wires:                 78
   Number of wire bits:            111
   Number of public wires:          11
   Number of public wire bits:      44
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                      51
     $_DFFE_PN0P_                    3
     $_MUX_                          2
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                       12
     $_OR_                           7

=== system_top ===

   Number of wires:                 35
   Number of wire bits:            126
   Number of public wires:          35
   Number of public wire bits:     126
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     alu                             1
     bit_synchronizer                1
     clk_divider                     1
     clk_gate                        1
     data_synchronizer               2
     reg_file                        1
     reset_synchronizer              2
     sys_control                     1
     uart_top                        1

=== uart_rx ===

   Number of wires:                 20
   Number of wire bits:             38
   Number of public wires:          20
   Number of public wire bits:      38
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     data_sampling                   1
     deserializer                    1
     edge_bit_counter                1
     parity_check                    1
     stp_check                       1
     strt_check                      1
     uart_rx_fsm                     1

=== uart_rx_fsm ===

   Number of wires:                137
   Number of wire bits:            152
   Number of public wires:          19
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                128
     $_ANDNOT_                      42
     $_AND_                          4
     $_DFFE_PN0P_                    3
     $_MUX_                          1
     $_NAND_                         3
     $_NOR_                          6
     $_NOT_                          9
     $_ORNOT_                        6
     $_OR_                          31
     $_XNOR_                         3
     $_XOR_                         20

=== uart_top ===

   Number of wires:                 13
   Number of wire bits:             31
   Number of public wires:          13
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     uart_rx                         1
     uart_tx                         1

=== uart_tx ===

   Number of wires:                 13
   Number of wire bits:             21
   Number of public wires:          13
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     mux                             1
     parity_calc                     1
     serializer                      1
     uart_tx_fsm                     1

=== uart_tx_fsm ===

   Number of wires:                 45
   Number of wire bits:             51
   Number of public wires:          10
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     $_ANDNOT_                      20
     $_DFFE_PN0P_                    1
     $_DFF_PN0_                      3
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                        6
     $_OR_                           7

=== design hierarchy ===

   system_top                        1
     alu                             1
     bit_synchronizer                1
     clk_divider                     1
     clk_gate                        1
     data_synchronizer               2
     reg_file                        1
     reset_synchronizer              2
     sys_control                     1
       sys_control_rx                1
       sys_control_tx                1
     uart_top                        1
       uart_rx                       1
         data_sampling               1
         deserializer                1
         edge_bit_counter            1
         parity_check                1
         stp_check                   1
         strt_check                  1
         uart_rx_fsm                 1
       uart_tx                       1
         mux                         1
         parity_calc                 1
         serializer                  1
         uart_tx_fsm                 1

   Number of wires:               3321
   Number of wire bits:           3989
   Number of public wires:         302
   Number of public wire bits:     941
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3399
     $_ANDNOT_                    1188
     $_AND_                        139
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                  216
     $_DFFE_PN1P_                    3
     $_DFF_PN0_                     47
     $_DLATCH_N_                     1
     $_MUX_                        203
     $_NAND_                        78
     $_NOR_                        197
     $_NOT_                        133
     $_ORNOT_                      130
     $_OR_                         581
     $_XNOR_                       121
     $_XOR_                        361

27.26. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

28. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

28.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alu':
  mapped 17 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\bit_synchronizer':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\clk_divider':
  mapped 5 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\clk_gate':
Mapping DFF cells in module `\data_sampling':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\data_synchronizer':
  mapped 12 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\deserializer':
  mapped 8 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\edge_bit_counter':
  mapped 9 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\mux':
Mapping DFF cells in module `\parity_calc':
  mapped 1 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\parity_check':
  mapped 1 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\reg_file':
  mapped 137 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\reset_synchronizer':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\serializer':
  mapped 11 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\stp_check':
Mapping DFF cells in module `\strt_check':
Mapping DFF cells in module `\sys_control':
Mapping DFF cells in module `\sys_control_rx':
  mapped 32 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\sys_control_tx':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\system_top':
Mapping DFF cells in module `\uart_rx':
Mapping DFF cells in module `\uart_rx_fsm':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\uart_top':
Mapping DFF cells in module `\uart_tx':
Mapping DFF cells in module `\uart_tx_fsm':
  mapped 4 $_DFFSR_PNN_ cells to \DFFSR cells.

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

29.6. Executing OPT_DFF pass (perform DFF optimizations).

29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

29.9. Finished OPT passes. (There is nothing left to do.)

30. Executing ABC pass (technology mapping using ABC).

30.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 2248 gates and 2269 wires to a netlist network with 21 inputs and 16 outputs.

30.1.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.1.2. Re-integrating ABC results.
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:           AOI22X1 cells:       15
ABC RESULTS:            MUX2X1 cells:        1
ABC RESULTS:            NOR3X1 cells:       12
ABC RESULTS:            AND2X2 cells:       36
ABC RESULTS:             OR2X2 cells:       20
ABC RESULTS:           XNOR2X1 cells:       34
ABC RESULTS:            NOR2X1 cells:      200
ABC RESULTS:           NAND3X1 cells:       93
ABC RESULTS:            XOR2X1 cells:       21
ABC RESULTS:             INVX1 cells:      174
ABC RESULTS:           OAI21X1 cells:      264
ABC RESULTS:           NAND2X1 cells:      162
ABC RESULTS:           AOI21X1 cells:      117
ABC RESULTS:        internal signals:     2232
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

30.2. Extracting gate netlist of module `\bit_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.3. Extracting gate netlist of module `\clk_divider' to `<abc-temp-dir>/input.blif'..
Extracted 53 gates and 64 wires to a netlist network with 11 inputs and 6 outputs.

30.3.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.3.2. Re-integrating ABC results.
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:            XOR2X1 cells:        2
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:           NAND3X1 cells:        4
ABC RESULTS:           AOI21X1 cells:        8
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           XNOR2X1 cells:        4
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:           OAI21X1 cells:        5
ABC RESULTS:            NOR2X1 cells:        6
ABC RESULTS:        internal signals:       47
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        6
Removing temp directory.

30.4. Extracting gate netlist of module `\clk_gate' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

30.4.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

30.5. Extracting gate netlist of module `\data_sampling' to `<abc-temp-dir>/input.blif'..
Extracted 59 gates and 73 wires to a netlist network with 14 inputs and 4 outputs.

30.5.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.5.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            XOR2X1 cells:        3
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:            NOR2X1 cells:        9
ABC RESULTS:            NOR3X1 cells:        3
ABC RESULTS:             OR2X2 cells:        5
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:           XNOR2X1 cells:        3
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:           NAND3X1 cells:        8
ABC RESULTS:           NAND2X1 cells:       12
ABC RESULTS:           OAI21X1 cells:       10
ABC RESULTS:        internal signals:       55
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        4
Removing temp directory.

30.6. Extracting gate netlist of module `\data_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 9 gates and 27 wires to a netlist network with 18 inputs and 9 outputs.

30.6.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.6.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        2
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:           NAND3X1 cells:        8
ABC RESULTS:           NAND2X1 cells:        8
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       18
ABC RESULTS:          output signals:        9
Removing temp directory.

30.7. Extracting gate netlist of module `\deserializer' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 27 wires to a netlist network with 11 inputs and 16 outputs.

30.7.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.7.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:            NOR2X1 cells:        8
ABC RESULTS:           NAND2X1 cells:        8
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:       16
Removing temp directory.

30.8. Extracting gate netlist of module `\edge_bit_counter' to `<abc-temp-dir>/input.blif'..
Extracted 65 gates and 81 wires to a netlist network with 16 inputs and 9 outputs.

30.8.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.8.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:            NOR3X1 cells:        2
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:             INVX1 cells:       17
ABC RESULTS:           NAND3X1 cells:       14
ABC RESULTS:           OAI21X1 cells:       13
ABC RESULTS:           NAND2X1 cells:       13
ABC RESULTS:            NOR2X1 cells:       11
ABC RESULTS:           XNOR2X1 cells:        5
ABC RESULTS:           OAI22X1 cells:        7
ABC RESULTS:        internal signals:       56
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

30.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 7 gates and 11 wires to a netlist network with 4 inputs and 1 outputs.

30.9.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.9.2. Re-integrating ABC results.
ABC RESULTS:           NAND3X1 cells:        1
ABC RESULTS:             INVX1 cells:        2
ABC RESULTS:           OAI21X1 cells:        1
ABC RESULTS:           NAND2X1 cells:        1
ABC RESULTS:        internal signals:        6
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

30.10. Extracting gate netlist of module `\parity_calc' to `<abc-temp-dir>/input.blif'..
Extracted 12 gates and 23 wires to a netlist network with 11 inputs and 1 outputs.

30.10.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.10.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:        3
ABC RESULTS:           NAND3X1 cells:        4
ABC RESULTS:           XNOR2X1 cells:        5
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        2
ABC RESULTS:           NAND2X1 cells:        6
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        1
Removing temp directory.

30.11. Extracting gate netlist of module `\parity_check' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 5 wires to a netlist network with 3 inputs and 1 outputs.

30.11.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.11.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

30.12. Extracting gate netlist of module `\reg_file' to `<abc-temp-dir>/input.blif'..
Extracted 433 gates and 584 wires to a netlist network with 151 inputs and 137 outputs.

30.12.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.12.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:             INVX1 cells:       53
ABC RESULTS:           AOI22X1 cells:       22
ABC RESULTS:           NAND3X1 cells:       32
ABC RESULTS:            NOR3X1 cells:       21
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:            NOR2X1 cells:       64
ABC RESULTS:           AOI21X1 cells:       48
ABC RESULTS:           NAND2X1 cells:      130
ABC RESULTS:           OAI21X1 cells:      133
ABC RESULTS:        internal signals:      296
ABC RESULTS:           input signals:      151
ABC RESULTS:          output signals:      137
Removing temp directory.

30.13. Extracting gate netlist of module `\reset_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.14. Extracting gate netlist of module `\serializer' to `<abc-temp-dir>/input.blif'..
Extracted 29 gates and 51 wires to a netlist network with 22 inputs and 12 outputs.

30.14.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.14.2. Re-integrating ABC results.
ABC RESULTS:           NAND2X1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:           AOI22X1 cells:        7
ABC RESULTS:            NOR3X1 cells:        7
ABC RESULTS:           OAI22X1 cells:        7
ABC RESULTS:             INVX1 cells:       13
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:           OAI21X1 cells:        4
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:       12
Removing temp directory.

30.15. Extracting gate netlist of module `\stp_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

30.15.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.15.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

30.16. Extracting gate netlist of module `\strt_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

30.16.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.16.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

30.17. Extracting gate netlist of module `\sys_control' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.18. Extracting gate netlist of module `\sys_control_rx' to `<abc-temp-dir>/input.blif'..
Extracted 155 gates and 222 wires to a netlist network with 67 inputs and 54 outputs.

30.18.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.18.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:            AND2X2 cells:        5
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:            NOR3X1 cells:        7
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:           AOI21X1 cells:        6
ABC RESULTS:           NAND3X1 cells:        9
ABC RESULTS:            NOR2X1 cells:       32
ABC RESULTS:            MUX2X1 cells:        4
ABC RESULTS:             INVX1 cells:       45
ABC RESULTS:           NAND2X1 cells:       44
ABC RESULTS:           OAI21X1 cells:       28
ABC RESULTS:        internal signals:      101
ABC RESULTS:           input signals:       67
ABC RESULTS:          output signals:       54
Removing temp directory.

30.19. Extracting gate netlist of module `\sys_control_tx' to `<abc-temp-dir>/input.blif'..
Extracted 82 gates and 112 wires to a netlist network with 30 inputs and 12 outputs.

30.19.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.19.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        4
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:           NAND3X1 cells:       17
ABC RESULTS:           NAND2X1 cells:       32
ABC RESULTS:        internal signals:       70
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       12
Removing temp directory.

30.20. Extracting gate netlist of module `\system_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.21. Extracting gate netlist of module `\uart_rx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.22. Extracting gate netlist of module `\uart_rx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 128 gates and 150 wires to a netlist network with 22 inputs and 7 outputs.

30.22.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.22.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:            MUX2X1 cells:        1
ABC RESULTS:           AOI22X1 cells:        3
ABC RESULTS:           OAI22X1 cells:        3
ABC RESULTS:           NAND2X1 cells:       16
ABC RESULTS:            AND2X2 cells:        7
ABC RESULTS:             OR2X2 cells:        4
ABC RESULTS:            NOR2X1 cells:       27
ABC RESULTS:             INVX1 cells:       20
ABC RESULTS:           AOI21X1 cells:       13
ABC RESULTS:           NAND3X1 cells:       12
ABC RESULTS:           OAI21X1 cells:       23
ABC RESULTS:        internal signals:      121
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        7
Removing temp directory.

30.23. Extracting gate netlist of module `\uart_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.24. Extracting gate netlist of module `\uart_tx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.25. Extracting gate netlist of module `\uart_tx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 41 gates and 48 wires to a netlist network with 7 inputs and 7 outputs.

30.25.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

30.25.2. Re-integrating ABC results.
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        7
ABC RESULTS:           OAI21X1 cells:        6
ABC RESULTS:           NAND2X1 cells:        5
ABC RESULTS:        internal signals:       34
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        7
Removing temp directory.

31. Executing FLATTEN pass (flatten design).
Deleting now unused module alu.
Deleting now unused module bit_synchronizer.
Deleting now unused module clk_divider.
Deleting now unused module clk_gate.
Deleting now unused module data_sampling.
Deleting now unused module data_synchronizer.
Deleting now unused module deserializer.
Deleting now unused module edge_bit_counter.
Deleting now unused module mux.
Deleting now unused module parity_calc.
Deleting now unused module parity_check.
Deleting now unused module reg_file.
Deleting now unused module reset_synchronizer.
Deleting now unused module serializer.
Deleting now unused module stp_check.
Deleting now unused module strt_check.
Deleting now unused module sys_control.
Deleting now unused module sys_control_rx.
Deleting now unused module sys_control_tx.
Deleting now unused module uart_rx.
Deleting now unused module uart_rx_fsm.
Deleting now unused module uart_top.
Deleting now unused module uart_tx.
Deleting now unused module uart_tx_fsm.
<suppressed ~26 debug messages>

32. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 3966 unused wires.

33. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port system_top.ref_clk: Missing option -inpad.
Don't map input port system_top.reset_n: Missing option -inpad.
Don't map input port system_top.rx_in: Missing option -inpad.
Mapping port system_top.tx_out using BUFX2.
Don't map input port system_top.uart_clk: Missing option -inpad.

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module system_top.

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system_top'.
Removed a total of 0 cells.

34.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

34.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \system_top.
Performed a total of 0 changes.

34.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system_top'.
Removed a total of 0 cells.

34.6. Executing OPT_DFF pass (perform DFF optimizations).

34.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \system_top..

34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module system_top.

34.9. Finished OPT passes. (There is nothing left to do.)

35. Executing BLIF backend.

36. Printing statistics.

=== system_top ===

   Number of wires:               2472
   Number of wire bits:           2749
   Number of public wires:        2472
   Number of public wire bits:    2749
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2733
     $_DLATCH_N_                     1
     AND2X2                         60
     AOI21X1                       206
     AOI22X1                        53
     BUFX2                           1
     DFFSR                         267
     INVX1                         376
     MUX2X1                          6
     NAND2X1                       457
     NAND3X1                       215
     NOR2X1                        368
     NOR3X1                         55
     OAI21X1                       521
     OAI22X1                        30
     OR2X2                          38
     XNOR2X1                        52
     XOR2X1                         27

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: ec85467b8f, CPU: user 4.65s system 0.19s, MEM: 87.82 MB peak
Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)
Time spent: 36% 2x abc (2 sec), 19% 68x opt_expr (1 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)


-- Executing script file `synth/synth.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/system_top.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/system_top.v' to AST representation.
Generating RTLIL representation for module `\system_top'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\bit_synchronizer'.
Warning: Replacing memory \reg_file with list of registers. See /home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:17
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\reset_synchronizer'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\data_synchronizer'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v' to AST representation.
Generating RTLIL representation for module `\clk_gate'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v' to AST representation.
Generating RTLIL representation for module `\clk_divider'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_top.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_top.v' to AST representation.
Generating RTLIL representation for module `\uart_top'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v' to AST representation.
Generating RTLIL representation for module `\reg_file'.
Warning: Replacing memory \mem with list of registers. See /home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:33
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control.v' to AST representation.
Generating RTLIL representation for module `\sys_control'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v' to AST representation.
Generating RTLIL representation for module `\sys_control_tx'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v' to AST representation.
Generating RTLIL representation for module `\sys_control_rx'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx.v' to AST representation.
Generating RTLIL representation for module `\uart_rx'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx.v' to AST representation.
Generating RTLIL representation for module `\uart_tx'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v' to AST representation.
Generating RTLIL representation for module `\mux'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v' to AST representation.
Generating RTLIL representation for module `\serializer'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v' to AST representation.
Generating RTLIL representation for module `\parity_calc'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v' to AST representation.
Generating RTLIL representation for module `\uart_tx_fsm'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v' to AST representation.
Generating RTLIL representation for module `\stp_check'.
Successfully finished Verilog frontend.

21. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v' to AST representation.
Generating RTLIL representation for module `\strt_check'.
Successfully finished Verilog frontend.

22. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v' to AST representation.
Generating RTLIL representation for module `\parity_check'.
Successfully finished Verilog frontend.

23. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v' to AST representation.
Generating RTLIL representation for module `\deserializer'.
Successfully finished Verilog frontend.

24. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v' to AST representation.
Generating RTLIL representation for module `\edge_bit_counter'.
Successfully finished Verilog frontend.

25. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v' to AST representation.
Generating RTLIL representation for module `\data_sampling'.
Successfully finished Verilog frontend.

26. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v' to AST representation.
Generating RTLIL representation for module `\uart_rx_fsm'.
Successfully finished Verilog frontend.

27. Executing SYNTH pass.

27.1. Executing HIERARCHY pass (managing design hierarchy).

27.1.1. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \bit_synchronizer
Used module:     \reset_synchronizer
Used module:     \data_synchronizer
Used module:     \clk_gate
Used module:     \clk_divider
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \stp_check
Used module:             \strt_check
Used module:             \parity_check
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \data_sampling
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \serializer
Used module:             \parity_calc
Used module:             \uart_tx_fsm
Used module:     \alu
Used module:     \reg_file
Used module:     \sys_control
Used module:         \sys_control_tx
Used module:         \sys_control_rx

27.1.2. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \bit_synchronizer
Used module:     \reset_synchronizer
Used module:     \data_synchronizer
Used module:     \clk_gate
Used module:     \clk_divider
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \stp_check
Used module:             \strt_check
Used module:             \parity_check
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \data_sampling
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \serializer
Used module:             \parity_calc
Used module:             \uart_tx_fsm
Used module:     \alu
Used module:     \reg_file
Used module:     \sys_control
Used module:         \sys_control_tx
Used module:         \sys_control_rx
Removed 0 unused modules.
Warning: Resizing cell port system_top.reg_file_inst.addr_in from 8 bits to 4 bits.
Warning: Resizing cell port system_top.sys_control_inst.rf_addr_out from 8 bits to 4 bits.

27.2. Executing PROC pass (convert processes to netlists).

27.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 31 empty switches in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Cleaned up 31 empty switches.

27.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 6 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183 in module uart_rx_fsm.
Marked 8 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162 in module uart_rx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160 in module uart_rx_fsm.
Marked 3 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146 in module data_sampling.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140 in module edge_bit_counter.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136 in module deserializer.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130 in module parity_check.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128 in module parity_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126 in module strt_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125 in module stp_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117 in module uart_tx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116 in module uart_tx_fsm.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113 in module uart_tx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111 in module uart_tx_fsm.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102 in module parity_calc.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98 in module serializer.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93 in module serializer.
Removed 1 dead cases from process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92 in module mux.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92 in module mux.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86 in module sys_control_rx.
Marked 9 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85 in module sys_control_rx.
Marked 11 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81 in module sys_control_tx.
Marked 7 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79 in module sys_control_tx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77 in module sys_control_tx.
Removed 1 dead cases from process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56 in module reg_file.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56 in module reg_file.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34 in module alu.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32 in module alu.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21 in module clk_divider.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18 in module clk_gate.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8 in module reset_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4 in module bit_synchronizer.
Removed a total of 2 dead cases.

27.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 12 redundant assignments.
Promoted 41 assignments to connections.

27.2.4. Executing PROC_INIT pass (extract init attributes).

27.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
Found async reset \reset_n in `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Found async reset \reset_n in `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Found async reset \reset_n in `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Found async reset \reset_n in `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
Found async reset \reset_n in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Found async reset \reset_n in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
Found async reset \reset_n in `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Found async reset \reset_n in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Found async reset \reset_n in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
Found async reset \reset_n in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
Found async reset \reset_n in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Found async reset \reset_n in `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
Found async reset \reset_n in `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
Found async reset \reset_n in `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
Found async reset \reset_n in `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.

27.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~91 debug messages>

27.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
     1/10: $3\data_valid_out[0:0]
     2/10: $2\data_valid_out[0:0]
     3/10: $3\deser_en_out[0:0]
     4/10: $2\deser_en_out[0:0]
     5/10: $2\strt_chk_en_out[0:0]
     6/10: $1\strt_chk_en_out[0:0]
     7/10: $1\counter_en_out[0:0]
     8/10: $1\data_sample_en_out[0:0]
     9/10: $1\deser_en_out[0:0]
    10/10: $1\data_valid_out[0:0]
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
     1/8: $8\next_state[2:0]
     2/8: $7\next_state[2:0]
     3/8: $6\next_state[2:0]
     4/8: $5\next_state[2:0]
     5/8: $4\next_state[2:0]
     6/8: $3\next_state[2:0]
     7/8: $2\next_state[2:0]
     8/8: $1\next_state[2:0]
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
     1/3: $0\register[2:0] [2]
     2/3: $0\register[2:0] [1]
     3/3: $0\register[2:0] [0]
Creating decoders for process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
     1/2: $0\edge_cnt_out[4:0]
     2/2: $0\bit_cnt_out[3:0]
Creating decoders for process `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
     1/1: $0\register[7:0]
Creating decoders for process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
     1/5: $5\par_err_out[0:0]
     2/5: $4\par_err_out[0:0]
     3/5: $3\par_err_out[0:0]
     4/5: $2\par_err_out[0:0]
     5/5: $1\par_err_out[0:0]
Creating decoders for process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
     1/1: $0\register[8:0]
Creating decoders for process `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
     1/2: $2\strt_err_out[0:0]
     2/2: $1\strt_err_out[0:0]
Creating decoders for process `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
     1/2: $2\stp_err_out[0:0]
     2/2: $1\stp_err_out[0:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
     1/1: $0\busy_out[0:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
     1/1: $1\mux_sel_out[1:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
     1/5: $5\next_state[2:0]
     2/5: $4\next_state[2:0]
     3/5: $3\next_state[2:0]
     4/5: $2\next_state[2:0]
     5/5: $1\next_state[2:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
     1/1: $0\par_bit_out[0:0]
Creating decoders for process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
     1/1: $0\counter[2:0]
Creating decoders for process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
     1/1: $0\int_reg[7:0]
Creating decoders for process `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
     1/1: $1\tx_out[0:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
     1/1: $0\uart_alu_send_data_out[15:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
     1/1: $0\uart_rf_send_data_out[7:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
     1/1: $0\rf_addr_reg[7:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
     1/30: $2\alu_data_store[0:0]
     2/30: $2\uart_alu_send_out[0:0]
     3/30: $2\alu_fun_out[3:0]
     4/30: $2\alu_en_out[0:0]
     5/30: $4\rf_addr_out[3:0]
     6/30: $4\rf_wr_data_out[7:0]
     7/30: $4\rf_wr_en_out[0:0]
     8/30: $3\rf_addr_out[3:0]
     9/30: $3\rf_wr_data_out[7:0]
    10/30: $3\rf_wr_en_out[0:0]
    11/30: $2\rf_rd_store[0:0]
    12/30: $2\uart_rf_send_out[0:0]
    13/30: $3\rf_addr_en[0:0]
    14/30: $2\rf_wr_data_out[7:0]
    15/30: $2\rf_addr_out[3:0]
    16/30: $2\rf_wr_en_out[0:0]
    17/30: $2\rf_addr_en[0:0]
    18/30: $1\alu_data_store[0:0]
    19/30: $1\rf_rd_store[0:0]
    20/30: $1\rf_addr_en[0:0]
    21/30: $1\uart_alu_send_out[0:0]
    22/30: $1\uart_rf_send_out[0:0]
    23/30: $1\clk_div_en_out[0:0]
    24/30: $1\clk_gate_en_out[0:0]
    25/30: $1\alu_fun_out[3:0]
    26/30: $1\alu_en_out[0:0]
    27/30: $1\rf_wr_data_out[7:0]
    28/30: $1\rf_addr_out[3:0]
    29/30: $1\rf_rd_en_out[0:0]
    30/30: $1\rf_wr_en_out[0:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
     1/11: $11\next_state[3:0]
     2/11: $10\next_state[3:0]
     3/11: $9\next_state[3:0]
     4/11: $8\next_state[3:0]
     5/11: $7\next_state[3:0]
     6/11: $6\next_state[3:0]
     7/11: $5\next_state[3:0]
     8/11: $4\next_state[3:0]
     9/11: $3\next_state[3:0]
    10/11: $2\next_state[3:0]
    11/11: $1\next_state[3:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
     1/1: $0\current_state[3:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
     1/2: $1\uart_tx_data_out[7:0]
     2/2: $1\uart_tx_data_valid_out[0:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
     1/7: $7\next_state[2:0]
     2/7: $6\next_state[2:0]
     3/7: $5\next_state[2:0]
     4/7: $4\next_state[2:0]
     5/7: $3\next_state[2:0]
     6/7: $2\next_state[2:0]
     7/7: $1\next_state[2:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
     1/30: $4$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$76
     2/30: $3$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$75
     3/30: $3$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$74
     4/30: $2$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR[3:0]$68
     5/30: $2$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA[7:0]$69
     6/30: $2$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$71
     7/30: $2$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$70
     8/30: $1$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$65
     9/30: $1$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$64
    10/30: $1$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA[7:0]$63
    11/30: $1$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR[3:0]$62
    12/30: $1\i[31:0]
    13/30: $0\mem[15][7:0]
    14/30: $0\mem[14][7:0]
    15/30: $0\mem[13][7:0]
    16/30: $0\mem[12][7:0]
    17/30: $0\mem[11][7:0]
    18/30: $0\mem[10][7:0]
    19/30: $0\mem[9][7:0]
    20/30: $0\mem[8][7:0]
    21/30: $0\mem[7][7:0]
    22/30: $0\mem[6][7:0]
    23/30: $0\mem[5][7:0]
    24/30: $0\mem[4][7:0]
    25/30: $0\mem[3][7:0]
    26/30: $0\mem[2][7:0]
    27/30: $0\mem[1][7:0]
    28/30: $0\mem[0][7:0]
    29/30: $0\rd_data_valid_out[0:0]
    30/30: $0\rd_data_out[7:0]
Creating decoders for process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
     1/6: $5\alu_out_comp[15:0]
     2/6: $4\alu_out_comp[15:0]
     3/6: $3\alu_out_comp[15:0]
     4/6: $2\alu_out_comp[15:0]
     5/6: $1\alu_out_comp[15:0]
     6/6: $1\alu_out_comp_valid[0:0]
Creating decoders for process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
     1/2: $0\data_valid_out[0:0]
     2/2: $0\data_out[15:0]
Creating decoders for process `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
     1/1: $0\count[4:0]
Creating decoders for process `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
     1/1: $1\latch_out[0:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
     1/1: $0\sync_data_out[7:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
     1/1: $0\enable_pulse_out[0:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
     1/1: $0\ff[2:0]
Creating decoders for process `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
     1/1: $0\ff[2:0]
Creating decoders for process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
     1/4: $1\i[31:0]
     2/4: $0\reg_file[0][1:0]
     3/4: $0\sync_data_out[0:0]
     4/4: $1$splitcmplxassign$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:24$3[2:0]$7

27.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\uart_rx_fsm.\data_valid_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\data_sample_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\deser_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\stp_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\strt_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\par_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\counter_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\next_state' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
No latch inferred for signal `\parity_check.\par_err_out' from process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
No latch inferred for signal `\strt_check.\strt_err_out' from process `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
No latch inferred for signal `\stp_check.\stp_err_out' from process `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
No latch inferred for signal `\uart_tx_fsm.\mux_sel_out' from process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
No latch inferred for signal `\uart_tx_fsm.\next_state' from process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
No latch inferred for signal `\mux.\tx_out' from process `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
No latch inferred for signal `\sys_control_rx.\rf_wr_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_rd_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_addr_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_wr_data_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_fun_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\clk_gate_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\clk_div_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\uart_rf_send_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\uart_alu_send_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_addr_en' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_rd_store' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_data_store' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\next_state' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
No latch inferred for signal `\sys_control_tx.\uart_tx_data_valid_out' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
No latch inferred for signal `\sys_control_tx.\uart_tx_data_out' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
No latch inferred for signal `\sys_control_tx.\next_state' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
No latch inferred for signal `\alu.\alu_out_comp' from process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
No latch inferred for signal `\alu.\alu_out_comp_valid' from process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Latch inferred for signal `\clk_gate.\latch_out' from process `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18': $auto$proc_dlatch.cc:427:proc_dlatch$1270

27.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\uart_rx_fsm.\current_state' using process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
  created $adff cell `$procdff$1271' with positive edge clock and negative level reset.
Creating register for signal `\data_sampling.\register' using process `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
  created $adff cell `$procdff$1272' with positive edge clock and negative level reset.
Creating register for signal `\edge_bit_counter.\bit_cnt_out' using process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
  created $adff cell `$procdff$1273' with positive edge clock and negative level reset.
Creating register for signal `\edge_bit_counter.\edge_cnt_out' using process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
  created $adff cell `$procdff$1274' with positive edge clock and negative level reset.
Creating register for signal `\deserializer.\register' using process `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
  created $adff cell `$procdff$1275' with positive edge clock and negative level reset.
Creating register for signal `\parity_check.\register' using process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
  created $adff cell `$procdff$1276' with positive edge clock and negative level reset.
Creating register for signal `\uart_tx_fsm.\busy_out' using process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
  created $adff cell `$procdff$1277' with positive edge clock and negative level reset.
Creating register for signal `\uart_tx_fsm.\current_state' using process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
  created $adff cell `$procdff$1278' with positive edge clock and negative level reset.
Creating register for signal `\parity_calc.\par_bit_out' using process `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
  created $adff cell `$procdff$1279' with positive edge clock and negative level reset.
Creating register for signal `\serializer.\counter' using process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
  created $adff cell `$procdff$1280' with positive edge clock and negative level reset.
Creating register for signal `\serializer.\int_reg' using process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
  created $adff cell `$procdff$1281' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\uart_alu_send_data_out' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
  created $adff cell `$procdff$1282' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\uart_rf_send_data_out' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
  created $adff cell `$procdff$1283' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\rf_addr_reg' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
  created $adff cell `$procdff$1284' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\current_state' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
  created $adff cell `$procdff$1285' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_tx.\current_state' using process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
  created $adff cell `$procdff$1286' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\rd_data_out' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1287' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\rd_data_valid_out' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1288' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\i' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1289' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[0]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1290' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[1]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1291' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[2]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1292' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[3]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1293' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[4]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1294' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[5]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1295' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[6]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1296' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[7]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1297' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[8]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1298' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[9]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1299' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[10]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1300' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[11]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1301' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[12]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1302' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[13]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1303' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[14]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1304' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[15]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1305' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1306' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1307' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1308' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1309' with positive edge clock and negative level reset.
Creating register for signal `\alu.\data_out' using process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
  created $adff cell `$procdff$1310' with positive edge clock and negative level reset.
Creating register for signal `\alu.\data_valid_out' using process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
  created $adff cell `$procdff$1311' with positive edge clock and negative level reset.
Creating register for signal `\clk_divider.\count' using process `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
  created $adff cell `$procdff$1312' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\sync_data_out' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
  created $adff cell `$procdff$1313' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\enable_pulse_out' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
  created $adff cell `$procdff$1314' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\ff' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
  created $adff cell `$procdff$1315' with positive edge clock and negative level reset.
Creating register for signal `\reset_synchronizer.\ff' using process `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
  created $adff cell `$procdff$1316' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\sync_data_out' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1317' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\i' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1318' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.$splitcmplxassign$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:24$3' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1319' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\reg_file[0]' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1320' with positive edge clock and negative level reset.

27.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

27.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
Found and cleaned up 8 empty switches in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
Found and cleaned up 4 empty switches in `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Removing empty process `data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Found and cleaned up 3 empty switches in `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Removing empty process `edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Found and cleaned up 1 empty switch in `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Removing empty process `deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Found and cleaned up 5 empty switches in `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
Removing empty process `parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
Removing empty process `parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
Found and cleaned up 2 empty switches in `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
Removing empty process `strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
Found and cleaned up 2 empty switches in `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
Removing empty process `stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
Found and cleaned up 2 empty switches in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Found and cleaned up 1 empty switch in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
Found and cleaned up 5 empty switches in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
Found and cleaned up 2 empty switches in `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Removing empty process `parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Found and cleaned up 2 empty switches in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Removing empty process `serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Found and cleaned up 2 empty switches in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Removing empty process `serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Found and cleaned up 1 empty switch in `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
Removing empty process `mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Found and cleaned up 9 empty switches in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
Found and cleaned up 11 empty switches in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
Found and cleaned up 1 empty switch in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
Found and cleaned up 7 empty switches in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
Found and cleaned up 4 empty switches in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Removing empty process `reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Found and cleaned up 5 empty switches in `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Removing empty process `alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Removing empty process `alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
Found and cleaned up 3 empty switches in `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Removing empty process `clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Found and cleaned up 1 empty switch in `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
Removing empty process `clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
Found and cleaned up 1 empty switch in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
Removing empty process `reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
Removing empty process `bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
Cleaned up 91 empty switches.

27.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_rx_fsm.
<suppressed ~6 debug messages>
Optimizing module data_sampling.
Optimizing module edge_bit_counter.
Optimizing module deserializer.
Optimizing module parity_check.
<suppressed ~4 debug messages>
Optimizing module strt_check.
<suppressed ~1 debug messages>
Optimizing module stp_check.
Optimizing module uart_tx_fsm.
<suppressed ~6 debug messages>
Optimizing module parity_calc.
<suppressed ~2 debug messages>
Optimizing module serializer.
<suppressed ~1 debug messages>
Optimizing module mux.
<suppressed ~1 debug messages>
Optimizing module uart_tx.
Optimizing module uart_rx.
Optimizing module sys_control_rx.
<suppressed ~3 debug messages>
Optimizing module sys_control_tx.
<suppressed ~4 debug messages>
Optimizing module sys_control.
Optimizing module reg_file.
<suppressed ~2 debug messages>
Optimizing module alu.
<suppressed ~3 debug messages>
Optimizing module uart_top.
Optimizing module clk_divider.
<suppressed ~3 debug messages>
Optimizing module clk_gate.
<suppressed ~7 debug messages>
Optimizing module data_synchronizer.
Optimizing module reset_synchronizer.
Optimizing module bit_synchronizer.
Optimizing module system_top.

27.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_rx_fsm.
<suppressed ~4 debug messages>
Optimizing module data_sampling.
<suppressed ~6 debug messages>
Optimizing module edge_bit_counter.
Optimizing module deserializer.
Optimizing module parity_check.
Optimizing module strt_check.
Optimizing module stp_check.
Optimizing module uart_tx_fsm.
Optimizing module parity_calc.
Optimizing module serializer.
Optimizing module mux.
Optimizing module uart_tx.
Optimizing module uart_rx.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module sys_control.
Optimizing module reg_file.
Optimizing module alu.
Optimizing module uart_top.
Optimizing module clk_divider.
<suppressed ~2 debug messages>
Optimizing module clk_gate.
Optimizing module data_synchronizer.
Optimizing module reset_synchronizer.
Optimizing module bit_synchronizer.
Optimizing module system_top.

27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \uart_tx_fsm..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \system_top..
Removed 46 unused cells and 427 unused wires.
<suppressed ~69 debug messages>

27.5. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

27.6. Executing OPT pass (performing simple optimizations).

27.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~18 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
<suppressed ~3 debug messages>
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~48 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~144 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~36 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~99 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~30 debug messages>
Removed a total of 126 cells.

27.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1193.
    dead port 2/2 on $mux $procmux$1195.
    dead port 2/2 on $mux $procmux$1205.
    dead port 2/2 on $mux $procmux$1207.
    dead port 2/2 on $mux $procmux$1218.
    dead port 2/2 on $mux $procmux$1220.
    dead port 2/2 on $mux $procmux$1240.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1250.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$376.
    dead port 2/2 on $mux $procmux$379.
    dead port 2/2 on $mux $procmux$381.
    dead port 2/2 on $mux $procmux$385.
    dead port 2/2 on $mux $procmux$388.
    dead port 2/2 on $mux $procmux$390.
    dead port 1/2 on $mux $procmux$397.
    dead port 2/2 on $mux $procmux$399.
    dead port 2/2 on $mux $procmux$405.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$945.
    dead port 1/2 on $mux $procmux$948.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$423.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$414.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$654.
    dead port 2/2 on $mux $procmux$516.
    dead port 2/2 on $mux $procmux$522.
    dead port 2/2 on $mux $procmux$529.
    dead port 2/2 on $mux $procmux$536.
    dead port 2/2 on $mux $procmux$543.
    dead port 2/2 on $mux $procmux$551.
    dead port 2/2 on $mux $procmux$559.
    dead port 2/2 on $mux $procmux$567.
    dead port 2/2 on $mux $procmux$740.
    dead port 2/2 on $mux $procmux$576.
    dead port 2/2 on $mux $procmux$747.
    dead port 2/2 on $mux $procmux$755.
    dead port 2/2 on $mux $procmux$764.
    dead port 2/2 on $mux $procmux$586.
    dead port 2/2 on $mux $procmux$774.
    dead port 2/2 on $mux $procmux$785.
    dead port 2/2 on $mux $procmux$797.
    dead port 2/2 on $mux $procmux$596.
    dead port 2/2 on $mux $procmux$810.
    dead port 2/2 on $mux $procmux$828.
    dead port 2/2 on $mux $procmux$830.
    dead port 2/2 on $mux $procmux$844.
    dead port 2/2 on $mux $procmux$607.
    dead port 2/2 on $mux $procmux$618.
    dead port 2/2 on $mux $procmux$629.
    dead port 2/2 on $mux $procmux$641.
    dead port 2/2 on $mux $procmux$510.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$878.
    dead port 2/2 on $mux $procmux$886.
    dead port 2/2 on $mux $procmux$895.
    dead port 1/2 on $mux $procmux$906.
    dead port 2/2 on $mux $procmux$908.
    dead port 2/2 on $mux $procmux$918.
    dead port 2/2 on $mux $procmux$871.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$212.
    dead port 2/2 on $mux $procmux$219.
    dead port 2/2 on $mux $procmux$227.
    dead port 2/2 on $mux $procmux$236.
    dead port 2/2 on $mux $procmux$204.
    dead port 2/2 on $mux $procmux$206.
    dead port 1/2 on $mux $procmux$269.
    dead port 2/2 on $mux $procmux$271.
    dead port 2/2 on $mux $procmux$277.
    dead port 2/2 on $mux $procmux$284.
    dead port 2/2 on $mux $procmux$292.
    dead port 1/2 on $mux $procmux$302.
    dead port 2/2 on $mux $procmux$304.
    dead port 2/2 on $mux $procmux$313.
    dead port 2/2 on $mux $procmux$323.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$442.
    dead port 2/2 on $mux $procmux$451.
    dead port 2/2 on $mux $procmux$453.
    dead port 2/2 on $mux $procmux$461.
    dead port 2/2 on $mux $procmux$471.
Removed 76 multiplexer ports.
<suppressed ~65 debug messages>

27.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    New ctrl vector for $pmux cell $procmux$696: $auto$opt_reduce.cc:134:opt_pmux$1322
    New ctrl vector for $pmux cell $procmux$710: $auto$opt_reduce.cc:134:opt_pmux$1324
    New ctrl vector for $pmux cell $procmux$717: { $auto$opt_reduce.cc:134:opt_pmux$1326 $procmux$537_CMP }
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    New ctrl vector for $pmux cell $procmux$863: $auto$opt_reduce.cc:134:opt_pmux$1328
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
    New ctrl vector for $pmux cell $procmux$251: $auto$opt_reduce.cc:134:opt_pmux$1330
    New ctrl vector for $pmux cell $procmux$245: $auto$opt_reduce.cc:134:opt_pmux$1332
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 6 changes.

27.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~27 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~6 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~3 debug messages>
Removed a total of 13 cells.

27.6.6. Executing OPT_DFF pass (perform DFF optimizations).

27.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 212 unused wires.
<suppressed ~11 debug messages>

27.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.9. Rerunning OPT passes. (Maybe there is more to do..)

27.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    New ctrl vector for $pmux cell $procmux$672: $auto$opt_reduce.cc:134:opt_pmux$1334
    New ctrl vector for $pmux cell $procmux$732: $auto$opt_reduce.cc:134:opt_pmux$1336
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    New ctrl vector for $pmux cell $procmux$921: { $procmux$909_CMP $procmux$860_CMP $procmux$879_CMP $auto$opt_reduce.cc:134:opt_pmux$1338 }
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
    New ctrl vector for $pmux cell $procmux$474: { $procmux$437_CMP \ser_en_out $procmux$435_CMP $auto$opt_reduce.cc:134:opt_pmux$1340 }
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 4 changes.

27.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.6.13. Executing OPT_DFF pass (perform DFF optimizations).

27.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.16. Rerunning OPT passes. (Maybe there is more to do..)

27.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.6.20. Executing OPT_DFF pass (perform DFF optimizations).

27.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.23. Finished OPT passes. (There is nothing left to do.)

27.7. Executing FSM pass (extract and optimize FSM).

27.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking sys_control_rx.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking sys_control_tx.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking uart_rx_fsm.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking uart_tx_fsm.current_state as FSM state register:
    Circuit seems to be self-resetting.

27.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

27.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

27.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

27.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

27.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

27.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27.8. Executing OPT pass (performing simple optimizations).

27.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [2]).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [1]).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [0]).
Adding EN signal on $procdff$1313 ($adff) from module data_synchronizer (D = \unsync_data_in, Q = \sync_data_out).
Adding EN signal on $procdff$1275 ($adff) from module deserializer (D = { \sampled_bit_in \register [7:1] }, Q = \register).
Adding EN signal on $procdff$1274 ($adff) from module edge_bit_counter (D = $0\edge_cnt_out[4:0], Q = \edge_cnt_out).
Adding EN signal on $procdff$1273 ($adff) from module edge_bit_counter (D = $0\bit_cnt_out[3:0], Q = \bit_cnt_out).
Adding EN signal on $procdff$1279 ($adff) from module parity_calc (D = $0\par_bit_out[0:0], Q = \par_bit_out).
Adding EN signal on $procdff$1276 ($adff) from module parity_check (D = \register [8:1], Q = \register [8:1]).
Handling D = Q on $auto$ff.cc:266:slice$1371 ($adffe) from module parity_check (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Adding EN signal on $procdff$1305 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[15]).
Adding EN signal on $procdff$1304 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[14]).
Adding EN signal on $procdff$1303 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[13]).
Adding EN signal on $procdff$1302 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[12]).
Adding EN signal on $procdff$1301 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[11]).
Adding EN signal on $procdff$1300 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[10]).
Adding EN signal on $procdff$1299 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[9]).
Adding EN signal on $procdff$1298 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[8]).
Adding EN signal on $procdff$1297 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[7]).
Adding EN signal on $procdff$1296 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[6]).
Adding EN signal on $procdff$1295 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[5]).
Adding EN signal on $procdff$1294 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[4]).
Adding EN signal on $procdff$1293 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[3]).
Adding EN signal on $procdff$1292 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[2]).
Adding EN signal on $procdff$1291 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[1]).
Adding EN signal on $procdff$1290 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[0]).
Adding EN signal on $procdff$1288 ($adff) from module reg_file (D = $procmux$1175_Y, Q = \rd_data_valid_out).
Adding EN signal on $procdff$1287 ($adff) from module reg_file (D = $4$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$76, Q = \rd_data_out).
Adding EN signal on $procdff$1281 ($adff) from module serializer (D = $0\int_reg[7:0], Q = \int_reg).
Adding EN signal on $procdff$1280 ($adff) from module serializer (D = $0\counter[2:0], Q = \counter).
Adding EN signal on $procdff$1284 ($adff) from module sys_control_rx (D = \uart_rx_data_in, Q = \rf_addr_reg).
Adding EN signal on $procdff$1283 ($adff) from module sys_control_rx (D = \rf_rd_data_in, Q = \uart_rf_send_data_out).
Adding EN signal on $procdff$1282 ($adff) from module sys_control_rx (D = \alu_data_in, Q = \uart_alu_send_data_out).
Adding EN signal on $procdff$1286 ($adff) from module sys_control_tx (D = \next_state, Q = \current_state).
Adding EN signal on $procdff$1271 ($adff) from module uart_rx_fsm (D = \next_state, Q = \current_state).
Adding EN signal on $procdff$1277 ($adff) from module uart_tx_fsm (D = $0\busy_out[0:0], Q = \busy_out).

27.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 50 unused cells and 48 unused wires.
<suppressed ~56 debug messages>

27.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~2 debug messages>
Optimizing module mux.
Optimizing module parity_calc.
<suppressed ~1 debug messages>
Optimizing module parity_check.
<suppressed ~5 debug messages>
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~2 debug messages>
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~1 debug messages>

27.8.9. Rerunning OPT passes. (Maybe there is more to do..)

27.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
<suppressed ~3 debug messages>
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
<suppressed ~3 debug messages>
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 2 cells.

27.8.13. Executing OPT_DFF pass (perform DFF optimizations).

27.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 1 unused cells and 6 unused wires.
<suppressed ~4 debug messages>

27.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.16. Rerunning OPT passes. (Maybe there is more to do..)

27.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.20. Executing OPT_DFF pass (perform DFF optimizations).

27.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.23. Finished OPT passes. (There is nothing left to do.)

27.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 7 bits (of 16) from port Y of cell alu.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35 ($add).
Removed top 7 bits (of 16) from port Y of cell alu.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36 ($sub).
Removed top 8 bits (of 16) from port Y of cell alu.$and$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:55$39 ($and).
Removed top 8 bits (of 16) from port Y of cell alu.$or$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:58$40 ($or).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:61$42 ($not).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:64$44 ($not).
Removed top 8 bits (of 16) from port Y of cell alu.$xor$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:67$45 ($xor).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:70$47 ($not).
Removed top 14 bits (of 16) from mux cell alu.$procmux$1191 ($mux).
Removed top 14 bits (of 16) from mux cell alu.$procmux$1203 ($mux).
Removed top 15 bits (of 16) from mux cell alu.$procmux$1216 ($mux).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1232_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1233_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1234_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1235_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1236_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1237_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$1238_CMP0 ($eq).
Removed top 15 bits (of 16) from wire alu.$3\alu_out_comp[15:0].
Removed top 14 bits (of 16) from wire alu.$4\alu_out_comp[15:0].
Removed top 14 bits (of 16) from wire alu.$5\alu_out_comp[15:0].
Removed top 7 bits (of 16) from wire alu.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35_Y.
Removed top 8 bits (of 16) from wire alu.$and$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:55$39_Y.
Removed top 8 bits (of 16) from wire alu.$or$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:58$40_Y.
Removed top 8 bits (of 16) from wire alu.$xor$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:67$45_Y.
Removed top 31 bits (of 32) from port B of cell clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
Removed top 27 bits (of 32) from port Y of cell clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
Removed top 28 bits (of 32) from port B of cell clk_divider.$le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28 ($le).
Removed top 31 bits (of 32) from mux cell clk_divider.$ternary$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$31 ($mux).
Removed top 27 bits (of 32) from wire clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24_Y.
Removed top 28 bits (of 32) from port A of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 31 bits (of 32) from port B of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 27 bits (of 32) from port Y of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 1 bits (of 5) from port B of cell data_sampling.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:20$152 ($eq).
Removed top 28 bits (of 32) from port A of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 31 bits (of 32) from port B of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 27 bits (of 32) from port Y of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 27 bits (of 32) from port B of cell data_sampling.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$155 ($eq).
Removed top 27 bits (of 32) from wire data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154_Y.
Removed top 24 bits (of 32) from mux cell deserializer.$ternary$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:25$139 ($mux).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
Removed top 27 bits (of 32) from port Y of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
Removed top 26 bits (of 32) from port Y of cell edge_bit_counter.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
Removed top 28 bits (of 32) from port Y of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
Removed top 1 bits (of 3) from port B of cell edge_bit_counter.$auto$opt_dff.cc:195:make_patterns_logic$1365 ($ne).
Removed top 27 bits (of 32) from wire edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142_Y.
Removed top 28 bits (of 32) from wire edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145_Y.
Removed top 1 bits (of 2) from port B of cell mux.$procmux$498_CMP0 ($eq).
Removed top 8 bits (of 9) from wire parity_check.register.
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1052_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1066_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1081_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1097_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell reg_file.$procmux$1114_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell reg_file.$procmux$1132_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell reg_file.$procmux$1151_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
Removed top 29 bits (of 32) from port Y of cell serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
Removed top 29 bits (of 32) from wire serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100_Y.
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$560_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$587_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$608_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sys_control_rx.$procmux$619_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sys_control_rx.$procmux$655_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$745 ($mux).
Removed top 3 bits (of 4) from mux cell sys_control_rx.$procmux$753 ($mux).
Removed top 1 bits (of 4) from mux cell sys_control_rx.$procmux$772 ($mux).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$783 ($mux).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$795 ($mux).
Removed top 3 bits (of 4) from mux cell sys_control_rx.$procmux$808 ($mux).
Removed top 4 bits (of 8) from FF cell sys_control_rx.$auto$ff.cc:266:slice$1435 ($adffe).
Removed top 2 bits (of 4) from wire sys_control_rx.$10\next_state[3:0].
Removed top 3 bits (of 4) from wire sys_control_rx.$4\next_state[3:0].
Removed top 2 bits (of 4) from wire sys_control_rx.$5\next_state[3:0].
Removed top 2 bits (of 4) from wire sys_control_rx.$6\next_state[3:0].
Removed top 4 bits (of 8) from wire sys_control_rx.rf_addr_reg.
Removed top 1 bits (of 3) from port B of cell sys_control_tx.$procmux$860_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell sys_control_tx.$procmux$861_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell sys_control_tx.$procmux$879_CMP0 ($eq).
Removed top 4 bits (of 8) from wire system_top.rf_addr.
Removed top 3 bits (of 4) from port B of cell uart_rx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:48$164 ($eq).
Removed top 28 bits (of 32) from port A of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 30 bits (of 32) from port B of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 27 bits (of 32) from port Y of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 27 bits (of 32) from port B of cell uart_rx_fsm.$gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186 ($gt).
Removed top 28 bits (of 32) from port B of cell uart_rx_fsm.$lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189 ($lt).
Removed top 31 bits (of 32) from port B of cell uart_rx_fsm.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
Removed top 26 bits (of 32) from port Y of cell uart_rx_fsm.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
Removed top 28 bits (of 32) from port A of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 30 bits (of 32) from port B of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 27 bits (of 32) from port Y of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 27 bits (of 32) from port B of cell uart_rx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$195 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_rx_fsm.$procmux$220_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_rx_fsm.$procmux$228_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_rx_fsm.$procmux$237_CMP0 ($eq).
Removed top 27 bits (of 32) from wire uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194_Y.
Removed top 27 bits (of 32) from wire uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185_Y.
Removed top 1 bits (of 3) from port B of cell uart_tx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:69$115 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_tx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:84$120 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_tx_fsm.$procmux$435_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_tx_fsm.$procmux$437_CMP0 ($eq).
Removed top 2 bits (of 3) from mux cell uart_tx_fsm.$procmux$440 ($mux).
Removed top 2 bits (of 3) from wire uart_tx_fsm.$2\next_state[2:0].
Removed top 1 bits (of 3) from wire uart_tx_fsm.next_state.

27.10. Executing PEEPOPT pass (run peephole optimizers).

27.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 24 unused wires.
<suppressed ~11 debug messages>

27.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35 ($add).
  creating $macc model for $mul$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:49$37 ($mul).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35.
  creating $macc cell for $mul$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:49$37: $auto$alumacc.cc:365:replace_macc$1488
  creating $alu model for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49 ($gt): merged with $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu model for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:85$50 ($lt): merged with $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu model for $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:73$48 ($eq): merged with $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35: $auto$alumacc.cc:485:replace_alu$1489
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36, $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49, $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:85$50, $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:73$48: $auto$alumacc.cc:485:replace_alu$1492
  created 2 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module bit_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clk_divider:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24.
  creating $alu model for $le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28 ($le): new $alu
  creating $alu cell for $le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28: $auto$alumacc.cc:485:replace_alu$1504
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24: $auto$alumacc.cc:485:replace_alu$1517
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clk_gate:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_sampling:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154: $auto$alumacc.cc:485:replace_alu$1520
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149: $auto$alumacc.cc:485:replace_alu$1523
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module deserializer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module edge_bit_counter:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142: $auto$alumacc.cc:485:replace_alu$1526
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145: $auto$alumacc.cc:485:replace_alu$1529
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143: $auto$alumacc.cc:485:replace_alu$1532
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module parity_calc:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module parity_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reg_file:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reset_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module serializer:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100: $auto$alumacc.cc:485:replace_alu$1535
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module stp_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module strt_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control_rx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control_tx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module system_top:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_rx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_rx_fsm:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194.
  creating $alu model for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186 ($gt): new $alu
  creating $alu model for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189 ($lt): new $alu
  creating $alu model for $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:60$174 ($eq): merged with $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189.
  creating $alu cell for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189, $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:60$174: $auto$alumacc.cc:485:replace_alu$1540
  creating $alu cell for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186: $auto$alumacc.cc:485:replace_alu$1547
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194: $auto$alumacc.cc:485:replace_alu$1552
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185: $auto$alumacc.cc:485:replace_alu$1555
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191: $auto$alumacc.cc:485:replace_alu$1558
  created 5 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_top:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_tx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_tx_fsm:
  created 0 $alu and 0 $macc cells.

27.13. Executing SHARE pass (SAT-based resource sharing).

27.14. Executing OPT pass (performing simple optimizations).

27.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~1 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~9 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 3 cells.

27.14.6. Executing OPT_DFF pass (perform DFF optimizations).

27.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 2 unused cells and 12 unused wires.
<suppressed ~6 debug messages>

27.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.9. Rerunning OPT passes. (Maybe there is more to do..)

27.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.14.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.16. Finished OPT passes. (There is nothing left to do.)

27.15. Executing MEMORY pass.

27.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

27.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

27.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

27.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

27.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

27.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

27.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

27.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

27.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.17. Executing OPT pass (performing simple optimizations).

27.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~20 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
<suppressed ~1 debug messages>
Optimizing module clk_gate.
Optimizing module data_sampling.
<suppressed ~1 debug messages>
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~4 debug messages>
Optimizing module mux.
<suppressed ~1 debug messages>
Optimizing module parity_calc.
<suppressed ~1 debug messages>
Optimizing module parity_check.
<suppressed ~3 debug messages>
Optimizing module reg_file.
<suppressed ~2 debug messages>
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~2 debug messages>
Optimizing module stp_check.
<suppressed ~2 debug messages>
Optimizing module strt_check.
<suppressed ~2 debug messages>
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~10 debug messages>
Optimizing module sys_control_tx.
<suppressed ~5 debug messages>
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~15 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~4 debug messages>

27.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.17.3. Executing OPT_DFF pass (perform DFF optimizations).

27.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 1 unused cells and 40 unused wires.
<suppressed ~14 debug messages>

27.17.5. Finished fast OPT passes.

27.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

27.19. Executing OPT pass (performing simple optimizations).

27.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
    Consolidated identical input bits for $mux cell $procmux$1191:
      Old ports: A=2'11, B=2'00, Y=$5\alu_out_comp[15:0]
      New ports: A=1'1, B=1'0, Y=$5\alu_out_comp[15:0] [0]
      New connections: $5\alu_out_comp[15:0] [1] = $5\alu_out_comp[15:0] [0]
    Consolidated identical input bits for $mux cell $procmux$1203:
      Old ports: A=2'10, B=2'00, Y=$4\alu_out_comp[15:0]
      New ports: A=1'1, B=1'0, Y=$4\alu_out_comp[15:0] [1]
      New connections: $4\alu_out_comp[15:0] [0] = 1'0
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    Consolidated identical input bits for $mux cell $procmux$738:
      Old ports: A=4'1010, B=4'0000, Y=$11\next_state[3:0]
      New ports: A=1'1, B=1'0, Y=$11\next_state[3:0] [1]
      New connections: { $11\next_state[3:0] [3:2] $11\next_state[3:0] [0] } = { $11\next_state[3:0] [1] 2'00 }
    Consolidated identical input bits for $mux cell $procmux$762:
      Old ports: A=4'0111, B=4'1000, Y=$8\next_state[3:0]
      New ports: A=2'01, B=2'10, Y={ $8\next_state[3:0] [3] $8\next_state[3:0] [0] }
      New connections: $8\next_state[3:0] [2:1] = { $8\next_state[3:0] [0] $8\next_state[3:0] [0] }
    Consolidated identical input bits for $mux cell $procmux$772:
      Old ports: A=3'110, B=3'000, Y=$7\next_state[3:0] [2:0]
      New ports: A=1'1, B=1'0, Y=$7\next_state[3:0] [1]
      New connections: { $7\next_state[3:0] [2] $7\next_state[3:0] [0] } = { $7\next_state[3:0] [1] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$795:
      Old ports: A=2'11, B=2'00, Y=$5\next_state[3:0]
      New ports: A=1'1, B=1'0, Y=$5\next_state[3:0] [0]
      New connections: $5\next_state[3:0] [1] = $5\next_state[3:0] [0]
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    Consolidated identical input bits for $mux cell $procmux$916:
      Old ports: A=3'010, B=3'001, Y=$2\next_state[2:0]
      New ports: A=2'10, B=2'01, Y=$2\next_state[2:0] [1:0]
      New connections: $2\next_state[2:0] [2] = 1'0
    New ctrl vector for $pmux cell $procmux$921: { $procmux$909_CMP $procmux$860_CMP $procmux$879_CMP }
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
    Consolidated identical input bits for $mux cell $procmux$275:
      Old ports: A=3'000, B=3'001, Y=$7\next_state[2:0]
      New ports: A=1'0, B=1'1, Y=$7\next_state[2:0] [0]
      New connections: $7\next_state[2:0] [2:1] = 2'00
    Consolidated identical input bits for $mux cell $procmux$311:
      Old ports: A=3'011, B=3'010, Y=$3\next_state[2:0]
      New ports: A=1'1, B=1'0, Y=$3\next_state[2:0] [0]
      New connections: $3\next_state[2:0] [2:1] = 2'01
    New ctrl vector for $pmux cell $procmux$326: { $procmux$324_CMP $procmux$237_CMP $auto$opt_reduce.cc:134:opt_pmux$1574 $procmux$207_CMP }
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
    Consolidated identical input bits for $mux cell $procmux$448:
      Old ports: A=3'100, B=3'011, Y=$4\next_state[2:0]
      New ports: A=2'10, B=2'01, Y={ $4\next_state[2:0] [2] $4\next_state[2:0] [0] }
      New connections: $4\next_state[2:0] [1] = $4\next_state[2:0] [0]
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 12 changes.

27.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.19.6. Executing OPT_SHARE pass.

27.19.7. Executing OPT_DFF pass (perform DFF optimizations).

27.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~3 debug messages>
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~2 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.10. Rerunning OPT passes. (Maybe there is more to do..)

27.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~3 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.19.14. Executing OPT_SHARE pass.

27.19.15. Executing OPT_DFF pass (perform DFF optimizations).

27.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

27.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.18. Rerunning OPT passes. (Maybe there is more to do..)

27.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.19.22. Executing OPT_SHARE pass.

27.19.23. Executing OPT_DFF pass (perform DFF optimizations).

27.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.26. Finished OPT passes. (There is nothing left to do.)

27.20. Executing TECHMAP pass (map to technology primitives).

27.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

27.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$bfceb922395790c0ce92e9f9b5b428d4fc72cc30\_90_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$332fab4e157f868977379756d21fa99887c3c6c4\_90_alu for cells of type $alu.
Using template $paramod$0ae6dcbc606d0267ec97d3ccf20343286af3366c\_90_alu for cells of type $alu.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using template $paramod$20d3ee62d72123142eb855d7ddafd835e31ba009\_90_pmux for cells of type $pmux.
Using template $paramod$4d45682f6d5f8751d24fc75184ef72226da353f7\_90_pmux for cells of type $pmux.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod$75a16668b548c3bac59647e2f0c7dad55b2b94b9\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_xor.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$943564b9366bbc392bf4bbc801aa0a2d7742a4e0\_90_alu for cells of type $alu.
Using template $paramod$dde52db7035cb02b3cc5e73865788532339e3bcb\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dlatch.
Using template $paramod$83dd457849c736323edf2edb15923eb27f99c683\_90_alu for cells of type $alu.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\_90_alu for cells of type $alu.
Using template $paramod$67686dad8c792aead4495d34957ca1f4c910d0ba\_90_div for cells of type $div.
Using extmapper maccmap for cells of type $macc.
  add \data_a_in * \data_b_in (8x8 bits, unsigned)
Using template $paramod$e85bcdd999a9f7e1064fcb77207041270947b77a\_90_pmux for cells of type $pmux.
Using template $paramod$67686dad8c792aead4495d34957ca1f4c910d0ba\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000010000 for cells of type $__div_mod_u.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod$02488ff6fa51b28bbfa470bdd9b0e548b3357746\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$d66a711d7e97d14a7c7a9fd9e900c39b1fc36cfa\_90_alu for cells of type $alu.
Using template $paramod$8359f4ac8e08a95551ec17e9becbee696d87568d\_90_alu for cells of type $alu.
Using template $paramod$3e9f586ebf39197c9185418e155ec5725178e703\_90_alu for cells of type $alu.
Using template $paramod$99f84fe1e34117baf970301335fa146f92b93eb7\_90_alu for cells of type $alu.
Using template $paramod$10caef7eb223495dec7ca6c51abc18dbd379ce45\_90_alu for cells of type $alu.
Using template $paramod$6ae352d62dfc78ea1f63c7f3961ba142be4a2f93\_90_alu for cells of type $alu.
Using template $paramod$7bdc7d89ea9376c9c454fd05d9b64ca6288b61c9\_90_alu for cells of type $alu.
Using template $paramod$96a374a77d27fe2a5f65189ccd5c4d82c02f3e0c\_90_alu for cells of type $alu.
Using template $paramod$c01a73249af533291d6c07bc7dff8edfd9012ebf\_90_alu for cells of type $alu.
Using template $paramod$4dafc65fa46f14914da22e0fac43fee737cf5e98\_90_alu for cells of type $alu.
Using template $paramod$6514813ccfd0fbcd872b47be16e9bc3f005ba67f\_90_alu for cells of type $alu.
Using template $paramod$90cb621aa18d0bfc972ff6df82973fce6d62f25a\_90_alu for cells of type $alu.
Using template $paramod$28a6ec5648d14f65107108cc45dfc9433b8b29ab\_90_alu for cells of type $alu.
Using template $paramod$1b1e81b08462e7f621826ba0c290068af8e4e550\_90_alu for cells of type $alu.
Using template $paramod$1c5b0982e801b857faf786570d1281fe30bbf0dc\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
No more expansions possible.
<suppressed ~8660 debug messages>

27.21. Executing OPT pass (performing simple optimizations).

27.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~5361 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
<suppressed ~41 debug messages>
Optimizing module clk_gate.
Optimizing module data_sampling.
<suppressed ~59 debug messages>
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~87 debug messages>
Optimizing module mux.
<suppressed ~8 debug messages>
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
<suppressed ~60 debug messages>
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~21 debug messages>
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~128 debug messages>
Optimizing module sys_control_tx.
<suppressed ~36 debug messages>
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~167 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~38 debug messages>

27.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~7617 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
<suppressed ~21 debug messages>
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
<suppressed ~18 debug messages>
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
<suppressed ~12 debug messages>
Finding identical cells in module `\mux'.
<suppressed ~6 debug messages>
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~156 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
<suppressed ~12 debug messages>
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~144 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~15 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~66 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~12 debug messages>
Removed a total of 2693 cells.

27.21.3. Executing OPT_DFF pass (perform DFF optimizations).

27.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 354 unused cells and 5193 unused wires.
<suppressed ~366 debug messages>

27.21.5. Finished fast OPT passes.

27.22. Executing ABC pass (technology mapping using ABC).

27.22.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 2426 gates and 2448 wires to a netlist network with 21 inputs and 16 outputs.

27.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      183
ABC RESULTS:              NAND cells:       44
ABC RESULTS:              XNOR cells:       96
ABC RESULTS:               NOT cells:      115
ABC RESULTS:               AND cells:       99
ABC RESULTS:             ORNOT cells:       82
ABC RESULTS:               NOR cells:      171
ABC RESULTS:               XOR cells:      307
ABC RESULTS:                OR cells:      324
ABC RESULTS:            ANDNOT cells:      819
ABC RESULTS:        internal signals:     2411
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

27.22.2. Extracting gate netlist of module `\bit_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.3. Extracting gate netlist of module `\clk_divider' to `<abc-temp-dir>/input.blif'..
Extracted 61 gates and 74 wires to a netlist network with 11 inputs and 6 outputs.

27.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.3.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               XOR cells:        7
ABC RESULTS:                OR cells:       10
ABC RESULTS:            ANDNOT cells:       21
ABC RESULTS:        internal signals:       57
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        6
Removing temp directory.

27.22.4. Extracting gate netlist of module `\clk_gate' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

27.22.4.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.5. Extracting gate netlist of module `\data_sampling' to `<abc-temp-dir>/input.blif'..
Extracted 63 gates and 76 wires to a netlist network with 13 inputs and 4 outputs.

27.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.5.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        5
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       16
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:            ANDNOT cells:       10
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:       16
ABC RESULTS:        internal signals:       59
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        4
Removing temp directory.

27.22.6. Extracting gate netlist of module `\data_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

27.22.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.6.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.7. Extracting gate netlist of module `\deserializer' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 18 wires to a netlist network with 9 inputs and 8 outputs.

27.22.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        8
Removing temp directory.

27.22.8. Extracting gate netlist of module `\edge_bit_counter' to `<abc-temp-dir>/input.blif'..
Extracted 66 gates and 83 wires to a netlist network with 16 inputs and 11 outputs.

27.22.8.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.8.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:               NOT cells:        4
ABC RESULTS:                OR cells:       11
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               XOR cells:       12
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:        internal signals:       56
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       11
Removing temp directory.

27.22.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 14 gates and 19 wires to a netlist network with 4 inputs and 1 outputs.

27.22.9.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.9.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.10. Extracting gate netlist of module `\parity_calc' to `<abc-temp-dir>/input.blif'..
Extracted 13 gates and 23 wires to a netlist network with 10 inputs and 2 outputs.

27.22.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.10.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:        5
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        2
Removing temp directory.

27.22.11. Extracting gate netlist of module `\parity_check' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 6 wires to a netlist network with 3 inputs and 1 outputs.

27.22.11.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.11.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.12. Extracting gate netlist of module `\reg_file' to `<abc-temp-dir>/input.blif'..
Extracted 320 gates and 454 wires to a netlist network with 134 inputs and 27 outputs.

27.22.12.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.12.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:               AND cells:        2
ABC RESULTS:              NAND cells:        8
ABC RESULTS:            ANDNOT cells:      142
ABC RESULTS:                OR cells:      133
ABC RESULTS:               MUX cells:        8
ABC RESULTS:        internal signals:      293
ABC RESULTS:           input signals:      134
ABC RESULTS:          output signals:       27
Removing temp directory.

27.22.13. Extracting gate netlist of module `\reset_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.14. Extracting gate netlist of module `\serializer' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 46 wires to a netlist network with 21 inputs and 14 outputs.

27.22.14.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.14.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:               MUX cells:        7
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       14
Removing temp directory.

27.22.15. Extracting gate netlist of module `\stp_check' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

27.22.15.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.15.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.16. Extracting gate netlist of module `\strt_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

27.22.16.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.16.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.17. Extracting gate netlist of module `\sys_control' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.18. Extracting gate netlist of module `\sys_control_rx' to `<abc-temp-dir>/input.blif'..
Extracted 158 gates and 178 wires to a netlist network with 19 inputs and 27 outputs.

27.22.18.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.18.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               MUX cells:        2
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              NAND cells:        7
ABC RESULTS:                OR cells:       35
ABC RESULTS:               NOR cells:       10
ABC RESULTS:               AND cells:        4
ABC RESULTS:            ANDNOT cells:       58
ABC RESULTS:        internal signals:      132
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       27
Removing temp directory.

27.22.19. Extracting gate netlist of module `\sys_control_tx' to `<abc-temp-dir>/input.blif'..
Extracted 88 gates and 119 wires to a netlist network with 30 inputs and 13 outputs.

27.22.19.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.19.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              NAND cells:        2
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:               NOR cells:        3
ABC RESULTS:            ANDNOT cells:       51
ABC RESULTS:        internal signals:       76
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       13
Removing temp directory.

27.22.20. Extracting gate netlist of module `\system_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.21. Extracting gate netlist of module `\uart_rx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.22. Extracting gate netlist of module `\uart_rx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 163 gates and 186 wires to a netlist network with 22 inputs and 8 outputs.

27.22.22.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.22.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOT cells:        9
ABC RESULTS:               MUX cells:        1
ABC RESULTS:             ORNOT cells:        9
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               AND cells:        3
ABC RESULTS:               XOR cells:       20
ABC RESULTS:                OR cells:       31
ABC RESULTS:            ANDNOT cells:       45
ABC RESULTS:        internal signals:      156
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        8
Removing temp directory.

27.22.23. Extracting gate netlist of module `\uart_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.24. Extracting gate netlist of module `\uart_tx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.25. Extracting gate netlist of module `\uart_tx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 58 wires to a netlist network with 6 inputs and 8 outputs.

27.22.25.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.25.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               NOR cells:        3
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:            ANDNOT cells:       20
ABC RESULTS:        internal signals:       44
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        8
Removing temp directory.

27.23. Executing OPT pass (performing simple optimizations).

27.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~1 debug messages>
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~54 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~3 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 19 cells.

27.23.3. Executing OPT_DFF pass (perform DFF optimizations).

27.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1761 unused wires.
<suppressed ~18 debug messages>

27.23.5. Finished fast OPT passes.

27.24. Executing HIERARCHY pass (managing design hierarchy).

27.24.1. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \alu
Used module:     \bit_synchronizer
Used module:     \clk_divider
Used module:     \clk_gate
Used module:     \data_synchronizer
Used module:     \reg_file
Used module:     \reset_synchronizer
Used module:     \sys_control
Used module:         \sys_control_rx
Used module:         \sys_control_tx
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \data_sampling
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \parity_check
Used module:             \stp_check
Used module:             \strt_check
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \parity_calc
Used module:             \serializer
Used module:             \uart_tx_fsm

27.24.2. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \alu
Used module:     \bit_synchronizer
Used module:     \clk_divider
Used module:     \clk_gate
Used module:     \data_synchronizer
Used module:     \reg_file
Used module:     \reset_synchronizer
Used module:     \sys_control
Used module:         \sys_control_rx
Used module:         \sys_control_tx
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \data_sampling
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \parity_check
Used module:             \stp_check
Used module:             \strt_check
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \parity_calc
Used module:             \serializer
Used module:             \uart_tx_fsm
Removed 0 unused modules.

27.25. Printing statistics.

=== alu ===

   Number of wires:               2216
   Number of wire bits:           2263
   Number of public wires:          10
   Number of public wire bits:      57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2239
     $_ANDNOT_                     805
     $_AND_                         99
     $_DFF_PN0_                     17
     $_MUX_                        183
     $_NAND_                        44
     $_NOR_                        169
     $_NOT_                        115
     $_ORNOT_                       82
     $_OR_                         322
     $_XNOR_                        96
     $_XOR_                        307

=== bit_synchronizer ===

   Number of wires:                  5
   Number of wire bits:              6
   Number of public wires:           5
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_PN0_                      3

=== clk_divider ===

   Number of wires:                 54
   Number of wire bits:             66
   Number of public wires:           6
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 58
     $_ANDNOT_                      21
     $_AND_                          2
     $_DFF_PN0_                      5
     $_NAND_                         3
     $_NOT_                          1
     $_ORNOT_                        3
     $_OR_                          10
     $_XNOR_                         6
     $_XOR_                          7

=== clk_gate ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_AND_                          1
     $_DLATCH_N_                     1

=== data_sampling ===

   Number of wires:                 63
   Number of wire bits:             73
   Number of public wires:           8
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 59
     $_ANDNOT_                      10
     $_AND_                          2
     $_DFFE_PN0P_                    3
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                          5
     $_ORNOT_                        1
     $_OR_                          16
     $_XNOR_                         2
     $_XOR_                         16

=== data_synchronizer ===

   Number of wires:                  8
   Number of wire bits:             24
   Number of public wires:           8
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $_ANDNOT_                       1
     $_DFFE_PN0P_                    8
     $_DFF_PN0_                      4

=== deserializer ===

   Number of wires:                  7
   Number of wire bits:             21
   Number of public wires:           7
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_AND_                          8
     $_DFFE_PN0P_                    8

=== edge_bit_counter ===

   Number of wires:                 56
   Number of wire bits:             74
   Number of public wires:           7
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 65
     $_ANDNOT_                      17
     $_AND_                          2
     $_DFFE_PN0P_                    9
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          4
     $_ORNOT_                        1
     $_OR_                          11
     $_XNOR_                         4
     $_XOR_                         12

=== mux ===

   Number of wires:                 10
   Number of wire bits:             11
   Number of public wires:           4
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $_ANDNOT_                       2
     $_NAND_                         1
     $_NOR_                          1
     $_ORNOT_                        1
     $_OR_                           2

=== parity_calc ===

   Number of wires:                 17
   Number of wire bits:             24
   Number of public wires:           6
   Number of public wire bits:      13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $_ANDNOT_                       1
     $_AND_                          1
     $_DFFE_PN0P_                    1
     $_OR_                           1
     $_XNOR_                         3
     $_XOR_                          5

=== parity_check ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_ANDNOT_                       1
     $_DFF_PN0_                      1
     $_XNOR_                         1

=== reg_file ===

   Number of wires:                317
   Number of wire bits:            481
   Number of public wires:          28
   Number of public wire bits:     185
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                433
     $_ANDNOT_                     141
     $_AND_                          2
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                  133
     $_DFFE_PN1P_                    3
     $_MUX_                          8
     $_NAND_                         8
     $_ORNOT_                        4
     $_OR_                         133

=== reset_synchronizer ===

   Number of wires:                  4
   Number of wire bits:              6
   Number of public wires:           4
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_PN0_                      3

=== serializer ===

   Number of wires:                 18
   Number of wire bits:             43
   Number of public wires:          10
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 29
     $_ANDNOT_                       3
     $_AND_                          2
     $_DFFE_PN0P_                   11
     $_MUX_                          7
     $_NAND_                         1
     $_ORNOT_                        2
     $_OR_                           1
     $_XNOR_                         1
     $_XOR_                          1

=== stp_check ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_ANDNOT_                       1

=== strt_check ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_AND_                          1

=== sys_control ===

   Number of wires:                 23
   Number of wire bits:             94
   Number of public wires:          23
   Number of public wire bits:      94
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     sys_control_rx                  1
     sys_control_tx                  1

=== sys_control_rx ===

   Number of wires:                126
   Number of wire bits:            199
   Number of public wires:          26
   Number of public wire bits:      99
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                159
     $_ANDNOT_                      58
     $_AND_                          4
     $_DFFE_PN0P_                   28
     $_DFF_PN0_                      4
     $_MUX_                          2
     $_NAND_                         7
     $_NOR_                         10
     $_NOT_                          1
     $_ORNOT_                       10
     $_OR_                          35

=== sys_control_tx ===

   Number of wires:                 78
   Number of wire bits:            111
   Number of public wires:          11
   Number of public wire bits:      44
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                      51
     $_DFFE_PN0P_                    3
     $_MUX_                          2
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                       12
     $_OR_                           7

=== system_top ===

   Number of wires:                 35
   Number of wire bits:            126
   Number of public wires:          35
   Number of public wire bits:     126
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     alu                             1
     bit_synchronizer                1
     clk_divider                     1
     clk_gate                        1
     data_synchronizer               2
     reg_file                        1
     reset_synchronizer              2
     sys_control                     1
     uart_top                        1

=== uart_rx ===

   Number of wires:                 20
   Number of wire bits:             38
   Number of public wires:          20
   Number of public wire bits:      38
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     data_sampling                   1
     deserializer                    1
     edge_bit_counter                1
     parity_check                    1
     stp_check                       1
     strt_check                      1
     uart_rx_fsm                     1

=== uart_rx_fsm ===

   Number of wires:                138
   Number of wire bits:            153
   Number of public wires:          19
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                129
     $_ANDNOT_                      45
     $_AND_                          3
     $_DFFE_PN0P_                    3
     $_MUX_                          1
     $_NAND_                         1
     $_NOR_                          4
     $_NOT_                          9
     $_ORNOT_                        9
     $_OR_                          31
     $_XNOR_                         3
     $_XOR_                         20

=== uart_top ===

   Number of wires:                 13
   Number of wire bits:             31
   Number of public wires:          13
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     uart_rx                         1
     uart_tx                         1

=== uart_tx ===

   Number of wires:                 13
   Number of wire bits:             21
   Number of public wires:          13
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     mux                             1
     parity_calc                     1
     serializer                      1
     uart_tx_fsm                     1

=== uart_tx_fsm ===

   Number of wires:                 45
   Number of wire bits:             51
   Number of public wires:          10
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     $_ANDNOT_                      20
     $_DFFE_PN0P_                    1
     $_DFF_PN0_                      3
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                        6
     $_OR_                           7

=== design hierarchy ===

   system_top                        1
     alu                             1
     bit_synchronizer                1
     clk_divider                     1
     clk_gate                        1
     data_synchronizer               2
     reg_file                        1
     reset_synchronizer              2
     sys_control                     1
       sys_control_rx                1
       sys_control_tx                1
     uart_top                        1
       uart_rx                       1
         data_sampling               1
         deserializer                1
         edge_bit_counter            1
         parity_check                1
         stp_check                   1
         strt_check                  1
         uart_rx_fsm                 1
       uart_tx                       1
         mux                         1
         parity_calc                 1
         serializer                  1
         uart_tx_fsm                 1

   Number of wires:               3296
   Number of wire bits:           3964
   Number of public wires:         302
   Number of public wire bits:     941
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3374
     $_ANDNOT_                    1178
     $_AND_                        127
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                  216
     $_DFFE_PN1P_                    3
     $_DFF_PN0_                     47
     $_DLATCH_N_                     1
     $_MUX_                        203
     $_NAND_                        73
     $_NOR_                        195
     $_NOT_                        139
     $_ORNOT_                      131
     $_OR_                         576
     $_XNOR_                       116
     $_XOR_                        368

27.26. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

28. Executing TECHMAP pass (map to technology primitives).

28.1. Executing Verilog-2005 frontend: src/test_map.v
Parsing Verilog input from `src/test_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

28.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

29. Executing SIMPLEMAP pass (map simple cells to gate primitives).

30. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

30.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alu':
  mapped 17 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\bit_synchronizer':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\clk_divider':
  mapped 5 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\clk_gate':
Mapping DFF cells in module `\data_sampling':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\data_synchronizer':
  mapped 12 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\deserializer':
  mapped 8 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\edge_bit_counter':
  mapped 9 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\mux':
Mapping DFF cells in module `\parity_calc':
  mapped 1 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\parity_check':
  mapped 1 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\reg_file':
  mapped 137 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\reset_synchronizer':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\serializer':
  mapped 11 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\stp_check':
Mapping DFF cells in module `\strt_check':
Mapping DFF cells in module `\sys_control':
Mapping DFF cells in module `\sys_control_rx':
  mapped 32 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\sys_control_tx':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\system_top':
Mapping DFF cells in module `\uart_rx':
Mapping DFF cells in module `\uart_rx_fsm':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\uart_top':
Mapping DFF cells in module `\uart_tx':
Mapping DFF cells in module `\uart_tx_fsm':
  mapped 4 $_DFFSR_PNN_ cells to \DFFSR cells.

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

31.9. Finished OPT passes. (There is nothing left to do.)

32. Executing ABC pass (technology mapping using ABC).

32.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 2222 gates and 2243 wires to a netlist network with 21 inputs and 16 outputs.

32.1.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.1.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        8
ABC RESULTS:            MUX2X1 cells:        2
ABC RESULTS:           OAI22X1 cells:        5
ABC RESULTS:           AOI22X1 cells:       21
ABC RESULTS:            AND2X2 cells:       40
ABC RESULTS:           XNOR2X1 cells:       42
ABC RESULTS:            XOR2X1 cells:       30
ABC RESULTS:            NOR2X1 cells:      173
ABC RESULTS:             OR2X2 cells:       12
ABC RESULTS:           NAND3X1 cells:      107
ABC RESULTS:             INVX1 cells:      164
ABC RESULTS:           NAND2X1 cells:      155
ABC RESULTS:           OAI21X1 cells:      230
ABC RESULTS:           AOI21X1 cells:       81
ABC RESULTS:        internal signals:     2206
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

32.2. Extracting gate netlist of module `\bit_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

32.3. Extracting gate netlist of module `\clk_divider' to `<abc-temp-dir>/input.blif'..
Extracted 53 gates and 64 wires to a netlist network with 11 inputs and 6 outputs.

32.3.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.3.2. Re-integrating ABC results.
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:            XOR2X1 cells:        2
ABC RESULTS:            NOR2X1 cells:        4
ABC RESULTS:             INVX1 cells:       10
ABC RESULTS:           NAND3X1 cells:        5
ABC RESULTS:           XNOR2X1 cells:        3
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:           OAI21X1 cells:        5
ABC RESULTS:           AOI21X1 cells:       13
ABC RESULTS:        internal signals:       47
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        6
Removing temp directory.

32.4. Extracting gate netlist of module `\clk_gate' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

32.4.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

32.5. Extracting gate netlist of module `\data_sampling' to `<abc-temp-dir>/input.blif'..
Extracted 59 gates and 73 wires to a netlist network with 14 inputs and 4 outputs.

32.5.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.5.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:             INVX1 cells:       12
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:            AND2X2 cells:        6
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           XNOR2X1 cells:        2
ABC RESULTS:           NAND3X1 cells:        9
ABC RESULTS:            NOR2X1 cells:        8
ABC RESULTS:           NAND2X1 cells:       17
ABC RESULTS:           OAI21X1 cells:       14
ABC RESULTS:        internal signals:       55
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        4
Removing temp directory.

32.6. Extracting gate netlist of module `\data_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 9 gates and 27 wires to a netlist network with 18 inputs and 9 outputs.

32.6.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.6.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        2
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:           NAND3X1 cells:        8
ABC RESULTS:           NAND2X1 cells:        8
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       18
ABC RESULTS:          output signals:        9
Removing temp directory.

32.7. Extracting gate netlist of module `\deserializer' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 27 wires to a netlist network with 11 inputs and 16 outputs.

32.7.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.7.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:            NOR2X1 cells:        8
ABC RESULTS:           NAND2X1 cells:        8
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:       16
Removing temp directory.

32.8. Extracting gate netlist of module `\edge_bit_counter' to `<abc-temp-dir>/input.blif'..
Extracted 65 gates and 81 wires to a netlist network with 16 inputs and 9 outputs.

32.8.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.8.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:           NAND3X1 cells:       17
ABC RESULTS:           OAI21X1 cells:       15
ABC RESULTS:           NAND2X1 cells:       10
ABC RESULTS:             INVX1 cells:       17
ABC RESULTS:            NOR2X1 cells:       11
ABC RESULTS:           XNOR2X1 cells:        5
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:        internal signals:       56
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

32.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 7 gates and 11 wires to a netlist network with 4 inputs and 1 outputs.

32.9.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.9.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:        internal signals:        6
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

32.10. Extracting gate netlist of module `\parity_calc' to `<abc-temp-dir>/input.blif'..
Extracted 12 gates and 23 wires to a netlist network with 11 inputs and 1 outputs.

32.10.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.10.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           OAI21X1 cells:        3
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        8
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:           AOI22X1 cells:        5
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        1
Removing temp directory.

32.11. Extracting gate netlist of module `\parity_check' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 5 wires to a netlist network with 3 inputs and 1 outputs.

32.11.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.11.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

32.12. Extracting gate netlist of module `\reg_file' to `<abc-temp-dir>/input.blif'..
Extracted 433 gates and 584 wires to a netlist network with 151 inputs and 137 outputs.

32.12.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.12.2. Re-integrating ABC results.
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:            NOR3X1 cells:       19
ABC RESULTS:           AOI22X1 cells:       28
ABC RESULTS:           NAND3X1 cells:       47
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:            AND2X2 cells:        5
ABC RESULTS:           NAND2X1 cells:      130
ABC RESULTS:            NOR2X1 cells:       52
ABC RESULTS:           AOI21X1 cells:       36
ABC RESULTS:             INVX1 cells:       60
ABC RESULTS:           OAI21X1 cells:      129
ABC RESULTS:        internal signals:      296
ABC RESULTS:           input signals:      151
ABC RESULTS:          output signals:      137
Removing temp directory.

32.13. Extracting gate netlist of module `\reset_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

32.14. Extracting gate netlist of module `\serializer' to `<abc-temp-dir>/input.blif'..
Extracted 29 gates and 51 wires to a netlist network with 22 inputs and 12 outputs.

32.14.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.14.2. Re-integrating ABC results.
ABC RESULTS:           NAND2X1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:           AOI22X1 cells:        7
ABC RESULTS:            NOR3X1 cells:        7
ABC RESULTS:           OAI22X1 cells:        7
ABC RESULTS:             INVX1 cells:       13
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:           OAI21X1 cells:        4
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:       12
Removing temp directory.

32.15. Extracting gate netlist of module `\stp_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

32.15.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.15.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

32.16. Extracting gate netlist of module `\strt_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

32.16.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.16.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

32.17. Extracting gate netlist of module `\sys_control' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

32.18. Extracting gate netlist of module `\sys_control_rx' to `<abc-temp-dir>/input.blif'..
Extracted 155 gates and 222 wires to a netlist network with 67 inputs and 54 outputs.

32.18.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.18.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:            NOR3X1 cells:        3
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:           NAND3X1 cells:       16
ABC RESULTS:           AOI21X1 cells:        7
ABC RESULTS:            NOR2X1 cells:       29
ABC RESULTS:             INVX1 cells:       47
ABC RESULTS:           NAND2X1 cells:       28
ABC RESULTS:           OAI21X1 cells:       49
ABC RESULTS:        internal signals:      101
ABC RESULTS:           input signals:       67
ABC RESULTS:          output signals:       54
Removing temp directory.

32.19. Extracting gate netlist of module `\sys_control_tx' to `<abc-temp-dir>/input.blif'..
Extracted 82 gates and 112 wires to a netlist network with 30 inputs and 12 outputs.

32.19.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.19.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:           NAND2X1 cells:       27
ABC RESULTS:            NOR2X1 cells:        2
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:           NAND3X1 cells:       15
ABC RESULTS:           OAI21X1 cells:        6
ABC RESULTS:        internal signals:       70
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       12
Removing temp directory.

32.20. Extracting gate netlist of module `\system_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

32.21. Extracting gate netlist of module `\uart_rx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

32.22. Extracting gate netlist of module `\uart_rx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 129 gates and 151 wires to a netlist network with 22 inputs and 7 outputs.

32.22.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.22.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:       22
ABC RESULTS:           NAND3X1 cells:       18
ABC RESULTS:            AND2X2 cells:        7
ABC RESULTS:           NAND2X1 cells:       20
ABC RESULTS:            NOR2X1 cells:       19
ABC RESULTS:           AOI21X1 cells:        8
ABC RESULTS:             OR2X2 cells:        6
ABC RESULTS:           OAI21X1 cells:       32
ABC RESULTS:        internal signals:      122
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        7
Removing temp directory.

32.23. Extracting gate netlist of module `\uart_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

32.24. Extracting gate netlist of module `\uart_tx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

32.25. Extracting gate netlist of module `\uart_tx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 41 gates and 48 wires to a netlist network with 7 inputs and 7 outputs.

32.25.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

32.25.2. Re-integrating ABC results.
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        7
ABC RESULTS:           OAI21X1 cells:        6
ABC RESULTS:           NAND2X1 cells:        5
ABC RESULTS:        internal signals:       34
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        7
Removing temp directory.

33. Executing FLATTEN pass (flatten design).
Deleting now unused module alu.
Deleting now unused module bit_synchronizer.
Deleting now unused module clk_divider.
Deleting now unused module clk_gate.
Deleting now unused module data_sampling.
Deleting now unused module data_synchronizer.
Deleting now unused module deserializer.
Deleting now unused module edge_bit_counter.
Deleting now unused module mux.
Deleting now unused module parity_calc.
Deleting now unused module parity_check.
Deleting now unused module reg_file.
Deleting now unused module reset_synchronizer.
Deleting now unused module serializer.
Deleting now unused module stp_check.
Deleting now unused module strt_check.
Deleting now unused module sys_control.
Deleting now unused module sys_control_rx.
Deleting now unused module sys_control_tx.
Deleting now unused module uart_rx.
Deleting now unused module uart_rx_fsm.
Deleting now unused module uart_top.
Deleting now unused module uart_tx.
Deleting now unused module uart_tx_fsm.
<suppressed ~26 debug messages>

34. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 3941 unused wires.

35. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port system_top.ref_clk: Missing option -inpad.
Don't map input port system_top.reset_n: Missing option -inpad.
Don't map input port system_top.rx_in: Missing option -inpad.
Mapping port system_top.tx_out using BUFX2.
Don't map input port system_top.uart_clk: Missing option -inpad.

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module system_top.

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system_top'.
Removed a total of 0 cells.

36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \system_top.
Performed a total of 0 changes.

36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system_top'.
Removed a total of 0 cells.

36.6. Executing OPT_DFF pass (perform DFF optimizations).

36.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \system_top..

36.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module system_top.

36.9. Finished OPT passes. (There is nothing left to do.)

37. Executing BLIF backend.

38. Printing statistics.

=== system_top ===

   Number of wires:               2400
   Number of wire bits:           2677
   Number of public wires:        2400
   Number of public wire bits:    2677
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2661
     $_DLATCH_N_                     1
     AND2X2                         71
     AOI21X1                       157
     AOI22X1                        65
     BUFX2                           1
     DFFSR                         267
     INVX1                         385
     MUX2X1                          2
     NAND2X1                       439
     NAND3X1                       260
     NOR2X1                        313
     NOR3X1                         41
     OAI21X1                       517
     OAI22X1                        24
     OR2X2                          31
     XNOR2X1                        54
     XOR2X1                         33

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: 772deb8281, CPU: user 4.30s system 0.16s, MEM: 87.17 MB peak
Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)
Time spent: 38% 2x abc (2 sec), 19% 66x opt_expr (1 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)


-- Executing script file `synth/trial_synth.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/latch.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/latch.v' to AST representation.
Generating RTLIL representation for module `\latch'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \latch

3.1.2. Analyzing design hierarchy..
Top module:  \latch
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/latch.v:4$1 in module latch.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\latch.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/latch.v:4$1'.
     1/1: $1\q[0:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\latch.\q' from process `\latch.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/latch.v:4$1': $auto$proc_dlatch.cc:427:proc_dlatch$15

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\latch.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/latch.v:4$1'.
Removing empty process `latch.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/latch.v:4$1'.
Cleaned up 1 empty switch.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.
<suppressed ~5 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..
Removed 1 unused cells and 9 unused wires.
<suppressed ~2 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module latch...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \latch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \latch.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \latch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \latch.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.8.9. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module latch:
  created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \latch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \latch.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \latch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \latch.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dlatch.
No more expansions possible.
<suppressed ~74 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\latch' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \latch

3.24.2. Analyzing design hierarchy..
Top module:  \latch
Removed 0 unused modules.

3.25. Printing statistics.

=== latch ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_DLATCH_P_                     1

3.26. Executing CHECK pass (checking for obvious problems).
Checking module latch...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\latch':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \latch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \latch.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\latch' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

7. Executing FLATTEN pass (flatten design).

8. Executing SETUNDEF pass (replace undef values with defined constants).

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port latch.clk: Missing option -inpad.
Don't map input port latch.d: Missing option -inpad.
Mapping port latch.q using BUFX2.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \latch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \latch.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== latch ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_DLATCH_P_                     1
     BUFX2                           1

End of script. Logfile hash: b67b15c980, CPU: user 0.07s system 0.01s, MEM: 8.14 MB peak
Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)
Time spent: 18% 17x opt_expr (0 sec), 16% 3x read_verilog (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)


-- Executing script file `synth/trial_synth.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/latch.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/latch.v' to AST representation.
Generating RTLIL representation for module `\latch'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \latch

3.1.2. Analyzing design hierarchy..
Top module:  \latch
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/latch.v:4$1 in module latch.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\latch.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/latch.v:4$1'.
     1/1: $1\q[0:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\latch.\q' from process `\latch.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/latch.v:4$1': $auto$proc_dlatch.cc:427:proc_dlatch$15

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\latch.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/latch.v:4$1'.
Removing empty process `latch.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/latch.v:4$1'.
Cleaned up 1 empty switch.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.
<suppressed ~5 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..
Removed 1 unused cells and 9 unused wires.
<suppressed ~2 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module latch...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \latch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \latch.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \latch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \latch.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.8.9. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module latch:
  created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \latch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \latch.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \latch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \latch.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dlatch.
No more expansions possible.
<suppressed ~74 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\latch' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \latch

3.24.2. Analyzing design hierarchy..
Top module:  \latch
Removed 0 unused modules.

3.25. Printing statistics.

=== latch ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_DLATCH_P_                     1

3.26. Executing CHECK pass (checking for obvious problems).
Checking module latch...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\latch':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \latch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \latch.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\latch' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

7. Executing FLATTEN pass (flatten design).

8. Executing SETUNDEF pass (replace undef values with defined constants).

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port latch.d: Missing option -inpad.
Don't map input port latch.en: Missing option -inpad.
Mapping port latch.q using BUFX2.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \latch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \latch.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== latch ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_DLATCH_P_                     1
     BUFX2                           1

End of script. Logfile hash: cdccf1eb88, CPU: user 0.07s system 0.01s, MEM: 8.13 MB peak
Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)
Time spent: 19% 17x opt_expr (0 sec), 16% 3x read_verilog (0 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)


-- Executing script file `synth/synth.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/system_top.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/system_top.v' to AST representation.
Generating RTLIL representation for module `\system_top'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\bit_synchronizer'.
Warning: Replacing memory \reg_file with list of registers. See /home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:17
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\reset_synchronizer'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\data_synchronizer'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v' to AST representation.
Generating RTLIL representation for module `\clk_gate'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v' to AST representation.
Generating RTLIL representation for module `\clk_divider'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_top.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_top.v' to AST representation.
Generating RTLIL representation for module `\uart_top'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v' to AST representation.
Generating RTLIL representation for module `\reg_file'.
Warning: Replacing memory \mem with list of registers. See /home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:33
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control.v' to AST representation.
Generating RTLIL representation for module `\sys_control'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v' to AST representation.
Generating RTLIL representation for module `\sys_control_tx'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v' to AST representation.
Generating RTLIL representation for module `\sys_control_rx'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx.v' to AST representation.
Generating RTLIL representation for module `\uart_rx'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx.v' to AST representation.
Generating RTLIL representation for module `\uart_tx'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v' to AST representation.
Generating RTLIL representation for module `\mux'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v' to AST representation.
Generating RTLIL representation for module `\serializer'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v' to AST representation.
Generating RTLIL representation for module `\parity_calc'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v' to AST representation.
Generating RTLIL representation for module `\uart_tx_fsm'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v' to AST representation.
Generating RTLIL representation for module `\stp_check'.
Successfully finished Verilog frontend.

21. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v' to AST representation.
Generating RTLIL representation for module `\strt_check'.
Successfully finished Verilog frontend.

22. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v' to AST representation.
Generating RTLIL representation for module `\parity_check'.
Successfully finished Verilog frontend.

23. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v' to AST representation.
Generating RTLIL representation for module `\deserializer'.
Successfully finished Verilog frontend.

24. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v' to AST representation.
Generating RTLIL representation for module `\edge_bit_counter'.
Successfully finished Verilog frontend.

25. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v' to AST representation.
Generating RTLIL representation for module `\data_sampling'.
Successfully finished Verilog frontend.

26. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v' to AST representation.
Generating RTLIL representation for module `\uart_rx_fsm'.
Successfully finished Verilog frontend.

27. Executing SYNTH pass.

27.1. Executing HIERARCHY pass (managing design hierarchy).

27.1.1. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \bit_synchronizer
Used module:     \reset_synchronizer
Used module:     \data_synchronizer
Used module:     \clk_gate
Used module:     \clk_divider
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \stp_check
Used module:             \strt_check
Used module:             \parity_check
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \data_sampling
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \serializer
Used module:             \parity_calc
Used module:             \uart_tx_fsm
Used module:     \alu
Used module:     \reg_file
Used module:     \sys_control
Used module:         \sys_control_tx
Used module:         \sys_control_rx

27.1.2. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \bit_synchronizer
Used module:     \reset_synchronizer
Used module:     \data_synchronizer
Used module:     \clk_gate
Used module:     \clk_divider
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \stp_check
Used module:             \strt_check
Used module:             \parity_check
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \data_sampling
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \serializer
Used module:             \parity_calc
Used module:             \uart_tx_fsm
Used module:     \alu
Used module:     \reg_file
Used module:     \sys_control
Used module:         \sys_control_tx
Used module:         \sys_control_rx
Removed 0 unused modules.
Warning: Resizing cell port system_top.reg_file_inst.addr_in from 8 bits to 4 bits.
Warning: Resizing cell port system_top.sys_control_inst.rf_addr_out from 8 bits to 4 bits.

27.2. Executing PROC pass (convert processes to netlists).

27.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 31 empty switches in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Cleaned up 31 empty switches.

27.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 6 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183 in module uart_rx_fsm.
Marked 8 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162 in module uart_rx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160 in module uart_rx_fsm.
Marked 3 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146 in module data_sampling.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140 in module edge_bit_counter.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136 in module deserializer.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130 in module parity_check.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128 in module parity_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126 in module strt_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125 in module stp_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117 in module uart_tx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116 in module uart_tx_fsm.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113 in module uart_tx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111 in module uart_tx_fsm.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102 in module parity_calc.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98 in module serializer.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93 in module serializer.
Removed 1 dead cases from process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92 in module mux.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92 in module mux.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86 in module sys_control_rx.
Marked 9 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85 in module sys_control_rx.
Marked 11 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81 in module sys_control_tx.
Marked 7 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79 in module sys_control_tx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77 in module sys_control_tx.
Removed 1 dead cases from process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56 in module reg_file.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56 in module reg_file.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34 in module alu.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32 in module alu.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21 in module clk_divider.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18 in module clk_gate.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8 in module reset_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4 in module bit_synchronizer.
Removed a total of 2 dead cases.

27.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 12 redundant assignments.
Promoted 41 assignments to connections.

27.2.4. Executing PROC_INIT pass (extract init attributes).

27.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
Found async reset \reset_n in `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Found async reset \reset_n in `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Found async reset \reset_n in `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Found async reset \reset_n in `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
Found async reset \reset_n in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Found async reset \reset_n in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
Found async reset \reset_n in `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Found async reset \reset_n in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Found async reset \reset_n in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
Found async reset \reset_n in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
Found async reset \reset_n in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Found async reset \reset_n in `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
Found async reset \reset_n in `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
Found async reset \reset_n in `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
Found async reset \reset_n in `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.

27.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~91 debug messages>

27.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
     1/10: $3\data_valid_out[0:0]
     2/10: $2\data_valid_out[0:0]
     3/10: $3\deser_en_out[0:0]
     4/10: $2\deser_en_out[0:0]
     5/10: $2\strt_chk_en_out[0:0]
     6/10: $1\strt_chk_en_out[0:0]
     7/10: $1\counter_en_out[0:0]
     8/10: $1\data_sample_en_out[0:0]
     9/10: $1\deser_en_out[0:0]
    10/10: $1\data_valid_out[0:0]
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
     1/8: $8\next_state[2:0]
     2/8: $7\next_state[2:0]
     3/8: $6\next_state[2:0]
     4/8: $5\next_state[2:0]
     5/8: $4\next_state[2:0]
     6/8: $3\next_state[2:0]
     7/8: $2\next_state[2:0]
     8/8: $1\next_state[2:0]
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
     1/3: $0\register[2:0] [2]
     2/3: $0\register[2:0] [1]
     3/3: $0\register[2:0] [0]
Creating decoders for process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
     1/2: $0\edge_cnt_out[4:0]
     2/2: $0\bit_cnt_out[3:0]
Creating decoders for process `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
     1/1: $0\register[7:0]
Creating decoders for process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
     1/5: $5\par_err_out[0:0]
     2/5: $4\par_err_out[0:0]
     3/5: $3\par_err_out[0:0]
     4/5: $2\par_err_out[0:0]
     5/5: $1\par_err_out[0:0]
Creating decoders for process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
     1/1: $0\register[8:0]
Creating decoders for process `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
     1/2: $2\strt_err_out[0:0]
     2/2: $1\strt_err_out[0:0]
Creating decoders for process `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
     1/2: $2\stp_err_out[0:0]
     2/2: $1\stp_err_out[0:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
     1/1: $0\busy_out[0:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
     1/1: $1\mux_sel_out[1:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
     1/5: $5\next_state[2:0]
     2/5: $4\next_state[2:0]
     3/5: $3\next_state[2:0]
     4/5: $2\next_state[2:0]
     5/5: $1\next_state[2:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
     1/1: $0\par_bit_out[0:0]
Creating decoders for process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
     1/1: $0\counter[2:0]
Creating decoders for process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
     1/1: $0\int_reg[7:0]
Creating decoders for process `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
     1/1: $1\tx_out[0:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
     1/1: $0\uart_alu_send_data_out[15:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
     1/1: $0\uart_rf_send_data_out[7:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
     1/1: $0\rf_addr_reg[7:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
     1/30: $2\alu_data_store[0:0]
     2/30: $2\uart_alu_send_out[0:0]
     3/30: $2\alu_fun_out[3:0]
     4/30: $2\alu_en_out[0:0]
     5/30: $4\rf_addr_out[3:0]
     6/30: $4\rf_wr_data_out[7:0]
     7/30: $4\rf_wr_en_out[0:0]
     8/30: $3\rf_addr_out[3:0]
     9/30: $3\rf_wr_data_out[7:0]
    10/30: $3\rf_wr_en_out[0:0]
    11/30: $2\rf_rd_store[0:0]
    12/30: $2\uart_rf_send_out[0:0]
    13/30: $3\rf_addr_en[0:0]
    14/30: $2\rf_wr_data_out[7:0]
    15/30: $2\rf_addr_out[3:0]
    16/30: $2\rf_wr_en_out[0:0]
    17/30: $2\rf_addr_en[0:0]
    18/30: $1\alu_data_store[0:0]
    19/30: $1\rf_rd_store[0:0]
    20/30: $1\rf_addr_en[0:0]
    21/30: $1\uart_alu_send_out[0:0]
    22/30: $1\uart_rf_send_out[0:0]
    23/30: $1\clk_div_en_out[0:0]
    24/30: $1\clk_gate_en_out[0:0]
    25/30: $1\alu_fun_out[3:0]
    26/30: $1\alu_en_out[0:0]
    27/30: $1\rf_wr_data_out[7:0]
    28/30: $1\rf_addr_out[3:0]
    29/30: $1\rf_rd_en_out[0:0]
    30/30: $1\rf_wr_en_out[0:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
     1/11: $11\next_state[3:0]
     2/11: $10\next_state[3:0]
     3/11: $9\next_state[3:0]
     4/11: $8\next_state[3:0]
     5/11: $7\next_state[3:0]
     6/11: $6\next_state[3:0]
     7/11: $5\next_state[3:0]
     8/11: $4\next_state[3:0]
     9/11: $3\next_state[3:0]
    10/11: $2\next_state[3:0]
    11/11: $1\next_state[3:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
     1/1: $0\current_state[3:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
     1/2: $1\uart_tx_data_out[7:0]
     2/2: $1\uart_tx_data_valid_out[0:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
     1/7: $7\next_state[2:0]
     2/7: $6\next_state[2:0]
     3/7: $5\next_state[2:0]
     4/7: $4\next_state[2:0]
     5/7: $3\next_state[2:0]
     6/7: $2\next_state[2:0]
     7/7: $1\next_state[2:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
     1/30: $4$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$76
     2/30: $3$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$75
     3/30: $3$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$74
     4/30: $2$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR[3:0]$68
     5/30: $2$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA[7:0]$69
     6/30: $2$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$71
     7/30: $2$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$70
     8/30: $1$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$65
     9/30: $1$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$64
    10/30: $1$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA[7:0]$63
    11/30: $1$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR[3:0]$62
    12/30: $1\i[31:0]
    13/30: $0\mem[15][7:0]
    14/30: $0\mem[14][7:0]
    15/30: $0\mem[13][7:0]
    16/30: $0\mem[12][7:0]
    17/30: $0\mem[11][7:0]
    18/30: $0\mem[10][7:0]
    19/30: $0\mem[9][7:0]
    20/30: $0\mem[8][7:0]
    21/30: $0\mem[7][7:0]
    22/30: $0\mem[6][7:0]
    23/30: $0\mem[5][7:0]
    24/30: $0\mem[4][7:0]
    25/30: $0\mem[3][7:0]
    26/30: $0\mem[2][7:0]
    27/30: $0\mem[1][7:0]
    28/30: $0\mem[0][7:0]
    29/30: $0\rd_data_valid_out[0:0]
    30/30: $0\rd_data_out[7:0]
Creating decoders for process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
     1/6: $5\alu_out_comp[15:0]
     2/6: $4\alu_out_comp[15:0]
     3/6: $3\alu_out_comp[15:0]
     4/6: $2\alu_out_comp[15:0]
     5/6: $1\alu_out_comp[15:0]
     6/6: $1\alu_out_comp_valid[0:0]
Creating decoders for process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
     1/2: $0\data_valid_out[0:0]
     2/2: $0\data_out[15:0]
Creating decoders for process `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
     1/1: $0\count[4:0]
Creating decoders for process `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
     1/1: $1\latch_out[0:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
     1/1: $0\sync_data_out[7:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
     1/1: $0\enable_pulse_out[0:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
     1/1: $0\ff[2:0]
Creating decoders for process `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
     1/1: $0\ff[2:0]
Creating decoders for process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
     1/4: $1\i[31:0]
     2/4: $0\reg_file[0][1:0]
     3/4: $0\sync_data_out[0:0]
     4/4: $1$splitcmplxassign$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:24$3[2:0]$7

27.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\uart_rx_fsm.\data_valid_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\data_sample_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\deser_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\stp_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\strt_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\par_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\counter_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\next_state' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
No latch inferred for signal `\parity_check.\par_err_out' from process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
No latch inferred for signal `\strt_check.\strt_err_out' from process `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
No latch inferred for signal `\stp_check.\stp_err_out' from process `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
No latch inferred for signal `\uart_tx_fsm.\mux_sel_out' from process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
No latch inferred for signal `\uart_tx_fsm.\next_state' from process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
No latch inferred for signal `\mux.\tx_out' from process `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
No latch inferred for signal `\sys_control_rx.\rf_wr_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_rd_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_addr_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_wr_data_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_fun_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\clk_gate_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\clk_div_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\uart_rf_send_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\uart_alu_send_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_addr_en' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_rd_store' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_data_store' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\next_state' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
No latch inferred for signal `\sys_control_tx.\uart_tx_data_valid_out' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
No latch inferred for signal `\sys_control_tx.\uart_tx_data_out' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
No latch inferred for signal `\sys_control_tx.\next_state' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
No latch inferred for signal `\alu.\alu_out_comp' from process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
No latch inferred for signal `\alu.\alu_out_comp_valid' from process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Latch inferred for signal `\clk_gate.\latch_out' from process `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18': $auto$proc_dlatch.cc:427:proc_dlatch$1270

27.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\uart_rx_fsm.\current_state' using process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
  created $adff cell `$procdff$1271' with positive edge clock and negative level reset.
Creating register for signal `\data_sampling.\register' using process `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
  created $adff cell `$procdff$1272' with positive edge clock and negative level reset.
Creating register for signal `\edge_bit_counter.\bit_cnt_out' using process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
  created $adff cell `$procdff$1273' with positive edge clock and negative level reset.
Creating register for signal `\edge_bit_counter.\edge_cnt_out' using process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
  created $adff cell `$procdff$1274' with positive edge clock and negative level reset.
Creating register for signal `\deserializer.\register' using process `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
  created $adff cell `$procdff$1275' with positive edge clock and negative level reset.
Creating register for signal `\parity_check.\register' using process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
  created $adff cell `$procdff$1276' with positive edge clock and negative level reset.
Creating register for signal `\uart_tx_fsm.\busy_out' using process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
  created $adff cell `$procdff$1277' with positive edge clock and negative level reset.
Creating register for signal `\uart_tx_fsm.\current_state' using process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
  created $adff cell `$procdff$1278' with positive edge clock and negative level reset.
Creating register for signal `\parity_calc.\par_bit_out' using process `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
  created $adff cell `$procdff$1279' with positive edge clock and negative level reset.
Creating register for signal `\serializer.\counter' using process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
  created $adff cell `$procdff$1280' with positive edge clock and negative level reset.
Creating register for signal `\serializer.\int_reg' using process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
  created $adff cell `$procdff$1281' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\uart_alu_send_data_out' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
  created $adff cell `$procdff$1282' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\uart_rf_send_data_out' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
  created $adff cell `$procdff$1283' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\rf_addr_reg' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
  created $adff cell `$procdff$1284' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\current_state' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
  created $adff cell `$procdff$1285' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_tx.\current_state' using process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
  created $adff cell `$procdff$1286' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\rd_data_out' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1287' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\rd_data_valid_out' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1288' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\i' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1289' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[0]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1290' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[1]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1291' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[2]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1292' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[3]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1293' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[4]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1294' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[5]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1295' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[6]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1296' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[7]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1297' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[8]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1298' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[9]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1299' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[10]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1300' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[11]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1301' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[12]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1302' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[13]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1303' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[14]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1304' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[15]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1305' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1306' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1307' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1308' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1309' with positive edge clock and negative level reset.
Creating register for signal `\alu.\data_out' using process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
  created $adff cell `$procdff$1310' with positive edge clock and negative level reset.
Creating register for signal `\alu.\data_valid_out' using process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
  created $adff cell `$procdff$1311' with positive edge clock and negative level reset.
Creating register for signal `\clk_divider.\count' using process `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
  created $adff cell `$procdff$1312' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\sync_data_out' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
  created $adff cell `$procdff$1313' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\enable_pulse_out' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
  created $adff cell `$procdff$1314' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\ff' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
  created $adff cell `$procdff$1315' with positive edge clock and negative level reset.
Creating register for signal `\reset_synchronizer.\ff' using process `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
  created $adff cell `$procdff$1316' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\sync_data_out' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1317' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\i' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1318' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.$splitcmplxassign$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:24$3' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1319' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\reg_file[0]' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1320' with positive edge clock and negative level reset.

27.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

27.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
Found and cleaned up 8 empty switches in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
Found and cleaned up 4 empty switches in `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Removing empty process `data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Found and cleaned up 3 empty switches in `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Removing empty process `edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Found and cleaned up 1 empty switch in `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Removing empty process `deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Found and cleaned up 5 empty switches in `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
Removing empty process `parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
Removing empty process `parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
Found and cleaned up 2 empty switches in `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
Removing empty process `strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
Found and cleaned up 2 empty switches in `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
Removing empty process `stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
Found and cleaned up 2 empty switches in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Found and cleaned up 1 empty switch in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
Found and cleaned up 5 empty switches in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
Found and cleaned up 2 empty switches in `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Removing empty process `parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Found and cleaned up 2 empty switches in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Removing empty process `serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Found and cleaned up 2 empty switches in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Removing empty process `serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Found and cleaned up 1 empty switch in `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
Removing empty process `mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Found and cleaned up 9 empty switches in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
Found and cleaned up 11 empty switches in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
Found and cleaned up 1 empty switch in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
Found and cleaned up 7 empty switches in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
Found and cleaned up 4 empty switches in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Removing empty process `reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Found and cleaned up 5 empty switches in `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Removing empty process `alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Removing empty process `alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
Found and cleaned up 3 empty switches in `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Removing empty process `clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Found and cleaned up 1 empty switch in `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
Removing empty process `clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
Found and cleaned up 1 empty switch in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
Removing empty process `reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
Removing empty process `bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
Cleaned up 91 empty switches.

27.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_rx_fsm.
<suppressed ~6 debug messages>
Optimizing module data_sampling.
Optimizing module edge_bit_counter.
Optimizing module deserializer.
Optimizing module parity_check.
<suppressed ~4 debug messages>
Optimizing module strt_check.
<suppressed ~1 debug messages>
Optimizing module stp_check.
Optimizing module uart_tx_fsm.
<suppressed ~6 debug messages>
Optimizing module parity_calc.
<suppressed ~2 debug messages>
Optimizing module serializer.
<suppressed ~1 debug messages>
Optimizing module mux.
<suppressed ~1 debug messages>
Optimizing module uart_tx.
Optimizing module uart_rx.
Optimizing module sys_control_rx.
<suppressed ~3 debug messages>
Optimizing module sys_control_tx.
<suppressed ~4 debug messages>
Optimizing module sys_control.
Optimizing module reg_file.
<suppressed ~2 debug messages>
Optimizing module alu.
<suppressed ~3 debug messages>
Optimizing module uart_top.
Optimizing module clk_divider.
<suppressed ~3 debug messages>
Optimizing module clk_gate.
<suppressed ~7 debug messages>
Optimizing module data_synchronizer.
Optimizing module reset_synchronizer.
Optimizing module bit_synchronizer.
Optimizing module system_top.

27.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_rx_fsm.
<suppressed ~4 debug messages>
Optimizing module data_sampling.
<suppressed ~6 debug messages>
Optimizing module edge_bit_counter.
Optimizing module deserializer.
Optimizing module parity_check.
Optimizing module strt_check.
Optimizing module stp_check.
Optimizing module uart_tx_fsm.
Optimizing module parity_calc.
Optimizing module serializer.
Optimizing module mux.
Optimizing module uart_tx.
Optimizing module uart_rx.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module sys_control.
Optimizing module reg_file.
Optimizing module alu.
Optimizing module uart_top.
Optimizing module clk_divider.
<suppressed ~2 debug messages>
Optimizing module clk_gate.
Optimizing module data_synchronizer.
Optimizing module reset_synchronizer.
Optimizing module bit_synchronizer.
Optimizing module system_top.

27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \uart_tx_fsm..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \system_top..
Removed 46 unused cells and 427 unused wires.
<suppressed ~69 debug messages>

27.5. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

27.6. Executing OPT pass (performing simple optimizations).

27.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~18 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
<suppressed ~3 debug messages>
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~48 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~144 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~36 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~99 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~30 debug messages>
Removed a total of 126 cells.

27.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1193.
    dead port 2/2 on $mux $procmux$1195.
    dead port 2/2 on $mux $procmux$1205.
    dead port 2/2 on $mux $procmux$1207.
    dead port 2/2 on $mux $procmux$1218.
    dead port 2/2 on $mux $procmux$1220.
    dead port 2/2 on $mux $procmux$1240.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1250.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$376.
    dead port 2/2 on $mux $procmux$379.
    dead port 2/2 on $mux $procmux$381.
    dead port 2/2 on $mux $procmux$385.
    dead port 2/2 on $mux $procmux$388.
    dead port 2/2 on $mux $procmux$390.
    dead port 1/2 on $mux $procmux$397.
    dead port 2/2 on $mux $procmux$399.
    dead port 2/2 on $mux $procmux$405.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$945.
    dead port 1/2 on $mux $procmux$948.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$423.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$414.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$654.
    dead port 2/2 on $mux $procmux$516.
    dead port 2/2 on $mux $procmux$522.
    dead port 2/2 on $mux $procmux$529.
    dead port 2/2 on $mux $procmux$536.
    dead port 2/2 on $mux $procmux$543.
    dead port 2/2 on $mux $procmux$551.
    dead port 2/2 on $mux $procmux$559.
    dead port 2/2 on $mux $procmux$567.
    dead port 2/2 on $mux $procmux$740.
    dead port 2/2 on $mux $procmux$576.
    dead port 2/2 on $mux $procmux$747.
    dead port 2/2 on $mux $procmux$755.
    dead port 2/2 on $mux $procmux$764.
    dead port 2/2 on $mux $procmux$586.
    dead port 2/2 on $mux $procmux$774.
    dead port 2/2 on $mux $procmux$785.
    dead port 2/2 on $mux $procmux$797.
    dead port 2/2 on $mux $procmux$596.
    dead port 2/2 on $mux $procmux$810.
    dead port 2/2 on $mux $procmux$828.
    dead port 2/2 on $mux $procmux$830.
    dead port 2/2 on $mux $procmux$844.
    dead port 2/2 on $mux $procmux$607.
    dead port 2/2 on $mux $procmux$618.
    dead port 2/2 on $mux $procmux$629.
    dead port 2/2 on $mux $procmux$641.
    dead port 2/2 on $mux $procmux$510.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$878.
    dead port 2/2 on $mux $procmux$886.
    dead port 2/2 on $mux $procmux$895.
    dead port 1/2 on $mux $procmux$906.
    dead port 2/2 on $mux $procmux$908.
    dead port 2/2 on $mux $procmux$918.
    dead port 2/2 on $mux $procmux$871.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$212.
    dead port 2/2 on $mux $procmux$219.
    dead port 2/2 on $mux $procmux$227.
    dead port 2/2 on $mux $procmux$236.
    dead port 2/2 on $mux $procmux$204.
    dead port 2/2 on $mux $procmux$206.
    dead port 1/2 on $mux $procmux$269.
    dead port 2/2 on $mux $procmux$271.
    dead port 2/2 on $mux $procmux$277.
    dead port 2/2 on $mux $procmux$284.
    dead port 2/2 on $mux $procmux$292.
    dead port 1/2 on $mux $procmux$302.
    dead port 2/2 on $mux $procmux$304.
    dead port 2/2 on $mux $procmux$313.
    dead port 2/2 on $mux $procmux$323.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$442.
    dead port 2/2 on $mux $procmux$451.
    dead port 2/2 on $mux $procmux$453.
    dead port 2/2 on $mux $procmux$461.
    dead port 2/2 on $mux $procmux$471.
Removed 76 multiplexer ports.
<suppressed ~65 debug messages>

27.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    New ctrl vector for $pmux cell $procmux$696: $auto$opt_reduce.cc:134:opt_pmux$1322
    New ctrl vector for $pmux cell $procmux$710: $auto$opt_reduce.cc:134:opt_pmux$1324
    New ctrl vector for $pmux cell $procmux$717: { $auto$opt_reduce.cc:134:opt_pmux$1326 $procmux$537_CMP }
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    New ctrl vector for $pmux cell $procmux$863: $auto$opt_reduce.cc:134:opt_pmux$1328
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
    New ctrl vector for $pmux cell $procmux$251: $auto$opt_reduce.cc:134:opt_pmux$1330
    New ctrl vector for $pmux cell $procmux$245: $auto$opt_reduce.cc:134:opt_pmux$1332
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 6 changes.

27.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~27 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~6 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~3 debug messages>
Removed a total of 13 cells.

27.6.6. Executing OPT_DFF pass (perform DFF optimizations).

27.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 212 unused wires.
<suppressed ~11 debug messages>

27.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.9. Rerunning OPT passes. (Maybe there is more to do..)

27.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    New ctrl vector for $pmux cell $procmux$672: $auto$opt_reduce.cc:134:opt_pmux$1334
    New ctrl vector for $pmux cell $procmux$732: $auto$opt_reduce.cc:134:opt_pmux$1336
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    New ctrl vector for $pmux cell $procmux$921: { $procmux$909_CMP $procmux$860_CMP $procmux$879_CMP $auto$opt_reduce.cc:134:opt_pmux$1338 }
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
    New ctrl vector for $pmux cell $procmux$474: { $procmux$437_CMP \ser_en_out $procmux$435_CMP $auto$opt_reduce.cc:134:opt_pmux$1340 }
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 4 changes.

27.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.6.13. Executing OPT_DFF pass (perform DFF optimizations).

27.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.16. Rerunning OPT passes. (Maybe there is more to do..)

27.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.6.20. Executing OPT_DFF pass (perform DFF optimizations).

27.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.23. Finished OPT passes. (There is nothing left to do.)

27.7. Executing FSM pass (extract and optimize FSM).

27.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking sys_control_rx.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking sys_control_tx.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking uart_rx_fsm.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking uart_tx_fsm.current_state as FSM state register:
    Circuit seems to be self-resetting.

27.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

27.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

27.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

27.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

27.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

27.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27.8. Executing OPT pass (performing simple optimizations).

27.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [2]).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [1]).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [0]).
Adding EN signal on $procdff$1313 ($adff) from module data_synchronizer (D = \unsync_data_in, Q = \sync_data_out).
Adding EN signal on $procdff$1275 ($adff) from module deserializer (D = { \sampled_bit_in \register [7:1] }, Q = \register).
Adding EN signal on $procdff$1274 ($adff) from module edge_bit_counter (D = $0\edge_cnt_out[4:0], Q = \edge_cnt_out).
Adding EN signal on $procdff$1273 ($adff) from module edge_bit_counter (D = $0\bit_cnt_out[3:0], Q = \bit_cnt_out).
Adding EN signal on $procdff$1279 ($adff) from module parity_calc (D = $0\par_bit_out[0:0], Q = \par_bit_out).
Adding EN signal on $procdff$1276 ($adff) from module parity_check (D = \register [8:1], Q = \register [8:1]).
Handling D = Q on $auto$ff.cc:266:slice$1371 ($adffe) from module parity_check (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Adding EN signal on $procdff$1305 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[15]).
Adding EN signal on $procdff$1304 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[14]).
Adding EN signal on $procdff$1303 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[13]).
Adding EN signal on $procdff$1302 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[12]).
Adding EN signal on $procdff$1301 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[11]).
Adding EN signal on $procdff$1300 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[10]).
Adding EN signal on $procdff$1299 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[9]).
Adding EN signal on $procdff$1298 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[8]).
Adding EN signal on $procdff$1297 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[7]).
Adding EN signal on $procdff$1296 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[6]).
Adding EN signal on $procdff$1295 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[5]).
Adding EN signal on $procdff$1294 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[4]).
Adding EN signal on $procdff$1293 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[3]).
Adding EN signal on $procdff$1292 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[2]).
Adding EN signal on $procdff$1291 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[1]).
Adding EN signal on $procdff$1290 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[0]).
Adding EN signal on $procdff$1288 ($adff) from module reg_file (D = $procmux$1175_Y, Q = \rd_data_valid_out).
Adding EN signal on $procdff$1287 ($adff) from module reg_file (D = $4$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$76, Q = \rd_data_out).
Adding EN signal on $procdff$1281 ($adff) from module serializer (D = $0\int_reg[7:0], Q = \int_reg).
Adding EN signal on $procdff$1280 ($adff) from module serializer (D = $0\counter[2:0], Q = \counter).
Adding EN signal on $procdff$1284 ($adff) from module sys_control_rx (D = \uart_rx_data_in, Q = \rf_addr_reg).
Adding EN signal on $procdff$1283 ($adff) from module sys_control_rx (D = \rf_rd_data_in, Q = \uart_rf_send_data_out).
Adding EN signal on $procdff$1282 ($adff) from module sys_control_rx (D = \alu_data_in, Q = \uart_alu_send_data_out).
Adding EN signal on $procdff$1286 ($adff) from module sys_control_tx (D = \next_state, Q = \current_state).
Adding EN signal on $procdff$1271 ($adff) from module uart_rx_fsm (D = \next_state, Q = \current_state).
Adding EN signal on $procdff$1277 ($adff) from module uart_tx_fsm (D = $0\busy_out[0:0], Q = \busy_out).

27.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 50 unused cells and 48 unused wires.
<suppressed ~56 debug messages>

27.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~2 debug messages>
Optimizing module mux.
Optimizing module parity_calc.
<suppressed ~1 debug messages>
Optimizing module parity_check.
<suppressed ~5 debug messages>
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~2 debug messages>
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~1 debug messages>

27.8.9. Rerunning OPT passes. (Maybe there is more to do..)

27.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
<suppressed ~3 debug messages>
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
<suppressed ~3 debug messages>
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 2 cells.

27.8.13. Executing OPT_DFF pass (perform DFF optimizations).

27.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 1 unused cells and 6 unused wires.
<suppressed ~4 debug messages>

27.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.16. Rerunning OPT passes. (Maybe there is more to do..)

27.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.20. Executing OPT_DFF pass (perform DFF optimizations).

27.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.23. Finished OPT passes. (There is nothing left to do.)

27.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 7 bits (of 16) from port Y of cell alu.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35 ($add).
Removed top 7 bits (of 16) from port Y of cell alu.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36 ($sub).
Removed top 8 bits (of 16) from port Y of cell alu.$and$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:55$39 ($and).
Removed top 8 bits (of 16) from port Y of cell alu.$or$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:58$40 ($or).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:61$42 ($not).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:64$44 ($not).
Removed top 8 bits (of 16) from port Y of cell alu.$xor$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:67$45 ($xor).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:70$47 ($not).
Removed top 14 bits (of 16) from mux cell alu.$procmux$1191 ($mux).
Removed top 14 bits (of 16) from mux cell alu.$procmux$1203 ($mux).
Removed top 15 bits (of 16) from mux cell alu.$procmux$1216 ($mux).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1232_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1233_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1234_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1235_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1236_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1237_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$1238_CMP0 ($eq).
Removed top 15 bits (of 16) from wire alu.$3\alu_out_comp[15:0].
Removed top 14 bits (of 16) from wire alu.$4\alu_out_comp[15:0].
Removed top 14 bits (of 16) from wire alu.$5\alu_out_comp[15:0].
Removed top 7 bits (of 16) from wire alu.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35_Y.
Removed top 8 bits (of 16) from wire alu.$and$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:55$39_Y.
Removed top 8 bits (of 16) from wire alu.$or$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:58$40_Y.
Removed top 8 bits (of 16) from wire alu.$xor$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:67$45_Y.
Removed top 31 bits (of 32) from port B of cell clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
Removed top 27 bits (of 32) from port Y of cell clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
Removed top 28 bits (of 32) from port B of cell clk_divider.$le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28 ($le).
Removed top 31 bits (of 32) from mux cell clk_divider.$ternary$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$31 ($mux).
Removed top 27 bits (of 32) from wire clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24_Y.
Removed top 28 bits (of 32) from port A of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 31 bits (of 32) from port B of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 27 bits (of 32) from port Y of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 1 bits (of 5) from port B of cell data_sampling.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:20$152 ($eq).
Removed top 28 bits (of 32) from port A of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 31 bits (of 32) from port B of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 27 bits (of 32) from port Y of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 27 bits (of 32) from port B of cell data_sampling.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$155 ($eq).
Removed top 27 bits (of 32) from wire data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154_Y.
Removed top 24 bits (of 32) from mux cell deserializer.$ternary$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:25$139 ($mux).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
Removed top 27 bits (of 32) from port Y of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
Removed top 26 bits (of 32) from port Y of cell edge_bit_counter.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
Removed top 28 bits (of 32) from port Y of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
Removed top 1 bits (of 3) from port B of cell edge_bit_counter.$auto$opt_dff.cc:195:make_patterns_logic$1365 ($ne).
Removed top 27 bits (of 32) from wire edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142_Y.
Removed top 28 bits (of 32) from wire edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145_Y.
Removed top 1 bits (of 2) from port B of cell mux.$procmux$498_CMP0 ($eq).
Removed top 8 bits (of 9) from wire parity_check.register.
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1052_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1066_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1081_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1097_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell reg_file.$procmux$1114_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell reg_file.$procmux$1132_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell reg_file.$procmux$1151_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
Removed top 29 bits (of 32) from port Y of cell serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
Removed top 29 bits (of 32) from wire serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100_Y.
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$560_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$587_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$608_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sys_control_rx.$procmux$619_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sys_control_rx.$procmux$655_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$745 ($mux).
Removed top 3 bits (of 4) from mux cell sys_control_rx.$procmux$753 ($mux).
Removed top 1 bits (of 4) from mux cell sys_control_rx.$procmux$772 ($mux).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$783 ($mux).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$795 ($mux).
Removed top 3 bits (of 4) from mux cell sys_control_rx.$procmux$808 ($mux).
Removed top 4 bits (of 8) from FF cell sys_control_rx.$auto$ff.cc:266:slice$1435 ($adffe).
Removed top 2 bits (of 4) from wire sys_control_rx.$10\next_state[3:0].
Removed top 3 bits (of 4) from wire sys_control_rx.$4\next_state[3:0].
Removed top 2 bits (of 4) from wire sys_control_rx.$5\next_state[3:0].
Removed top 2 bits (of 4) from wire sys_control_rx.$6\next_state[3:0].
Removed top 4 bits (of 8) from wire sys_control_rx.rf_addr_reg.
Removed top 1 bits (of 3) from port B of cell sys_control_tx.$procmux$860_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell sys_control_tx.$procmux$861_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell sys_control_tx.$procmux$879_CMP0 ($eq).
Removed top 4 bits (of 8) from wire system_top.rf_addr.
Removed top 3 bits (of 4) from port B of cell uart_rx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:48$164 ($eq).
Removed top 28 bits (of 32) from port A of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 30 bits (of 32) from port B of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 27 bits (of 32) from port Y of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 27 bits (of 32) from port B of cell uart_rx_fsm.$gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186 ($gt).
Removed top 28 bits (of 32) from port B of cell uart_rx_fsm.$lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189 ($lt).
Removed top 31 bits (of 32) from port B of cell uart_rx_fsm.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
Removed top 26 bits (of 32) from port Y of cell uart_rx_fsm.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
Removed top 28 bits (of 32) from port A of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 30 bits (of 32) from port B of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 27 bits (of 32) from port Y of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 27 bits (of 32) from port B of cell uart_rx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$195 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_rx_fsm.$procmux$220_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_rx_fsm.$procmux$228_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_rx_fsm.$procmux$237_CMP0 ($eq).
Removed top 27 bits (of 32) from wire uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194_Y.
Removed top 27 bits (of 32) from wire uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185_Y.
Removed top 1 bits (of 3) from port B of cell uart_tx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:69$115 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_tx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:84$120 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_tx_fsm.$procmux$435_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_tx_fsm.$procmux$437_CMP0 ($eq).
Removed top 2 bits (of 3) from mux cell uart_tx_fsm.$procmux$440 ($mux).
Removed top 2 bits (of 3) from wire uart_tx_fsm.$2\next_state[2:0].
Removed top 1 bits (of 3) from wire uart_tx_fsm.next_state.

27.10. Executing PEEPOPT pass (run peephole optimizers).

27.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 24 unused wires.
<suppressed ~11 debug messages>

27.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35 ($add).
  creating $macc model for $mul$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:49$37 ($mul).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35.
  creating $macc cell for $mul$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:49$37: $auto$alumacc.cc:365:replace_macc$1488
  creating $alu model for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49 ($gt): merged with $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu model for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:85$50 ($lt): merged with $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu model for $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:73$48 ($eq): merged with $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35: $auto$alumacc.cc:485:replace_alu$1489
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36, $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49, $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:85$50, $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:73$48: $auto$alumacc.cc:485:replace_alu$1492
  created 2 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module bit_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clk_divider:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24.
  creating $alu model for $le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28 ($le): new $alu
  creating $alu cell for $le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28: $auto$alumacc.cc:485:replace_alu$1504
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24: $auto$alumacc.cc:485:replace_alu$1517
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clk_gate:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_sampling:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154: $auto$alumacc.cc:485:replace_alu$1520
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149: $auto$alumacc.cc:485:replace_alu$1523
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module deserializer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module edge_bit_counter:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142: $auto$alumacc.cc:485:replace_alu$1526
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145: $auto$alumacc.cc:485:replace_alu$1529
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143: $auto$alumacc.cc:485:replace_alu$1532
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module parity_calc:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module parity_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reg_file:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reset_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module serializer:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100: $auto$alumacc.cc:485:replace_alu$1535
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module stp_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module strt_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control_rx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control_tx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module system_top:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_rx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_rx_fsm:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194.
  creating $alu model for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186 ($gt): new $alu
  creating $alu model for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189 ($lt): new $alu
  creating $alu model for $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:60$174 ($eq): merged with $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189.
  creating $alu cell for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189, $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:60$174: $auto$alumacc.cc:485:replace_alu$1540
  creating $alu cell for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186: $auto$alumacc.cc:485:replace_alu$1547
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194: $auto$alumacc.cc:485:replace_alu$1552
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185: $auto$alumacc.cc:485:replace_alu$1555
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191: $auto$alumacc.cc:485:replace_alu$1558
  created 5 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_top:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_tx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_tx_fsm:
  created 0 $alu and 0 $macc cells.

27.13. Executing SHARE pass (SAT-based resource sharing).

27.14. Executing OPT pass (performing simple optimizations).

27.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~1 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~9 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 3 cells.

27.14.6. Executing OPT_DFF pass (perform DFF optimizations).

27.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 2 unused cells and 12 unused wires.
<suppressed ~6 debug messages>

27.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.9. Rerunning OPT passes. (Maybe there is more to do..)

27.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.14.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.16. Finished OPT passes. (There is nothing left to do.)

27.15. Executing MEMORY pass.

27.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

27.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

27.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

27.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

27.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

27.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

27.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

27.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

27.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.17. Executing OPT pass (performing simple optimizations).

27.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~20 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
<suppressed ~1 debug messages>
Optimizing module clk_gate.
Optimizing module data_sampling.
<suppressed ~1 debug messages>
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~4 debug messages>
Optimizing module mux.
<suppressed ~1 debug messages>
Optimizing module parity_calc.
<suppressed ~1 debug messages>
Optimizing module parity_check.
<suppressed ~3 debug messages>
Optimizing module reg_file.
<suppressed ~2 debug messages>
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~2 debug messages>
Optimizing module stp_check.
<suppressed ~2 debug messages>
Optimizing module strt_check.
<suppressed ~2 debug messages>
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~10 debug messages>
Optimizing module sys_control_tx.
<suppressed ~5 debug messages>
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~15 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~4 debug messages>

27.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.17.3. Executing OPT_DFF pass (perform DFF optimizations).

27.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 1 unused cells and 40 unused wires.
<suppressed ~14 debug messages>

27.17.5. Finished fast OPT passes.

27.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

27.19. Executing OPT pass (performing simple optimizations).

27.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
    Consolidated identical input bits for $mux cell $procmux$1191:
      Old ports: A=2'11, B=2'00, Y=$5\alu_out_comp[15:0]
      New ports: A=1'1, B=1'0, Y=$5\alu_out_comp[15:0] [0]
      New connections: $5\alu_out_comp[15:0] [1] = $5\alu_out_comp[15:0] [0]
    Consolidated identical input bits for $mux cell $procmux$1203:
      Old ports: A=2'10, B=2'00, Y=$4\alu_out_comp[15:0]
      New ports: A=1'1, B=1'0, Y=$4\alu_out_comp[15:0] [1]
      New connections: $4\alu_out_comp[15:0] [0] = 1'0
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    Consolidated identical input bits for $mux cell $procmux$738:
      Old ports: A=4'1010, B=4'0000, Y=$11\next_state[3:0]
      New ports: A=1'1, B=1'0, Y=$11\next_state[3:0] [1]
      New connections: { $11\next_state[3:0] [3:2] $11\next_state[3:0] [0] } = { $11\next_state[3:0] [1] 2'00 }
    Consolidated identical input bits for $mux cell $procmux$762:
      Old ports: A=4'0111, B=4'1000, Y=$8\next_state[3:0]
      New ports: A=2'01, B=2'10, Y={ $8\next_state[3:0] [3] $8\next_state[3:0] [0] }
      New connections: $8\next_state[3:0] [2:1] = { $8\next_state[3:0] [0] $8\next_state[3:0] [0] }
    Consolidated identical input bits for $mux cell $procmux$772:
      Old ports: A=3'110, B=3'000, Y=$7\next_state[3:0] [2:0]
      New ports: A=1'1, B=1'0, Y=$7\next_state[3:0] [1]
      New connections: { $7\next_state[3:0] [2] $7\next_state[3:0] [0] } = { $7\next_state[3:0] [1] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$795:
      Old ports: A=2'11, B=2'00, Y=$5\next_state[3:0]
      New ports: A=1'1, B=1'0, Y=$5\next_state[3:0] [0]
      New connections: $5\next_state[3:0] [1] = $5\next_state[3:0] [0]
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    Consolidated identical input bits for $mux cell $procmux$916:
      Old ports: A=3'010, B=3'001, Y=$2\next_state[2:0]
      New ports: A=2'10, B=2'01, Y=$2\next_state[2:0] [1:0]
      New connections: $2\next_state[2:0] [2] = 1'0
    New ctrl vector for $pmux cell $procmux$921: { $procmux$909_CMP $procmux$860_CMP $procmux$879_CMP }
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
    Consolidated identical input bits for $mux cell $procmux$275:
      Old ports: A=3'000, B=3'001, Y=$7\next_state[2:0]
      New ports: A=1'0, B=1'1, Y=$7\next_state[2:0] [0]
      New connections: $7\next_state[2:0] [2:1] = 2'00
    Consolidated identical input bits for $mux cell $procmux$311:
      Old ports: A=3'011, B=3'010, Y=$3\next_state[2:0]
      New ports: A=1'1, B=1'0, Y=$3\next_state[2:0] [0]
      New connections: $3\next_state[2:0] [2:1] = 2'01
    New ctrl vector for $pmux cell $procmux$326: { $procmux$324_CMP $procmux$237_CMP $auto$opt_reduce.cc:134:opt_pmux$1574 $procmux$207_CMP }
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
    Consolidated identical input bits for $mux cell $procmux$448:
      Old ports: A=3'100, B=3'011, Y=$4\next_state[2:0]
      New ports: A=2'10, B=2'01, Y={ $4\next_state[2:0] [2] $4\next_state[2:0] [0] }
      New connections: $4\next_state[2:0] [1] = $4\next_state[2:0] [0]
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 12 changes.

27.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.19.6. Executing OPT_SHARE pass.

27.19.7. Executing OPT_DFF pass (perform DFF optimizations).

27.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~3 debug messages>
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~2 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.10. Rerunning OPT passes. (Maybe there is more to do..)

27.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~3 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.19.14. Executing OPT_SHARE pass.

27.19.15. Executing OPT_DFF pass (perform DFF optimizations).

27.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

27.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.18. Rerunning OPT passes. (Maybe there is more to do..)

27.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.19.22. Executing OPT_SHARE pass.

27.19.23. Executing OPT_DFF pass (perform DFF optimizations).

27.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.26. Finished OPT passes. (There is nothing left to do.)

27.20. Executing TECHMAP pass (map to technology primitives).

27.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

27.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$bfceb922395790c0ce92e9f9b5b428d4fc72cc30\_90_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$332fab4e157f868977379756d21fa99887c3c6c4\_90_alu for cells of type $alu.
Using template $paramod$0ae6dcbc606d0267ec97d3ccf20343286af3366c\_90_alu for cells of type $alu.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using template $paramod$20d3ee62d72123142eb855d7ddafd835e31ba009\_90_pmux for cells of type $pmux.
Using template $paramod$4d45682f6d5f8751d24fc75184ef72226da353f7\_90_pmux for cells of type $pmux.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod$75a16668b548c3bac59647e2f0c7dad55b2b94b9\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_xor.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$943564b9366bbc392bf4bbc801aa0a2d7742a4e0\_90_alu for cells of type $alu.
Using template $paramod$dde52db7035cb02b3cc5e73865788532339e3bcb\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dlatch.
Using template $paramod$83dd457849c736323edf2edb15923eb27f99c683\_90_alu for cells of type $alu.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\_90_alu for cells of type $alu.
Using template $paramod$67686dad8c792aead4495d34957ca1f4c910d0ba\_90_div for cells of type $div.
Using extmapper maccmap for cells of type $macc.
  add \data_a_in * \data_b_in (8x8 bits, unsigned)
Using template $paramod$e85bcdd999a9f7e1064fcb77207041270947b77a\_90_pmux for cells of type $pmux.
Using template $paramod$67686dad8c792aead4495d34957ca1f4c910d0ba\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000010000 for cells of type $__div_mod_u.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod$02488ff6fa51b28bbfa470bdd9b0e548b3357746\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$d66a711d7e97d14a7c7a9fd9e900c39b1fc36cfa\_90_alu for cells of type $alu.
Using template $paramod$8359f4ac8e08a95551ec17e9becbee696d87568d\_90_alu for cells of type $alu.
Using template $paramod$3e9f586ebf39197c9185418e155ec5725178e703\_90_alu for cells of type $alu.
Using template $paramod$99f84fe1e34117baf970301335fa146f92b93eb7\_90_alu for cells of type $alu.
Using template $paramod$10caef7eb223495dec7ca6c51abc18dbd379ce45\_90_alu for cells of type $alu.
Using template $paramod$6ae352d62dfc78ea1f63c7f3961ba142be4a2f93\_90_alu for cells of type $alu.
Using template $paramod$7bdc7d89ea9376c9c454fd05d9b64ca6288b61c9\_90_alu for cells of type $alu.
Using template $paramod$96a374a77d27fe2a5f65189ccd5c4d82c02f3e0c\_90_alu for cells of type $alu.
Using template $paramod$c01a73249af533291d6c07bc7dff8edfd9012ebf\_90_alu for cells of type $alu.
Using template $paramod$4dafc65fa46f14914da22e0fac43fee737cf5e98\_90_alu for cells of type $alu.
Using template $paramod$6514813ccfd0fbcd872b47be16e9bc3f005ba67f\_90_alu for cells of type $alu.
Using template $paramod$90cb621aa18d0bfc972ff6df82973fce6d62f25a\_90_alu for cells of type $alu.
Using template $paramod$28a6ec5648d14f65107108cc45dfc9433b8b29ab\_90_alu for cells of type $alu.
Using template $paramod$1b1e81b08462e7f621826ba0c290068af8e4e550\_90_alu for cells of type $alu.
Using template $paramod$1c5b0982e801b857faf786570d1281fe30bbf0dc\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
No more expansions possible.
<suppressed ~8660 debug messages>

27.21. Executing OPT pass (performing simple optimizations).

27.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~5361 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
<suppressed ~41 debug messages>
Optimizing module clk_gate.
Optimizing module data_sampling.
<suppressed ~59 debug messages>
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~87 debug messages>
Optimizing module mux.
<suppressed ~8 debug messages>
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
<suppressed ~60 debug messages>
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~21 debug messages>
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~128 debug messages>
Optimizing module sys_control_tx.
<suppressed ~36 debug messages>
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~167 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~38 debug messages>

27.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~7617 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
<suppressed ~21 debug messages>
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
<suppressed ~18 debug messages>
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
<suppressed ~12 debug messages>
Finding identical cells in module `\mux'.
<suppressed ~6 debug messages>
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~156 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
<suppressed ~12 debug messages>
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~144 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~15 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~66 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~12 debug messages>
Removed a total of 2693 cells.

27.21.3. Executing OPT_DFF pass (perform DFF optimizations).

27.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 354 unused cells and 5193 unused wires.
<suppressed ~366 debug messages>

27.21.5. Finished fast OPT passes.

27.22. Executing ABC pass (technology mapping using ABC).

27.22.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 2426 gates and 2448 wires to a netlist network with 21 inputs and 16 outputs.

27.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      183
ABC RESULTS:              NAND cells:       44
ABC RESULTS:              XNOR cells:       96
ABC RESULTS:               NOT cells:      115
ABC RESULTS:               AND cells:       99
ABC RESULTS:             ORNOT cells:       82
ABC RESULTS:               NOR cells:      171
ABC RESULTS:               XOR cells:      307
ABC RESULTS:                OR cells:      324
ABC RESULTS:            ANDNOT cells:      819
ABC RESULTS:        internal signals:     2411
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

27.22.2. Extracting gate netlist of module `\bit_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.3. Extracting gate netlist of module `\clk_divider' to `<abc-temp-dir>/input.blif'..
Extracted 61 gates and 74 wires to a netlist network with 11 inputs and 6 outputs.

27.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.3.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               XOR cells:        7
ABC RESULTS:                OR cells:       10
ABC RESULTS:            ANDNOT cells:       21
ABC RESULTS:        internal signals:       57
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        6
Removing temp directory.

27.22.4. Extracting gate netlist of module `\clk_gate' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

27.22.4.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.5. Extracting gate netlist of module `\data_sampling' to `<abc-temp-dir>/input.blif'..
Extracted 63 gates and 76 wires to a netlist network with 13 inputs and 4 outputs.

27.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.5.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        5
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       16
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:            ANDNOT cells:       10
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:       16
ABC RESULTS:        internal signals:       59
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        4
Removing temp directory.

27.22.6. Extracting gate netlist of module `\data_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

27.22.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.6.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.7. Extracting gate netlist of module `\deserializer' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 18 wires to a netlist network with 9 inputs and 8 outputs.

27.22.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        8
Removing temp directory.

27.22.8. Extracting gate netlist of module `\edge_bit_counter' to `<abc-temp-dir>/input.blif'..
Extracted 66 gates and 83 wires to a netlist network with 16 inputs and 11 outputs.

27.22.8.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.8.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:               NOT cells:        4
ABC RESULTS:                OR cells:       11
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               XOR cells:       12
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:        internal signals:       56
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       11
Removing temp directory.

27.22.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 14 gates and 19 wires to a netlist network with 4 inputs and 1 outputs.

27.22.9.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.9.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.10. Extracting gate netlist of module `\parity_calc' to `<abc-temp-dir>/input.blif'..
Extracted 13 gates and 23 wires to a netlist network with 10 inputs and 2 outputs.

27.22.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.10.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:        5
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        2
Removing temp directory.

27.22.11. Extracting gate netlist of module `\parity_check' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 6 wires to a netlist network with 3 inputs and 1 outputs.

27.22.11.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.11.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.12. Extracting gate netlist of module `\reg_file' to `<abc-temp-dir>/input.blif'..
Extracted 320 gates and 454 wires to a netlist network with 134 inputs and 27 outputs.

27.22.12.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.12.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:               AND cells:        2
ABC RESULTS:              NAND cells:        8
ABC RESULTS:            ANDNOT cells:      142
ABC RESULTS:                OR cells:      133
ABC RESULTS:               MUX cells:        8
ABC RESULTS:        internal signals:      293
ABC RESULTS:           input signals:      134
ABC RESULTS:          output signals:       27
Removing temp directory.

27.22.13. Extracting gate netlist of module `\reset_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.14. Extracting gate netlist of module `\serializer' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 46 wires to a netlist network with 21 inputs and 14 outputs.

27.22.14.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.14.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:               MUX cells:        7
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       14
Removing temp directory.

27.22.15. Extracting gate netlist of module `\stp_check' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

27.22.15.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.15.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.16. Extracting gate netlist of module `\strt_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

27.22.16.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.16.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.17. Extracting gate netlist of module `\sys_control' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.18. Extracting gate netlist of module `\sys_control_rx' to `<abc-temp-dir>/input.blif'..
Extracted 158 gates and 178 wires to a netlist network with 19 inputs and 27 outputs.

27.22.18.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.18.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               MUX cells:        2
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              NAND cells:        7
ABC RESULTS:                OR cells:       35
ABC RESULTS:               NOR cells:       10
ABC RESULTS:               AND cells:        4
ABC RESULTS:            ANDNOT cells:       58
ABC RESULTS:        internal signals:      132
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       27
Removing temp directory.

27.22.19. Extracting gate netlist of module `\sys_control_tx' to `<abc-temp-dir>/input.blif'..
Extracted 88 gates and 119 wires to a netlist network with 30 inputs and 13 outputs.

27.22.19.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.19.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              NAND cells:        2
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:               NOR cells:        3
ABC RESULTS:            ANDNOT cells:       51
ABC RESULTS:        internal signals:       76
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       13
Removing temp directory.

27.22.20. Extracting gate netlist of module `\system_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.21. Extracting gate netlist of module `\uart_rx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.22. Extracting gate netlist of module `\uart_rx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 163 gates and 186 wires to a netlist network with 22 inputs and 8 outputs.

27.22.22.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.22.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOT cells:        9
ABC RESULTS:               MUX cells:        1
ABC RESULTS:             ORNOT cells:        9
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               AND cells:        3
ABC RESULTS:               XOR cells:       20
ABC RESULTS:                OR cells:       31
ABC RESULTS:            ANDNOT cells:       45
ABC RESULTS:        internal signals:      156
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        8
Removing temp directory.

27.22.23. Extracting gate netlist of module `\uart_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.24. Extracting gate netlist of module `\uart_tx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.25. Extracting gate netlist of module `\uart_tx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 58 wires to a netlist network with 6 inputs and 8 outputs.

27.22.25.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.25.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               NOR cells:        3
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:            ANDNOT cells:       20
ABC RESULTS:        internal signals:       44
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        8
Removing temp directory.

27.23. Executing OPT pass (performing simple optimizations).

27.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~1 debug messages>
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~54 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~3 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 19 cells.

27.23.3. Executing OPT_DFF pass (perform DFF optimizations).

27.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1761 unused wires.
<suppressed ~18 debug messages>

27.23.5. Finished fast OPT passes.

27.24. Executing HIERARCHY pass (managing design hierarchy).

27.24.1. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \alu
Used module:     \bit_synchronizer
Used module:     \clk_divider
Used module:     \clk_gate
Used module:     \data_synchronizer
Used module:     \reg_file
Used module:     \reset_synchronizer
Used module:     \sys_control
Used module:         \sys_control_rx
Used module:         \sys_control_tx
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \data_sampling
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \parity_check
Used module:             \stp_check
Used module:             \strt_check
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \parity_calc
Used module:             \serializer
Used module:             \uart_tx_fsm

27.24.2. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \alu
Used module:     \bit_synchronizer
Used module:     \clk_divider
Used module:     \clk_gate
Used module:     \data_synchronizer
Used module:     \reg_file
Used module:     \reset_synchronizer
Used module:     \sys_control
Used module:         \sys_control_rx
Used module:         \sys_control_tx
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \data_sampling
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \parity_check
Used module:             \stp_check
Used module:             \strt_check
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \parity_calc
Used module:             \serializer
Used module:             \uart_tx_fsm
Removed 0 unused modules.

27.25. Printing statistics.

=== alu ===

   Number of wires:               2216
   Number of wire bits:           2263
   Number of public wires:          10
   Number of public wire bits:      57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2239
     $_ANDNOT_                     805
     $_AND_                         99
     $_DFF_PN0_                     17
     $_MUX_                        183
     $_NAND_                        44
     $_NOR_                        169
     $_NOT_                        115
     $_ORNOT_                       82
     $_OR_                         322
     $_XNOR_                        96
     $_XOR_                        307

=== bit_synchronizer ===

   Number of wires:                  5
   Number of wire bits:              6
   Number of public wires:           5
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_PN0_                      3

=== clk_divider ===

   Number of wires:                 54
   Number of wire bits:             66
   Number of public wires:           6
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 58
     $_ANDNOT_                      21
     $_AND_                          2
     $_DFF_PN0_                      5
     $_NAND_                         3
     $_NOT_                          1
     $_ORNOT_                        3
     $_OR_                          10
     $_XNOR_                         6
     $_XOR_                          7

=== clk_gate ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_AND_                          1
     $_DLATCH_N_                     1

=== data_sampling ===

   Number of wires:                 63
   Number of wire bits:             73
   Number of public wires:           8
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 59
     $_ANDNOT_                      10
     $_AND_                          2
     $_DFFE_PN0P_                    3
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                          5
     $_ORNOT_                        1
     $_OR_                          16
     $_XNOR_                         2
     $_XOR_                         16

=== data_synchronizer ===

   Number of wires:                  8
   Number of wire bits:             24
   Number of public wires:           8
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $_ANDNOT_                       1
     $_DFFE_PN0P_                    8
     $_DFF_PN0_                      4

=== deserializer ===

   Number of wires:                  7
   Number of wire bits:             21
   Number of public wires:           7
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_AND_                          8
     $_DFFE_PN0P_                    8

=== edge_bit_counter ===

   Number of wires:                 56
   Number of wire bits:             74
   Number of public wires:           7
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 65
     $_ANDNOT_                      17
     $_AND_                          2
     $_DFFE_PN0P_                    9
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          4
     $_ORNOT_                        1
     $_OR_                          11
     $_XNOR_                         4
     $_XOR_                         12

=== mux ===

   Number of wires:                 10
   Number of wire bits:             11
   Number of public wires:           4
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $_ANDNOT_                       2
     $_NAND_                         1
     $_NOR_                          1
     $_ORNOT_                        1
     $_OR_                           2

=== parity_calc ===

   Number of wires:                 17
   Number of wire bits:             24
   Number of public wires:           6
   Number of public wire bits:      13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $_ANDNOT_                       1
     $_AND_                          1
     $_DFFE_PN0P_                    1
     $_OR_                           1
     $_XNOR_                         3
     $_XOR_                          5

=== parity_check ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_ANDNOT_                       1
     $_DFF_PN0_                      1
     $_XNOR_                         1

=== reg_file ===

   Number of wires:                317
   Number of wire bits:            481
   Number of public wires:          28
   Number of public wire bits:     185
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                433
     $_ANDNOT_                     141
     $_AND_                          2
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                  133
     $_DFFE_PN1P_                    3
     $_MUX_                          8
     $_NAND_                         8
     $_ORNOT_                        4
     $_OR_                         133

=== reset_synchronizer ===

   Number of wires:                  4
   Number of wire bits:              6
   Number of public wires:           4
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_PN0_                      3

=== serializer ===

   Number of wires:                 18
   Number of wire bits:             43
   Number of public wires:          10
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 29
     $_ANDNOT_                       3
     $_AND_                          2
     $_DFFE_PN0P_                   11
     $_MUX_                          7
     $_NAND_                         1
     $_ORNOT_                        2
     $_OR_                           1
     $_XNOR_                         1
     $_XOR_                          1

=== stp_check ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_ANDNOT_                       1

=== strt_check ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_AND_                          1

=== sys_control ===

   Number of wires:                 23
   Number of wire bits:             94
   Number of public wires:          23
   Number of public wire bits:      94
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     sys_control_rx                  1
     sys_control_tx                  1

=== sys_control_rx ===

   Number of wires:                126
   Number of wire bits:            199
   Number of public wires:          26
   Number of public wire bits:      99
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                159
     $_ANDNOT_                      58
     $_AND_                          4
     $_DFFE_PN0P_                   28
     $_DFF_PN0_                      4
     $_MUX_                          2
     $_NAND_                         7
     $_NOR_                         10
     $_NOT_                          1
     $_ORNOT_                       10
     $_OR_                          35

=== sys_control_tx ===

   Number of wires:                 78
   Number of wire bits:            111
   Number of public wires:          11
   Number of public wire bits:      44
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                      51
     $_DFFE_PN0P_                    3
     $_MUX_                          2
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                       12
     $_OR_                           7

=== system_top ===

   Number of wires:                 35
   Number of wire bits:            126
   Number of public wires:          35
   Number of public wire bits:     126
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     alu                             1
     bit_synchronizer                1
     clk_divider                     1
     clk_gate                        1
     data_synchronizer               2
     reg_file                        1
     reset_synchronizer              2
     sys_control                     1
     uart_top                        1

=== uart_rx ===

   Number of wires:                 20
   Number of wire bits:             38
   Number of public wires:          20
   Number of public wire bits:      38
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     data_sampling                   1
     deserializer                    1
     edge_bit_counter                1
     parity_check                    1
     stp_check                       1
     strt_check                      1
     uart_rx_fsm                     1

=== uart_rx_fsm ===

   Number of wires:                138
   Number of wire bits:            153
   Number of public wires:          19
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                129
     $_ANDNOT_                      45
     $_AND_                          3
     $_DFFE_PN0P_                    3
     $_MUX_                          1
     $_NAND_                         1
     $_NOR_                          4
     $_NOT_                          9
     $_ORNOT_                        9
     $_OR_                          31
     $_XNOR_                         3
     $_XOR_                         20

=== uart_top ===

   Number of wires:                 13
   Number of wire bits:             31
   Number of public wires:          13
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     uart_rx                         1
     uart_tx                         1

=== uart_tx ===

   Number of wires:                 13
   Number of wire bits:             21
   Number of public wires:          13
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     mux                             1
     parity_calc                     1
     serializer                      1
     uart_tx_fsm                     1

=== uart_tx_fsm ===

   Number of wires:                 45
   Number of wire bits:             51
   Number of public wires:          10
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     $_ANDNOT_                      20
     $_DFFE_PN0P_                    1
     $_DFF_PN0_                      3
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                        6
     $_OR_                           7

=== design hierarchy ===

   system_top                        1
     alu                             1
     bit_synchronizer                1
     clk_divider                     1
     clk_gate                        1
     data_synchronizer               2
     reg_file                        1
     reset_synchronizer              2
     sys_control                     1
       sys_control_rx                1
       sys_control_tx                1
     uart_top                        1
       uart_rx                       1
         data_sampling               1
         deserializer                1
         edge_bit_counter            1
         parity_check                1
         stp_check                   1
         strt_check                  1
         uart_rx_fsm                 1
       uart_tx                       1
         mux                         1
         parity_calc                 1
         serializer                  1
         uart_tx_fsm                 1

   Number of wires:               3296
   Number of wire bits:           3964
   Number of public wires:         302
   Number of public wire bits:     941
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3374
     $_ANDNOT_                    1178
     $_AND_                        127
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                  216
     $_DFFE_PN1P_                    3
     $_DFF_PN0_                     47
     $_DLATCH_N_                     1
     $_MUX_                        203
     $_NAND_                        73
     $_NOR_                        195
     $_NOT_                        139
     $_ORNOT_                      131
     $_OR_                         576
     $_XNOR_                       116
     $_XOR_                        368

27.26. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

28. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

29. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

29.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alu':
  mapped 17 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\bit_synchronizer':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\clk_divider':
  mapped 5 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\clk_gate':
Mapping DFF cells in module `\data_sampling':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\data_synchronizer':
  mapped 12 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\deserializer':
  mapped 8 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\edge_bit_counter':
  mapped 9 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\mux':
Mapping DFF cells in module `\parity_calc':
  mapped 1 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\parity_check':
  mapped 1 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\reg_file':
  mapped 137 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\reset_synchronizer':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\serializer':
  mapped 11 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\stp_check':
Mapping DFF cells in module `\strt_check':
Mapping DFF cells in module `\sys_control':
Mapping DFF cells in module `\sys_control_rx':
  mapped 32 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\sys_control_tx':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\system_top':
Mapping DFF cells in module `\uart_rx':
Mapping DFF cells in module `\uart_rx_fsm':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\uart_top':
Mapping DFF cells in module `\uart_tx':
Mapping DFF cells in module `\uart_tx_fsm':
  mapped 4 $_DFFSR_PNN_ cells to \DFFSR cells.

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing ABC pass (technology mapping using ABC).

31.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 2222 gates and 2243 wires to a netlist network with 21 inputs and 16 outputs.

31.1.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.1.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        8
ABC RESULTS:            MUX2X1 cells:        2
ABC RESULTS:           OAI22X1 cells:        5
ABC RESULTS:           AOI22X1 cells:       21
ABC RESULTS:            AND2X2 cells:       40
ABC RESULTS:           XNOR2X1 cells:       42
ABC RESULTS:            XOR2X1 cells:       30
ABC RESULTS:            NOR2X1 cells:      173
ABC RESULTS:             OR2X2 cells:       12
ABC RESULTS:           NAND3X1 cells:      107
ABC RESULTS:             INVX1 cells:      164
ABC RESULTS:           NAND2X1 cells:      155
ABC RESULTS:           OAI21X1 cells:      230
ABC RESULTS:           AOI21X1 cells:       81
ABC RESULTS:        internal signals:     2206
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

31.2. Extracting gate netlist of module `\bit_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

31.3. Extracting gate netlist of module `\clk_divider' to `<abc-temp-dir>/input.blif'..
Extracted 53 gates and 64 wires to a netlist network with 11 inputs and 6 outputs.

31.3.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.3.2. Re-integrating ABC results.
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:            XOR2X1 cells:        2
ABC RESULTS:            NOR2X1 cells:        4
ABC RESULTS:             INVX1 cells:       10
ABC RESULTS:           NAND3X1 cells:        5
ABC RESULTS:           XNOR2X1 cells:        3
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:           OAI21X1 cells:        5
ABC RESULTS:           AOI21X1 cells:       13
ABC RESULTS:        internal signals:       47
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        6
Removing temp directory.

31.4. Extracting gate netlist of module `\clk_gate' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

31.4.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.51 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

31.5. Extracting gate netlist of module `\data_sampling' to `<abc-temp-dir>/input.blif'..
Extracted 59 gates and 73 wires to a netlist network with 14 inputs and 4 outputs.

31.5.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.5.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:             INVX1 cells:       12
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:            AND2X2 cells:        6
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           XNOR2X1 cells:        2
ABC RESULTS:           NAND3X1 cells:        9
ABC RESULTS:            NOR2X1 cells:        8
ABC RESULTS:           NAND2X1 cells:       17
ABC RESULTS:           OAI21X1 cells:       14
ABC RESULTS:        internal signals:       55
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        4
Removing temp directory.

31.6. Extracting gate netlist of module `\data_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 9 gates and 27 wires to a netlist network with 18 inputs and 9 outputs.

31.6.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.6.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        2
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:           NAND3X1 cells:        8
ABC RESULTS:           NAND2X1 cells:        8
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       18
ABC RESULTS:          output signals:        9
Removing temp directory.

31.7. Extracting gate netlist of module `\deserializer' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 27 wires to a netlist network with 11 inputs and 16 outputs.

31.7.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.7.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:            NOR2X1 cells:        8
ABC RESULTS:           NAND2X1 cells:        8
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:       16
Removing temp directory.

31.8. Extracting gate netlist of module `\edge_bit_counter' to `<abc-temp-dir>/input.blif'..
Extracted 65 gates and 81 wires to a netlist network with 16 inputs and 9 outputs.

31.8.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.8.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:           NAND3X1 cells:       17
ABC RESULTS:           OAI21X1 cells:       15
ABC RESULTS:           NAND2X1 cells:       10
ABC RESULTS:             INVX1 cells:       17
ABC RESULTS:            NOR2X1 cells:       11
ABC RESULTS:           XNOR2X1 cells:        5
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:        internal signals:       56
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

31.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 7 gates and 11 wires to a netlist network with 4 inputs and 1 outputs.

31.9.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.9.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:        internal signals:        6
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

31.10. Extracting gate netlist of module `\parity_calc' to `<abc-temp-dir>/input.blif'..
Extracted 12 gates and 23 wires to a netlist network with 11 inputs and 1 outputs.

31.10.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.10.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           OAI21X1 cells:        3
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        8
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:           AOI22X1 cells:        5
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        1
Removing temp directory.

31.11. Extracting gate netlist of module `\parity_check' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 5 wires to a netlist network with 3 inputs and 1 outputs.

31.11.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.11.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

31.12. Extracting gate netlist of module `\reg_file' to `<abc-temp-dir>/input.blif'..
Extracted 433 gates and 584 wires to a netlist network with 151 inputs and 137 outputs.

31.12.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.12.2. Re-integrating ABC results.
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:            NOR3X1 cells:       19
ABC RESULTS:           AOI22X1 cells:       28
ABC RESULTS:           NAND3X1 cells:       47
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:            AND2X2 cells:        5
ABC RESULTS:           NAND2X1 cells:      130
ABC RESULTS:            NOR2X1 cells:       52
ABC RESULTS:           AOI21X1 cells:       36
ABC RESULTS:             INVX1 cells:       60
ABC RESULTS:           OAI21X1 cells:      129
ABC RESULTS:        internal signals:      296
ABC RESULTS:           input signals:      151
ABC RESULTS:          output signals:      137
Removing temp directory.

31.13. Extracting gate netlist of module `\reset_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

31.14. Extracting gate netlist of module `\serializer' to `<abc-temp-dir>/input.blif'..
Extracted 29 gates and 51 wires to a netlist network with 22 inputs and 12 outputs.

31.14.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.14.2. Re-integrating ABC results.
ABC RESULTS:           NAND2X1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:           AOI22X1 cells:        7
ABC RESULTS:            NOR3X1 cells:        7
ABC RESULTS:           OAI22X1 cells:        7
ABC RESULTS:             INVX1 cells:       13
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:           OAI21X1 cells:        4
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:       12
Removing temp directory.

31.15. Extracting gate netlist of module `\stp_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

31.15.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.15.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

31.16. Extracting gate netlist of module `\strt_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

31.16.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.16.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

31.17. Extracting gate netlist of module `\sys_control' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

31.18. Extracting gate netlist of module `\sys_control_rx' to `<abc-temp-dir>/input.blif'..
Extracted 155 gates and 222 wires to a netlist network with 67 inputs and 54 outputs.

31.18.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.18.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:            NOR3X1 cells:        3
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:           NAND3X1 cells:       16
ABC RESULTS:           AOI21X1 cells:        7
ABC RESULTS:            NOR2X1 cells:       29
ABC RESULTS:             INVX1 cells:       47
ABC RESULTS:           NAND2X1 cells:       28
ABC RESULTS:           OAI21X1 cells:       49
ABC RESULTS:        internal signals:      101
ABC RESULTS:           input signals:       67
ABC RESULTS:          output signals:       54
Removing temp directory.

31.19. Extracting gate netlist of module `\sys_control_tx' to `<abc-temp-dir>/input.blif'..
Extracted 82 gates and 112 wires to a netlist network with 30 inputs and 12 outputs.

31.19.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.51 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.19.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:           NAND2X1 cells:       27
ABC RESULTS:            NOR2X1 cells:        2
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:           NAND3X1 cells:       15
ABC RESULTS:           OAI21X1 cells:        6
ABC RESULTS:        internal signals:       70
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       12
Removing temp directory.

31.20. Extracting gate netlist of module `\system_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

31.21. Extracting gate netlist of module `\uart_rx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

31.22. Extracting gate netlist of module `\uart_rx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 129 gates and 151 wires to a netlist network with 22 inputs and 7 outputs.

31.22.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.22.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:       22
ABC RESULTS:           NAND3X1 cells:       18
ABC RESULTS:            AND2X2 cells:        7
ABC RESULTS:           NAND2X1 cells:       20
ABC RESULTS:            NOR2X1 cells:       19
ABC RESULTS:           AOI21X1 cells:        8
ABC RESULTS:             OR2X2 cells:        6
ABC RESULTS:           OAI21X1 cells:       32
ABC RESULTS:        internal signals:      122
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        7
Removing temp directory.

31.23. Extracting gate netlist of module `\uart_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

31.24. Extracting gate netlist of module `\uart_tx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

31.25. Extracting gate netlist of module `\uart_tx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 41 gates and 48 wires to a netlist network with 7 inputs and 7 outputs.

31.25.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.25.2. Re-integrating ABC results.
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        7
ABC RESULTS:           OAI21X1 cells:        6
ABC RESULTS:           NAND2X1 cells:        5
ABC RESULTS:        internal signals:       34
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        7
Removing temp directory.

32. Executing FLATTEN pass (flatten design).
Deleting now unused module alu.
Deleting now unused module bit_synchronizer.
Deleting now unused module clk_divider.
Deleting now unused module clk_gate.
Deleting now unused module data_sampling.
Deleting now unused module data_synchronizer.
Deleting now unused module deserializer.
Deleting now unused module edge_bit_counter.
Deleting now unused module mux.
Deleting now unused module parity_calc.
Deleting now unused module parity_check.
Deleting now unused module reg_file.
Deleting now unused module reset_synchronizer.
Deleting now unused module serializer.
Deleting now unused module stp_check.
Deleting now unused module strt_check.
Deleting now unused module sys_control.
Deleting now unused module sys_control_rx.
Deleting now unused module sys_control_tx.
Deleting now unused module uart_rx.
Deleting now unused module uart_rx_fsm.
Deleting now unused module uart_top.
Deleting now unused module uart_tx.
Deleting now unused module uart_tx_fsm.
<suppressed ~26 debug messages>

33. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 3941 unused wires.

34. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port system_top.ref_clk: Missing option -inpad.
Don't map input port system_top.reset_n: Missing option -inpad.
Don't map input port system_top.rx_in: Missing option -inpad.
Mapping port system_top.tx_out using BUFX2.
Don't map input port system_top.uart_clk: Missing option -inpad.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module system_top.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system_top'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \system_top.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system_top'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \system_top..

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module system_top.

35.9. Finished OPT passes. (There is nothing left to do.)

36. Executing BLIF backend.

37. Printing statistics.

=== system_top ===

   Number of wires:               2400
   Number of wire bits:           2677
   Number of public wires:        2400
   Number of public wire bits:    2677
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2661
     $_DLATCH_N_                     1
     AND2X2                         71
     AOI21X1                       157
     AOI22X1                        65
     BUFX2                           1
     DFFSR                         267
     INVX1                         385
     MUX2X1                          2
     NAND2X1                       439
     NAND3X1                       260
     NOR2X1                        313
     NOR3X1                         41
     OAI21X1                       517
     OAI22X1                        24
     OR2X2                          31
     XNOR2X1                        54
     XOR2X1                         33

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: b0fe3f86f9, CPU: user 4.67s system 0.20s, MEM: 88.65 MB peak
Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)
Time spent: 39% 2x abc (2 sec), 18% 66x opt_expr (1 sec), ...

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.26+73 (git sha1 9747e55d9, gcc 8.3.1 -fPIC -Os)


-- Executing script file `synth/synth.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/system_top.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/system_top.v' to AST representation.
Generating RTLIL representation for module `\system_top'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\bit_synchronizer'.
Warning: Replacing memory \reg_file with list of registers. See /home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:17
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\reset_synchronizer'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v' to AST representation.
Generating RTLIL representation for module `\data_synchronizer'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v' to AST representation.
Generating RTLIL representation for module `\clk_gate'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v' to AST representation.
Generating RTLIL representation for module `\clk_divider'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_top.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_top.v' to AST representation.
Generating RTLIL representation for module `\uart_top'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v' to AST representation.
Generating RTLIL representation for module `\reg_file'.
Warning: Replacing memory \mem with list of registers. See /home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:33
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control.v' to AST representation.
Generating RTLIL representation for module `\sys_control'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v' to AST representation.
Generating RTLIL representation for module `\sys_control_tx'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v' to AST representation.
Generating RTLIL representation for module `\sys_control_rx'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx.v' to AST representation.
Generating RTLIL representation for module `\uart_rx'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx.v' to AST representation.
Generating RTLIL representation for module `\uart_tx'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v' to AST representation.
Generating RTLIL representation for module `\mux'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v' to AST representation.
Generating RTLIL representation for module `\serializer'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v' to AST representation.
Generating RTLIL representation for module `\parity_calc'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v' to AST representation.
Generating RTLIL representation for module `\uart_tx_fsm'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v' to AST representation.
Generating RTLIL representation for module `\stp_check'.
Successfully finished Verilog frontend.

21. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v' to AST representation.
Generating RTLIL representation for module `\strt_check'.
Successfully finished Verilog frontend.

22. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v' to AST representation.
Generating RTLIL representation for module `\parity_check'.
Successfully finished Verilog frontend.

23. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v' to AST representation.
Generating RTLIL representation for module `\deserializer'.
Successfully finished Verilog frontend.

24. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v' to AST representation.
Generating RTLIL representation for module `\edge_bit_counter'.
Successfully finished Verilog frontend.

25. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v' to AST representation.
Generating RTLIL representation for module `\data_sampling'.
Successfully finished Verilog frontend.

26. Executing Verilog-2005 frontend: /home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v
Parsing Verilog input from `/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v' to AST representation.
Generating RTLIL representation for module `\uart_rx_fsm'.
Successfully finished Verilog frontend.

27. Executing SYNTH pass.

27.1. Executing HIERARCHY pass (managing design hierarchy).

27.1.1. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \bit_synchronizer
Used module:     \reset_synchronizer
Used module:     \data_synchronizer
Used module:     \clk_gate
Used module:     \clk_divider
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \stp_check
Used module:             \strt_check
Used module:             \parity_check
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \data_sampling
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \serializer
Used module:             \parity_calc
Used module:             \uart_tx_fsm
Used module:     \alu
Used module:     \reg_file
Used module:     \sys_control
Used module:         \sys_control_tx
Used module:         \sys_control_rx

27.1.2. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \bit_synchronizer
Used module:     \reset_synchronizer
Used module:     \data_synchronizer
Used module:     \clk_gate
Used module:     \clk_divider
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \stp_check
Used module:             \strt_check
Used module:             \parity_check
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \data_sampling
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \serializer
Used module:             \parity_calc
Used module:             \uart_tx_fsm
Used module:     \alu
Used module:     \reg_file
Used module:     \sys_control
Used module:         \sys_control_tx
Used module:         \sys_control_rx
Removed 0 unused modules.
Warning: Resizing cell port system_top.reg_file_inst.addr_in from 8 bits to 4 bits.
Warning: Resizing cell port system_top.sys_control_inst.rf_addr_out from 8 bits to 4 bits.

27.2. Executing PROC pass (convert processes to netlists).

27.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 31 empty switches in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Cleaned up 31 empty switches.

27.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 6 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183 in module uart_rx_fsm.
Marked 8 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162 in module uart_rx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160 in module uart_rx_fsm.
Marked 3 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146 in module data_sampling.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140 in module edge_bit_counter.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136 in module deserializer.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130 in module parity_check.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128 in module parity_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126 in module strt_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125 in module stp_check.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117 in module uart_tx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116 in module uart_tx_fsm.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113 in module uart_tx_fsm.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111 in module uart_tx_fsm.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102 in module parity_calc.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98 in module serializer.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93 in module serializer.
Removed 1 dead cases from process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92 in module mux.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92 in module mux.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86 in module sys_control_rx.
Marked 9 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85 in module sys_control_rx.
Marked 11 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82 in module sys_control_rx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81 in module sys_control_tx.
Marked 7 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79 in module sys_control_tx.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77 in module sys_control_tx.
Removed 1 dead cases from process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56 in module reg_file.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56 in module reg_file.
Marked 5 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34 in module alu.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32 in module alu.
Marked 2 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21 in module clk_divider.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18 in module clk_gate.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12 in module data_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8 in module reset_synchronizer.
Marked 1 switch rules as full_case in process $proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4 in module bit_synchronizer.
Removed a total of 2 dead cases.

27.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 12 redundant assignments.
Promoted 41 assignments to connections.

27.2.4. Executing PROC_INIT pass (extract init attributes).

27.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
Found async reset \reset_n in `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Found async reset \reset_n in `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Found async reset \reset_n in `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Found async reset \reset_n in `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
Found async reset \reset_n in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Found async reset \reset_n in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
Found async reset \reset_n in `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Found async reset \reset_n in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Found async reset \reset_n in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Found async reset \reset_n in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
Found async reset \reset_n in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
Found async reset \reset_n in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Found async reset \reset_n in `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
Found async reset \reset_n in `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
Found async reset \reset_n in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
Found async reset \reset_n in `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
Found async reset \reset_n in `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.

27.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~91 debug messages>

27.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
     1/10: $3\data_valid_out[0:0]
     2/10: $2\data_valid_out[0:0]
     3/10: $3\deser_en_out[0:0]
     4/10: $2\deser_en_out[0:0]
     5/10: $2\strt_chk_en_out[0:0]
     6/10: $1\strt_chk_en_out[0:0]
     7/10: $1\counter_en_out[0:0]
     8/10: $1\data_sample_en_out[0:0]
     9/10: $1\deser_en_out[0:0]
    10/10: $1\data_valid_out[0:0]
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
     1/8: $8\next_state[2:0]
     2/8: $7\next_state[2:0]
     3/8: $6\next_state[2:0]
     4/8: $5\next_state[2:0]
     5/8: $4\next_state[2:0]
     6/8: $3\next_state[2:0]
     7/8: $2\next_state[2:0]
     8/8: $1\next_state[2:0]
Creating decoders for process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
     1/3: $0\register[2:0] [2]
     2/3: $0\register[2:0] [1]
     3/3: $0\register[2:0] [0]
Creating decoders for process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
     1/2: $0\edge_cnt_out[4:0]
     2/2: $0\bit_cnt_out[3:0]
Creating decoders for process `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
     1/1: $0\register[7:0]
Creating decoders for process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
     1/5: $5\par_err_out[0:0]
     2/5: $4\par_err_out[0:0]
     3/5: $3\par_err_out[0:0]
     4/5: $2\par_err_out[0:0]
     5/5: $1\par_err_out[0:0]
Creating decoders for process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
     1/1: $0\register[8:0]
Creating decoders for process `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
     1/2: $2\strt_err_out[0:0]
     2/2: $1\strt_err_out[0:0]
Creating decoders for process `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
     1/2: $2\stp_err_out[0:0]
     2/2: $1\stp_err_out[0:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
     1/1: $0\busy_out[0:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
     1/1: $1\mux_sel_out[1:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
     1/5: $5\next_state[2:0]
     2/5: $4\next_state[2:0]
     3/5: $3\next_state[2:0]
     4/5: $2\next_state[2:0]
     5/5: $1\next_state[2:0]
Creating decoders for process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
     1/1: $0\par_bit_out[0:0]
Creating decoders for process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
     1/1: $0\counter[2:0]
Creating decoders for process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
     1/1: $0\int_reg[7:0]
Creating decoders for process `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
     1/1: $1\tx_out[0:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
     1/1: $0\uart_alu_send_data_out[15:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
     1/1: $0\uart_rf_send_data_out[7:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
     1/1: $0\rf_addr_reg[7:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
     1/30: $2\alu_data_store[0:0]
     2/30: $2\uart_alu_send_out[0:0]
     3/30: $2\alu_fun_out[3:0]
     4/30: $2\alu_en_out[0:0]
     5/30: $4\rf_addr_out[3:0]
     6/30: $4\rf_wr_data_out[7:0]
     7/30: $4\rf_wr_en_out[0:0]
     8/30: $3\rf_addr_out[3:0]
     9/30: $3\rf_wr_data_out[7:0]
    10/30: $3\rf_wr_en_out[0:0]
    11/30: $2\rf_rd_store[0:0]
    12/30: $2\uart_rf_send_out[0:0]
    13/30: $3\rf_addr_en[0:0]
    14/30: $2\rf_wr_data_out[7:0]
    15/30: $2\rf_addr_out[3:0]
    16/30: $2\rf_wr_en_out[0:0]
    17/30: $2\rf_addr_en[0:0]
    18/30: $1\alu_data_store[0:0]
    19/30: $1\rf_rd_store[0:0]
    20/30: $1\rf_addr_en[0:0]
    21/30: $1\uart_alu_send_out[0:0]
    22/30: $1\uart_rf_send_out[0:0]
    23/30: $1\clk_div_en_out[0:0]
    24/30: $1\clk_gate_en_out[0:0]
    25/30: $1\alu_fun_out[3:0]
    26/30: $1\alu_en_out[0:0]
    27/30: $1\rf_wr_data_out[7:0]
    28/30: $1\rf_addr_out[3:0]
    29/30: $1\rf_rd_en_out[0:0]
    30/30: $1\rf_wr_en_out[0:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
     1/11: $11\next_state[3:0]
     2/11: $10\next_state[3:0]
     3/11: $9\next_state[3:0]
     4/11: $8\next_state[3:0]
     5/11: $7\next_state[3:0]
     6/11: $6\next_state[3:0]
     7/11: $5\next_state[3:0]
     8/11: $4\next_state[3:0]
     9/11: $3\next_state[3:0]
    10/11: $2\next_state[3:0]
    11/11: $1\next_state[3:0]
Creating decoders for process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
     1/1: $0\current_state[3:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
     1/2: $1\uart_tx_data_out[7:0]
     2/2: $1\uart_tx_data_valid_out[0:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
     1/7: $7\next_state[2:0]
     2/7: $6\next_state[2:0]
     3/7: $5\next_state[2:0]
     4/7: $4\next_state[2:0]
     5/7: $3\next_state[2:0]
     6/7: $2\next_state[2:0]
     7/7: $1\next_state[2:0]
Creating decoders for process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
     1/1: $0\current_state[2:0]
Creating decoders for process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
     1/30: $4$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$76
     2/30: $3$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$75
     3/30: $3$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$74
     4/30: $2$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR[3:0]$68
     5/30: $2$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA[7:0]$69
     6/30: $2$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$71
     7/30: $2$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$70
     8/30: $1$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$65
     9/30: $1$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR[3:0]$64
    10/30: $1$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA[7:0]$63
    11/30: $1$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR[3:0]$62
    12/30: $1\i[31:0]
    13/30: $0\mem[15][7:0]
    14/30: $0\mem[14][7:0]
    15/30: $0\mem[13][7:0]
    16/30: $0\mem[12][7:0]
    17/30: $0\mem[11][7:0]
    18/30: $0\mem[10][7:0]
    19/30: $0\mem[9][7:0]
    20/30: $0\mem[8][7:0]
    21/30: $0\mem[7][7:0]
    22/30: $0\mem[6][7:0]
    23/30: $0\mem[5][7:0]
    24/30: $0\mem[4][7:0]
    25/30: $0\mem[3][7:0]
    26/30: $0\mem[2][7:0]
    27/30: $0\mem[1][7:0]
    28/30: $0\mem[0][7:0]
    29/30: $0\rd_data_valid_out[0:0]
    30/30: $0\rd_data_out[7:0]
Creating decoders for process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
     1/6: $5\alu_out_comp[15:0]
     2/6: $4\alu_out_comp[15:0]
     3/6: $3\alu_out_comp[15:0]
     4/6: $2\alu_out_comp[15:0]
     5/6: $1\alu_out_comp[15:0]
     6/6: $1\alu_out_comp_valid[0:0]
Creating decoders for process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
     1/2: $0\data_valid_out[0:0]
     2/2: $0\data_out[15:0]
Creating decoders for process `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
     1/1: $0\count[4:0]
Creating decoders for process `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
     1/1: $1\latch_out[0:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
     1/1: $0\sync_data_out[7:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
     1/1: $0\enable_pulse_out[0:0]
Creating decoders for process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
     1/1: $0\ff[2:0]
Creating decoders for process `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
     1/1: $0\ff[2:0]
Creating decoders for process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
     1/4: $1\i[31:0]
     2/4: $0\reg_file[0][1:0]
     3/4: $0\sync_data_out[0:0]
     4/4: $1$splitcmplxassign$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:24$3[2:0]$7

27.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\uart_rx_fsm.\data_valid_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\data_sample_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\deser_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\stp_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\strt_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\par_chk_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\counter_en_out' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
No latch inferred for signal `\uart_rx_fsm.\next_state' from process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
No latch inferred for signal `\parity_check.\par_err_out' from process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
No latch inferred for signal `\strt_check.\strt_err_out' from process `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
No latch inferred for signal `\stp_check.\stp_err_out' from process `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
No latch inferred for signal `\uart_tx_fsm.\mux_sel_out' from process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
No latch inferred for signal `\uart_tx_fsm.\next_state' from process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
No latch inferred for signal `\mux.\tx_out' from process `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
No latch inferred for signal `\sys_control_rx.\rf_wr_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_rd_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_addr_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_wr_data_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_fun_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\clk_gate_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\clk_div_en_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\uart_rf_send_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\uart_alu_send_out' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_addr_en' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\rf_rd_store' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\alu_data_store' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
No latch inferred for signal `\sys_control_rx.\next_state' from process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
No latch inferred for signal `\sys_control_tx.\uart_tx_data_valid_out' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
No latch inferred for signal `\sys_control_tx.\uart_tx_data_out' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
No latch inferred for signal `\sys_control_tx.\next_state' from process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
No latch inferred for signal `\alu.\alu_out_comp' from process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
No latch inferred for signal `\alu.\alu_out_comp_valid' from process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Latch inferred for signal `\clk_gate.\latch_out' from process `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18': $auto$proc_dlatch.cc:427:proc_dlatch$1270

27.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\uart_rx_fsm.\current_state' using process `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
  created $adff cell `$procdff$1271' with positive edge clock and negative level reset.
Creating register for signal `\data_sampling.\register' using process `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
  created $adff cell `$procdff$1272' with positive edge clock and negative level reset.
Creating register for signal `\edge_bit_counter.\bit_cnt_out' using process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
  created $adff cell `$procdff$1273' with positive edge clock and negative level reset.
Creating register for signal `\edge_bit_counter.\edge_cnt_out' using process `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
  created $adff cell `$procdff$1274' with positive edge clock and negative level reset.
Creating register for signal `\deserializer.\register' using process `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
  created $adff cell `$procdff$1275' with positive edge clock and negative level reset.
Creating register for signal `\parity_check.\register' using process `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
  created $adff cell `$procdff$1276' with positive edge clock and negative level reset.
Creating register for signal `\uart_tx_fsm.\busy_out' using process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
  created $adff cell `$procdff$1277' with positive edge clock and negative level reset.
Creating register for signal `\uart_tx_fsm.\current_state' using process `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
  created $adff cell `$procdff$1278' with positive edge clock and negative level reset.
Creating register for signal `\parity_calc.\par_bit_out' using process `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
  created $adff cell `$procdff$1279' with positive edge clock and negative level reset.
Creating register for signal `\serializer.\counter' using process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
  created $adff cell `$procdff$1280' with positive edge clock and negative level reset.
Creating register for signal `\serializer.\int_reg' using process `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
  created $adff cell `$procdff$1281' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\uart_alu_send_data_out' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
  created $adff cell `$procdff$1282' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\uart_rf_send_data_out' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
  created $adff cell `$procdff$1283' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\rf_addr_reg' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
  created $adff cell `$procdff$1284' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_rx.\current_state' using process `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
  created $adff cell `$procdff$1285' with positive edge clock and negative level reset.
Creating register for signal `\sys_control_tx.\current_state' using process `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
  created $adff cell `$procdff$1286' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\rd_data_out' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1287' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\rd_data_valid_out' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1288' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\i' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1289' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[0]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1290' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[1]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1291' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[2]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1292' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[3]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1293' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[4]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1294' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[5]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1295' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[6]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1296' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[7]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1297' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[8]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1298' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[9]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1299' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[10]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1300' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[11]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1301' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[12]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1302' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[13]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1303' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[14]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1304' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.\mem[15]' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1305' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_ADDR' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1306' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_wr$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:38$54_DATA' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1307' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_ADDR' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1308' with positive edge clock and negative level reset.
Creating register for signal `\reg_file.$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA' using process `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
  created $adff cell `$procdff$1309' with positive edge clock and negative level reset.
Creating register for signal `\alu.\data_out' using process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
  created $adff cell `$procdff$1310' with positive edge clock and negative level reset.
Creating register for signal `\alu.\data_valid_out' using process `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
  created $adff cell `$procdff$1311' with positive edge clock and negative level reset.
Creating register for signal `\clk_divider.\count' using process `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
  created $adff cell `$procdff$1312' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\sync_data_out' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
  created $adff cell `$procdff$1313' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\enable_pulse_out' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
  created $adff cell `$procdff$1314' with positive edge clock and negative level reset.
Creating register for signal `\data_synchronizer.\ff' using process `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
  created $adff cell `$procdff$1315' with positive edge clock and negative level reset.
Creating register for signal `\reset_synchronizer.\ff' using process `\reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
  created $adff cell `$procdff$1316' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\sync_data_out' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1317' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\i' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1318' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.$splitcmplxassign$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:24$3' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1319' with positive edge clock and negative level reset.
Creating register for signal `\bit_synchronizer.\reg_file[0]' using process `\bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
  created $adff cell `$procdff$1320' with positive edge clock and negative level reset.

27.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

27.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:74$183'.
Found and cleaned up 8 empty switches in `\uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:38$162'.
Removing empty process `uart_rx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:30$160'.
Found and cleaned up 4 empty switches in `\data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Removing empty process `data_sampling.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:14$146'.
Found and cleaned up 3 empty switches in `\edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Removing empty process `edge_bit_counter.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:12$140'.
Found and cleaned up 1 empty switch in `\deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Removing empty process `deserializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:15$136'.
Found and cleaned up 5 empty switches in `\parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
Removing empty process `parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:19$130'.
Removing empty process `parity_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_check.v:12$128'.
Found and cleaned up 2 empty switches in `\strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
Removing empty process `strt_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/strt_check.v:7$126'.
Found and cleaned up 2 empty switches in `\stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
Removing empty process `stp_check.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/stp_check.v:7$125'.
Found and cleaned up 2 empty switches in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:81$117'.
Found and cleaned up 1 empty switch in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:71$116'.
Found and cleaned up 5 empty switches in `\uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:32$113'.
Removing empty process `uart_tx_fsm.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:24$111'.
Found and cleaned up 2 empty switches in `\parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Removing empty process `parity_calc.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/parity_calc.v:12$102'.
Found and cleaned up 2 empty switches in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Removing empty process `serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:27$98'.
Found and cleaned up 2 empty switches in `\serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Removing empty process `serializer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:17$93'.
Found and cleaned up 1 empty switch in `\mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
Removing empty process `mux.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/mux.v:8$92'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:307$90'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:299$88'.
Found and cleaned up 1 empty switch in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:291$86'.
Found and cleaned up 9 empty switches in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:148$85'.
Found and cleaned up 11 empty switches in `\sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:59$84'.
Removing empty process `sys_control_rx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_rx.v:51$82'.
Found and cleaned up 1 empty switch in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:68$81'.
Found and cleaned up 7 empty switches in `\sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:30$79'.
Removing empty process `sys_control_tx.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/sys_control_tx.v:22$77'.
Found and cleaned up 4 empty switches in `\reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Removing empty process `reg_file.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:21$56'.
Found and cleaned up 5 empty switches in `\alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Removing empty process `alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:34$34'.
Removing empty process `alu.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:20$32'.
Found and cleaned up 3 empty switches in `\clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Removing empty process `clk_divider.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:12$21'.
Found and cleaned up 1 empty switch in `\clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
Removing empty process `clk_gate.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_gate.v:9$18'.
Found and cleaned up 1 empty switch in `\data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:33$16'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:25$14'.
Removing empty process `data_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_synchronizer.v:17$12'.
Removing empty process `reset_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/reset_synchronizer.v:10$8'.
Removing empty process `bit_synchronizer.$proc$/home/amustafa/qflow_training/multi_clock_digital_system/src/bit_synchronizer.v:12$4'.
Cleaned up 91 empty switches.

27.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_rx_fsm.
<suppressed ~6 debug messages>
Optimizing module data_sampling.
Optimizing module edge_bit_counter.
Optimizing module deserializer.
Optimizing module parity_check.
<suppressed ~4 debug messages>
Optimizing module strt_check.
<suppressed ~1 debug messages>
Optimizing module stp_check.
Optimizing module uart_tx_fsm.
<suppressed ~6 debug messages>
Optimizing module parity_calc.
<suppressed ~2 debug messages>
Optimizing module serializer.
<suppressed ~1 debug messages>
Optimizing module mux.
<suppressed ~1 debug messages>
Optimizing module uart_tx.
Optimizing module uart_rx.
Optimizing module sys_control_rx.
<suppressed ~3 debug messages>
Optimizing module sys_control_tx.
<suppressed ~4 debug messages>
Optimizing module sys_control.
Optimizing module reg_file.
<suppressed ~2 debug messages>
Optimizing module alu.
<suppressed ~3 debug messages>
Optimizing module uart_top.
Optimizing module clk_divider.
<suppressed ~3 debug messages>
Optimizing module clk_gate.
<suppressed ~7 debug messages>
Optimizing module data_synchronizer.
Optimizing module reset_synchronizer.
Optimizing module bit_synchronizer.
Optimizing module system_top.

27.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_rx_fsm.
<suppressed ~4 debug messages>
Optimizing module data_sampling.
<suppressed ~6 debug messages>
Optimizing module edge_bit_counter.
Optimizing module deserializer.
Optimizing module parity_check.
Optimizing module strt_check.
Optimizing module stp_check.
Optimizing module uart_tx_fsm.
Optimizing module parity_calc.
Optimizing module serializer.
Optimizing module mux.
Optimizing module uart_tx.
Optimizing module uart_rx.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module sys_control.
Optimizing module reg_file.
Optimizing module alu.
Optimizing module uart_top.
Optimizing module clk_divider.
<suppressed ~2 debug messages>
Optimizing module clk_gate.
Optimizing module data_synchronizer.
Optimizing module reset_synchronizer.
Optimizing module bit_synchronizer.
Optimizing module system_top.

27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \uart_tx_fsm..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \system_top..
Removed 46 unused cells and 427 unused wires.
<suppressed ~69 debug messages>

27.5. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

27.6. Executing OPT pass (performing simple optimizations).

27.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~18 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
<suppressed ~3 debug messages>
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~48 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~144 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~36 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~99 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~30 debug messages>
Removed a total of 126 cells.

27.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1193.
    dead port 2/2 on $mux $procmux$1195.
    dead port 2/2 on $mux $procmux$1205.
    dead port 2/2 on $mux $procmux$1207.
    dead port 2/2 on $mux $procmux$1218.
    dead port 2/2 on $mux $procmux$1220.
    dead port 2/2 on $mux $procmux$1240.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1250.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$376.
    dead port 2/2 on $mux $procmux$379.
    dead port 2/2 on $mux $procmux$381.
    dead port 2/2 on $mux $procmux$385.
    dead port 2/2 on $mux $procmux$388.
    dead port 2/2 on $mux $procmux$390.
    dead port 1/2 on $mux $procmux$397.
    dead port 2/2 on $mux $procmux$399.
    dead port 2/2 on $mux $procmux$405.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$945.
    dead port 1/2 on $mux $procmux$948.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$423.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$414.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$654.
    dead port 2/2 on $mux $procmux$516.
    dead port 2/2 on $mux $procmux$522.
    dead port 2/2 on $mux $procmux$529.
    dead port 2/2 on $mux $procmux$536.
    dead port 2/2 on $mux $procmux$543.
    dead port 2/2 on $mux $procmux$551.
    dead port 2/2 on $mux $procmux$559.
    dead port 2/2 on $mux $procmux$567.
    dead port 2/2 on $mux $procmux$740.
    dead port 2/2 on $mux $procmux$576.
    dead port 2/2 on $mux $procmux$747.
    dead port 2/2 on $mux $procmux$755.
    dead port 2/2 on $mux $procmux$764.
    dead port 2/2 on $mux $procmux$586.
    dead port 2/2 on $mux $procmux$774.
    dead port 2/2 on $mux $procmux$785.
    dead port 2/2 on $mux $procmux$797.
    dead port 2/2 on $mux $procmux$596.
    dead port 2/2 on $mux $procmux$810.
    dead port 2/2 on $mux $procmux$828.
    dead port 2/2 on $mux $procmux$830.
    dead port 2/2 on $mux $procmux$844.
    dead port 2/2 on $mux $procmux$607.
    dead port 2/2 on $mux $procmux$618.
    dead port 2/2 on $mux $procmux$629.
    dead port 2/2 on $mux $procmux$641.
    dead port 2/2 on $mux $procmux$510.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$878.
    dead port 2/2 on $mux $procmux$886.
    dead port 2/2 on $mux $procmux$895.
    dead port 1/2 on $mux $procmux$906.
    dead port 2/2 on $mux $procmux$908.
    dead port 2/2 on $mux $procmux$918.
    dead port 2/2 on $mux $procmux$871.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$212.
    dead port 2/2 on $mux $procmux$219.
    dead port 2/2 on $mux $procmux$227.
    dead port 2/2 on $mux $procmux$236.
    dead port 2/2 on $mux $procmux$204.
    dead port 2/2 on $mux $procmux$206.
    dead port 1/2 on $mux $procmux$269.
    dead port 2/2 on $mux $procmux$271.
    dead port 2/2 on $mux $procmux$277.
    dead port 2/2 on $mux $procmux$284.
    dead port 2/2 on $mux $procmux$292.
    dead port 1/2 on $mux $procmux$302.
    dead port 2/2 on $mux $procmux$304.
    dead port 2/2 on $mux $procmux$313.
    dead port 2/2 on $mux $procmux$323.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$442.
    dead port 2/2 on $mux $procmux$451.
    dead port 2/2 on $mux $procmux$453.
    dead port 2/2 on $mux $procmux$461.
    dead port 2/2 on $mux $procmux$471.
Removed 76 multiplexer ports.
<suppressed ~65 debug messages>

27.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    New ctrl vector for $pmux cell $procmux$696: $auto$opt_reduce.cc:134:opt_pmux$1322
    New ctrl vector for $pmux cell $procmux$710: $auto$opt_reduce.cc:134:opt_pmux$1324
    New ctrl vector for $pmux cell $procmux$717: { $auto$opt_reduce.cc:134:opt_pmux$1326 $procmux$537_CMP }
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    New ctrl vector for $pmux cell $procmux$863: $auto$opt_reduce.cc:134:opt_pmux$1328
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
    New ctrl vector for $pmux cell $procmux$251: $auto$opt_reduce.cc:134:opt_pmux$1330
    New ctrl vector for $pmux cell $procmux$245: $auto$opt_reduce.cc:134:opt_pmux$1332
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 6 changes.

27.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~27 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~6 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~3 debug messages>
Removed a total of 13 cells.

27.6.6. Executing OPT_DFF pass (perform DFF optimizations).

27.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 212 unused wires.
<suppressed ~11 debug messages>

27.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.9. Rerunning OPT passes. (Maybe there is more to do..)

27.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    New ctrl vector for $pmux cell $procmux$672: $auto$opt_reduce.cc:134:opt_pmux$1334
    New ctrl vector for $pmux cell $procmux$732: $auto$opt_reduce.cc:134:opt_pmux$1336
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    New ctrl vector for $pmux cell $procmux$921: { $procmux$909_CMP $procmux$860_CMP $procmux$879_CMP $auto$opt_reduce.cc:134:opt_pmux$1338 }
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
    New ctrl vector for $pmux cell $procmux$474: { $procmux$437_CMP \ser_en_out $procmux$435_CMP $auto$opt_reduce.cc:134:opt_pmux$1340 }
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 4 changes.

27.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.6.13. Executing OPT_DFF pass (perform DFF optimizations).

27.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.16. Rerunning OPT passes. (Maybe there is more to do..)

27.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.6.20. Executing OPT_DFF pass (perform DFF optimizations).

27.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.6.23. Finished OPT passes. (There is nothing left to do.)

27.7. Executing FSM pass (extract and optimize FSM).

27.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking sys_control_rx.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking sys_control_tx.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking uart_rx_fsm.current_state as FSM state register:
    Circuit seems to be self-resetting.
Not marking uart_tx_fsm.current_state as FSM state register:
    Circuit seems to be self-resetting.

27.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

27.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

27.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

27.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

27.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

27.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27.8. Executing OPT pass (performing simple optimizations).

27.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

27.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [2]).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [1]).
Adding EN signal on $procdff$1272 ($adff) from module data_sampling (D = \data_in, Q = \register [0]).
Adding EN signal on $procdff$1313 ($adff) from module data_synchronizer (D = \unsync_data_in, Q = \sync_data_out).
Adding EN signal on $procdff$1275 ($adff) from module deserializer (D = { \sampled_bit_in \register [7:1] }, Q = \register).
Adding EN signal on $procdff$1274 ($adff) from module edge_bit_counter (D = $0\edge_cnt_out[4:0], Q = \edge_cnt_out).
Adding EN signal on $procdff$1273 ($adff) from module edge_bit_counter (D = $0\bit_cnt_out[3:0], Q = \bit_cnt_out).
Adding EN signal on $procdff$1279 ($adff) from module parity_calc (D = $0\par_bit_out[0:0], Q = \par_bit_out).
Adding EN signal on $procdff$1276 ($adff) from module parity_check (D = \register [8:1], Q = \register [8:1]).
Handling D = Q on $auto$ff.cc:266:slice$1371 ($adffe) from module parity_check (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1371 ($dlatch) from module parity_check.
Adding EN signal on $procdff$1305 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[15]).
Adding EN signal on $procdff$1304 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[14]).
Adding EN signal on $procdff$1303 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[13]).
Adding EN signal on $procdff$1302 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[12]).
Adding EN signal on $procdff$1301 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[11]).
Adding EN signal on $procdff$1300 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[10]).
Adding EN signal on $procdff$1299 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[9]).
Adding EN signal on $procdff$1298 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[8]).
Adding EN signal on $procdff$1297 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[7]).
Adding EN signal on $procdff$1296 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[6]).
Adding EN signal on $procdff$1295 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[5]).
Adding EN signal on $procdff$1294 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[4]).
Adding EN signal on $procdff$1293 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[3]).
Adding EN signal on $procdff$1292 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[2]).
Adding EN signal on $procdff$1291 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[1]).
Adding EN signal on $procdff$1290 ($adff) from module reg_file (D = \wr_data_in, Q = \mem[0]).
Adding EN signal on $procdff$1288 ($adff) from module reg_file (D = $procmux$1175_Y, Q = \rd_data_valid_out).
Adding EN signal on $procdff$1287 ($adff) from module reg_file (D = $4$mem2reg_rd$\mem$/home/amustafa/qflow_training/multi_clock_digital_system/src/reg_file.v:42$55_DATA[7:0]$76, Q = \rd_data_out).
Adding EN signal on $procdff$1281 ($adff) from module serializer (D = $0\int_reg[7:0], Q = \int_reg).
Adding EN signal on $procdff$1280 ($adff) from module serializer (D = $0\counter[2:0], Q = \counter).
Adding EN signal on $procdff$1284 ($adff) from module sys_control_rx (D = \uart_rx_data_in, Q = \rf_addr_reg).
Adding EN signal on $procdff$1283 ($adff) from module sys_control_rx (D = \rf_rd_data_in, Q = \uart_rf_send_data_out).
Adding EN signal on $procdff$1282 ($adff) from module sys_control_rx (D = \alu_data_in, Q = \uart_alu_send_data_out).
Adding EN signal on $procdff$1286 ($adff) from module sys_control_tx (D = \next_state, Q = \current_state).
Adding EN signal on $procdff$1271 ($adff) from module uart_rx_fsm (D = \next_state, Q = \current_state).
Adding EN signal on $procdff$1277 ($adff) from module uart_tx_fsm (D = $0\busy_out[0:0], Q = \busy_out).

27.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 50 unused cells and 48 unused wires.
<suppressed ~56 debug messages>

27.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~2 debug messages>
Optimizing module mux.
Optimizing module parity_calc.
<suppressed ~1 debug messages>
Optimizing module parity_check.
<suppressed ~5 debug messages>
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~2 debug messages>
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~1 debug messages>

27.8.9. Rerunning OPT passes. (Maybe there is more to do..)

27.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
<suppressed ~3 debug messages>
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
<suppressed ~3 debug messages>
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 2 cells.

27.8.13. Executing OPT_DFF pass (perform DFF optimizations).

27.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 1 unused cells and 6 unused wires.
<suppressed ~4 debug messages>

27.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.16. Rerunning OPT passes. (Maybe there is more to do..)

27.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.8.20. Executing OPT_DFF pass (perform DFF optimizations).

27.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.8.23. Finished OPT passes. (There is nothing left to do.)

27.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 7 bits (of 16) from port Y of cell alu.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35 ($add).
Removed top 7 bits (of 16) from port Y of cell alu.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36 ($sub).
Removed top 8 bits (of 16) from port Y of cell alu.$and$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:55$39 ($and).
Removed top 8 bits (of 16) from port Y of cell alu.$or$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:58$40 ($or).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:61$42 ($not).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:64$44 ($not).
Removed top 8 bits (of 16) from port Y of cell alu.$xor$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:67$45 ($xor).
Removed top 8 bits (of 16) from port A of cell alu.$not$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:70$47 ($not).
Removed top 14 bits (of 16) from mux cell alu.$procmux$1191 ($mux).
Removed top 14 bits (of 16) from mux cell alu.$procmux$1203 ($mux).
Removed top 15 bits (of 16) from mux cell alu.$procmux$1216 ($mux).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1232_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1233_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1234_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$1235_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1236_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$1237_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$1238_CMP0 ($eq).
Removed top 15 bits (of 16) from wire alu.$3\alu_out_comp[15:0].
Removed top 14 bits (of 16) from wire alu.$4\alu_out_comp[15:0].
Removed top 14 bits (of 16) from wire alu.$5\alu_out_comp[15:0].
Removed top 7 bits (of 16) from wire alu.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35_Y.
Removed top 8 bits (of 16) from wire alu.$and$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:55$39_Y.
Removed top 8 bits (of 16) from wire alu.$or$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:58$40_Y.
Removed top 8 bits (of 16) from wire alu.$xor$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:67$45_Y.
Removed top 31 bits (of 32) from port B of cell clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
Removed top 27 bits (of 32) from port Y of cell clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
Removed top 28 bits (of 32) from port B of cell clk_divider.$le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28 ($le).
Removed top 31 bits (of 32) from mux cell clk_divider.$ternary$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$31 ($mux).
Removed top 27 bits (of 32) from wire clk_divider.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24_Y.
Removed top 28 bits (of 32) from port A of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 31 bits (of 32) from port B of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 27 bits (of 32) from port Y of cell data_sampling.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
Removed top 1 bits (of 5) from port B of cell data_sampling.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:20$152 ($eq).
Removed top 28 bits (of 32) from port A of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 31 bits (of 32) from port B of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 27 bits (of 32) from port Y of cell data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
Removed top 27 bits (of 32) from port B of cell data_sampling.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$155 ($eq).
Removed top 27 bits (of 32) from wire data_sampling.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154_Y.
Removed top 24 bits (of 32) from mux cell deserializer.$ternary$/home/amustafa/qflow_training/multi_clock_digital_system/src/deserializer.v:25$139 ($mux).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
Removed top 27 bits (of 32) from port Y of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
Removed top 26 bits (of 32) from port Y of cell edge_bit_counter.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
Removed top 31 bits (of 32) from port B of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
Removed top 28 bits (of 32) from port Y of cell edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
Removed top 1 bits (of 3) from port B of cell edge_bit_counter.$auto$opt_dff.cc:195:make_patterns_logic$1365 ($ne).
Removed top 27 bits (of 32) from wire edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142_Y.
Removed top 28 bits (of 32) from wire edge_bit_counter.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145_Y.
Removed top 1 bits (of 2) from port B of cell mux.$procmux$498_CMP0 ($eq).
Removed top 8 bits (of 9) from wire parity_check.register.
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1052_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1066_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1081_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell reg_file.$procmux$1097_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell reg_file.$procmux$1114_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell reg_file.$procmux$1132_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell reg_file.$procmux$1151_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
Removed top 29 bits (of 32) from port Y of cell serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
Removed top 29 bits (of 32) from wire serializer.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100_Y.
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$560_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$587_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sys_control_rx.$procmux$608_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sys_control_rx.$procmux$619_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sys_control_rx.$procmux$655_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$745 ($mux).
Removed top 3 bits (of 4) from mux cell sys_control_rx.$procmux$753 ($mux).
Removed top 1 bits (of 4) from mux cell sys_control_rx.$procmux$772 ($mux).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$783 ($mux).
Removed top 2 bits (of 4) from mux cell sys_control_rx.$procmux$795 ($mux).
Removed top 3 bits (of 4) from mux cell sys_control_rx.$procmux$808 ($mux).
Removed top 4 bits (of 8) from FF cell sys_control_rx.$auto$ff.cc:266:slice$1435 ($adffe).
Removed top 2 bits (of 4) from wire sys_control_rx.$10\next_state[3:0].
Removed top 3 bits (of 4) from wire sys_control_rx.$4\next_state[3:0].
Removed top 2 bits (of 4) from wire sys_control_rx.$5\next_state[3:0].
Removed top 2 bits (of 4) from wire sys_control_rx.$6\next_state[3:0].
Removed top 4 bits (of 8) from wire sys_control_rx.rf_addr_reg.
Removed top 1 bits (of 3) from port B of cell sys_control_tx.$procmux$860_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell sys_control_tx.$procmux$861_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell sys_control_tx.$procmux$879_CMP0 ($eq).
Removed top 4 bits (of 8) from wire system_top.rf_addr.
Removed top 3 bits (of 4) from port B of cell uart_rx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:48$164 ($eq).
Removed top 28 bits (of 32) from port A of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 30 bits (of 32) from port B of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 27 bits (of 32) from port Y of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
Removed top 27 bits (of 32) from port B of cell uart_rx_fsm.$gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186 ($gt).
Removed top 28 bits (of 32) from port B of cell uart_rx_fsm.$lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189 ($lt).
Removed top 31 bits (of 32) from port B of cell uart_rx_fsm.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
Removed top 26 bits (of 32) from port Y of cell uart_rx_fsm.$sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
Removed top 28 bits (of 32) from port A of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 30 bits (of 32) from port B of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 27 bits (of 32) from port Y of cell uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
Removed top 27 bits (of 32) from port B of cell uart_rx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$195 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_rx_fsm.$procmux$220_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_rx_fsm.$procmux$228_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_rx_fsm.$procmux$237_CMP0 ($eq).
Removed top 27 bits (of 32) from wire uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194_Y.
Removed top 27 bits (of 32) from wire uart_rx_fsm.$add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185_Y.
Removed top 1 bits (of 3) from port B of cell uart_tx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:69$115 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_tx_fsm.$eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_tx_fsm.v:84$120 ($eq).
Removed top 1 bits (of 3) from port B of cell uart_tx_fsm.$procmux$435_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell uart_tx_fsm.$procmux$437_CMP0 ($eq).
Removed top 2 bits (of 3) from mux cell uart_tx_fsm.$procmux$440 ($mux).
Removed top 2 bits (of 3) from wire uart_tx_fsm.$2\next_state[2:0].
Removed top 1 bits (of 3) from wire uart_tx_fsm.next_state.

27.10. Executing PEEPOPT pass (run peephole optimizers).

27.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 24 unused wires.
<suppressed ~11 debug messages>

27.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35 ($add).
  creating $macc model for $mul$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:49$37 ($mul).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35.
  creating $macc cell for $mul$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:49$37: $auto$alumacc.cc:365:replace_macc$1488
  creating $alu model for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49 ($gt): merged with $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu model for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:85$50 ($lt): merged with $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu model for $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:73$48 ($eq): merged with $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:43$35: $auto$alumacc.cc:485:replace_alu$1489
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:46$36, $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:79$49, $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:85$50, $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/alu.v:73$48: $auto$alumacc.cc:485:replace_alu$1492
  created 2 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module bit_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clk_divider:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24 ($add).
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24.
  creating $alu model for $le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28 ($le): new $alu
  creating $alu cell for $le$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:26$28: $auto$alumacc.cc:485:replace_alu$1504
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/clk_divider.v:20$24: $auto$alumacc.cc:485:replace_alu$1517
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module clk_gate:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_sampling:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:22$154: $auto$alumacc.cc:485:replace_alu$1520
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/data_sampling.v:18$149: $auto$alumacc.cc:485:replace_alu$1523
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module deserializer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module edge_bit_counter:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142 ($add).
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:24$142: $auto$alumacc.cc:485:replace_alu$1526
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:28$145: $auto$alumacc.cc:485:replace_alu$1529
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/edge_bit_counter.v:25$143: $auto$alumacc.cc:485:replace_alu$1532
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module parity_calc:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module parity_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reg_file:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reset_synchronizer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module serializer:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100 ($add).
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100.
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/serializer.v:34$100: $auto$alumacc.cc:485:replace_alu$1535
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module stp_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module strt_check:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control_rx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sys_control_tx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module system_top:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_rx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_rx_fsm:
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194 ($add).
  creating $macc model for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185 ($add).
  creating $macc model for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191 ($sub).
  creating $alu model for $macc $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185.
  creating $alu model for $macc $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194.
  creating $alu model for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186 ($gt): new $alu
  creating $alu model for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189 ($lt): new $alu
  creating $alu model for $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:60$174 ($eq): merged with $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189.
  creating $alu cell for $lt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:97$189, $eq$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:60$174: $auto$alumacc.cc:485:replace_alu$1540
  creating $alu cell for $gt$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$186: $auto$alumacc.cc:485:replace_alu$1547
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:111$194: $auto$alumacc.cc:485:replace_alu$1552
  creating $alu cell for $add$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:88$185: $auto$alumacc.cc:485:replace_alu$1555
  creating $alu cell for $sub$/home/amustafa/qflow_training/multi_clock_digital_system/src/uart_rx_fsm.v:104$191: $auto$alumacc.cc:485:replace_alu$1558
  created 5 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_top:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_tx:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module uart_tx_fsm:
  created 0 $alu and 0 $macc cells.

27.13. Executing SHARE pass (SAT-based resource sharing).

27.14. Executing OPT pass (performing simple optimizations).

27.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~1 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~9 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 3 cells.

27.14.6. Executing OPT_DFF pass (perform DFF optimizations).

27.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 2 unused cells and 12 unused wires.
<suppressed ~6 debug messages>

27.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.9. Rerunning OPT passes. (Maybe there is more to do..)

27.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

27.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.14.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.14.16. Finished OPT passes. (There is nothing left to do.)

27.15. Executing MEMORY pass.

27.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

27.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

27.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

27.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

27.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

27.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

27.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

27.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

27.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.17. Executing OPT pass (performing simple optimizations).

27.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~20 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
<suppressed ~1 debug messages>
Optimizing module clk_gate.
Optimizing module data_sampling.
<suppressed ~1 debug messages>
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~4 debug messages>
Optimizing module mux.
<suppressed ~1 debug messages>
Optimizing module parity_calc.
<suppressed ~1 debug messages>
Optimizing module parity_check.
<suppressed ~3 debug messages>
Optimizing module reg_file.
<suppressed ~2 debug messages>
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~2 debug messages>
Optimizing module stp_check.
<suppressed ~2 debug messages>
Optimizing module strt_check.
<suppressed ~2 debug messages>
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~10 debug messages>
Optimizing module sys_control_tx.
<suppressed ~5 debug messages>
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~15 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~4 debug messages>

27.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.17.3. Executing OPT_DFF pass (perform DFF optimizations).

27.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 1 unused cells and 40 unused wires.
<suppressed ~14 debug messages>

27.17.5. Finished fast OPT passes.

27.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

27.19. Executing OPT pass (performing simple optimizations).

27.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
    Consolidated identical input bits for $mux cell $procmux$1191:
      Old ports: A=2'11, B=2'00, Y=$5\alu_out_comp[15:0]
      New ports: A=1'1, B=1'0, Y=$5\alu_out_comp[15:0] [0]
      New connections: $5\alu_out_comp[15:0] [1] = $5\alu_out_comp[15:0] [0]
    Consolidated identical input bits for $mux cell $procmux$1203:
      Old ports: A=2'10, B=2'00, Y=$4\alu_out_comp[15:0]
      New ports: A=1'1, B=1'0, Y=$4\alu_out_comp[15:0] [1]
      New connections: $4\alu_out_comp[15:0] [0] = 1'0
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
    Consolidated identical input bits for $mux cell $procmux$738:
      Old ports: A=4'1010, B=4'0000, Y=$11\next_state[3:0]
      New ports: A=1'1, B=1'0, Y=$11\next_state[3:0] [1]
      New connections: { $11\next_state[3:0] [3:2] $11\next_state[3:0] [0] } = { $11\next_state[3:0] [1] 2'00 }
    Consolidated identical input bits for $mux cell $procmux$762:
      Old ports: A=4'0111, B=4'1000, Y=$8\next_state[3:0]
      New ports: A=2'01, B=2'10, Y={ $8\next_state[3:0] [3] $8\next_state[3:0] [0] }
      New connections: $8\next_state[3:0] [2:1] = { $8\next_state[3:0] [0] $8\next_state[3:0] [0] }
    Consolidated identical input bits for $mux cell $procmux$772:
      Old ports: A=3'110, B=3'000, Y=$7\next_state[3:0] [2:0]
      New ports: A=1'1, B=1'0, Y=$7\next_state[3:0] [1]
      New connections: { $7\next_state[3:0] [2] $7\next_state[3:0] [0] } = { $7\next_state[3:0] [1] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$795:
      Old ports: A=2'11, B=2'00, Y=$5\next_state[3:0]
      New ports: A=1'1, B=1'0, Y=$5\next_state[3:0] [0]
      New connections: $5\next_state[3:0] [1] = $5\next_state[3:0] [0]
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
    Consolidated identical input bits for $mux cell $procmux$916:
      Old ports: A=3'010, B=3'001, Y=$2\next_state[2:0]
      New ports: A=2'10, B=2'01, Y=$2\next_state[2:0] [1:0]
      New connections: $2\next_state[2:0] [2] = 1'0
    New ctrl vector for $pmux cell $procmux$921: { $procmux$909_CMP $procmux$860_CMP $procmux$879_CMP }
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
    Consolidated identical input bits for $mux cell $procmux$275:
      Old ports: A=3'000, B=3'001, Y=$7\next_state[2:0]
      New ports: A=1'0, B=1'1, Y=$7\next_state[2:0] [0]
      New connections: $7\next_state[2:0] [2:1] = 2'00
    Consolidated identical input bits for $mux cell $procmux$311:
      Old ports: A=3'011, B=3'010, Y=$3\next_state[2:0]
      New ports: A=1'1, B=1'0, Y=$3\next_state[2:0] [0]
      New connections: $3\next_state[2:0] [2:1] = 2'01
    New ctrl vector for $pmux cell $procmux$326: { $procmux$324_CMP $procmux$237_CMP $auto$opt_reduce.cc:134:opt_pmux$1574 $procmux$207_CMP }
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
    Consolidated identical input bits for $mux cell $procmux$448:
      Old ports: A=3'100, B=3'011, Y=$4\next_state[2:0]
      New ports: A=2'10, B=2'01, Y={ $4\next_state[2:0] [2] $4\next_state[2:0] [0] }
      New connections: $4\next_state[2:0] [1] = $4\next_state[2:0] [0]
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 12 changes.

27.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.19.6. Executing OPT_SHARE pass.

27.19.7. Executing OPT_DFF pass (perform DFF optimizations).

27.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~3 debug messages>
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~2 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.10. Rerunning OPT passes. (Maybe there is more to do..)

27.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~3 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 1 cells.

27.19.14. Executing OPT_SHARE pass.

27.19.15. Executing OPT_DFF pass (perform DFF optimizations).

27.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

27.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.18. Rerunning OPT passes. (Maybe there is more to do..)

27.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

27.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

27.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

27.19.22. Executing OPT_SHARE pass.

27.19.23. Executing OPT_DFF pass (perform DFF optimizations).

27.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

27.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.19.26. Finished OPT passes. (There is nothing left to do.)

27.20. Executing TECHMAP pass (map to technology primitives).

27.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

27.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$bfceb922395790c0ce92e9f9b5b428d4fc72cc30\_90_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$332fab4e157f868977379756d21fa99887c3c6c4\_90_alu for cells of type $alu.
Using template $paramod$0ae6dcbc606d0267ec97d3ccf20343286af3366c\_90_alu for cells of type $alu.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using template $paramod$20d3ee62d72123142eb855d7ddafd835e31ba009\_90_pmux for cells of type $pmux.
Using template $paramod$4d45682f6d5f8751d24fc75184ef72226da353f7\_90_pmux for cells of type $pmux.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod$75a16668b548c3bac59647e2f0c7dad55b2b94b9\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_xor.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$943564b9366bbc392bf4bbc801aa0a2d7742a4e0\_90_alu for cells of type $alu.
Using template $paramod$dde52db7035cb02b3cc5e73865788532339e3bcb\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dlatch.
Using template $paramod$83dd457849c736323edf2edb15923eb27f99c683\_90_alu for cells of type $alu.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\_90_alu for cells of type $alu.
Using template $paramod$67686dad8c792aead4495d34957ca1f4c910d0ba\_90_div for cells of type $div.
Using extmapper maccmap for cells of type $macc.
  add \data_a_in * \data_b_in (8x8 bits, unsigned)
Using template $paramod$e85bcdd999a9f7e1064fcb77207041270947b77a\_90_pmux for cells of type $pmux.
Using template $paramod$67686dad8c792aead4495d34957ca1f4c910d0ba\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=16:A_WIDTH=16:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000010000 for cells of type $__div_mod_u.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod$02488ff6fa51b28bbfa470bdd9b0e548b3357746\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=18:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=18:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=19:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=19:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=20:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=20:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=21:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=21:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=22:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=22:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=23:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=23:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=24:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=24:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=25:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=25:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=26:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=26:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=27:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=27:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=28:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=28:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=29:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=29:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=30:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=30:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=31:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=31:A_WIDTH=16:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$d66a711d7e97d14a7c7a9fd9e900c39b1fc36cfa\_90_alu for cells of type $alu.
Using template $paramod$8359f4ac8e08a95551ec17e9becbee696d87568d\_90_alu for cells of type $alu.
Using template $paramod$3e9f586ebf39197c9185418e155ec5725178e703\_90_alu for cells of type $alu.
Using template $paramod$99f84fe1e34117baf970301335fa146f92b93eb7\_90_alu for cells of type $alu.
Using template $paramod$10caef7eb223495dec7ca6c51abc18dbd379ce45\_90_alu for cells of type $alu.
Using template $paramod$6ae352d62dfc78ea1f63c7f3961ba142be4a2f93\_90_alu for cells of type $alu.
Using template $paramod$7bdc7d89ea9376c9c454fd05d9b64ca6288b61c9\_90_alu for cells of type $alu.
Using template $paramod$96a374a77d27fe2a5f65189ccd5c4d82c02f3e0c\_90_alu for cells of type $alu.
Using template $paramod$c01a73249af533291d6c07bc7dff8edfd9012ebf\_90_alu for cells of type $alu.
Using template $paramod$4dafc65fa46f14914da22e0fac43fee737cf5e98\_90_alu for cells of type $alu.
Using template $paramod$6514813ccfd0fbcd872b47be16e9bc3f005ba67f\_90_alu for cells of type $alu.
Using template $paramod$90cb621aa18d0bfc972ff6df82973fce6d62f25a\_90_alu for cells of type $alu.
Using template $paramod$28a6ec5648d14f65107108cc45dfc9433b8b29ab\_90_alu for cells of type $alu.
Using template $paramod$1b1e81b08462e7f621826ba0c290068af8e4e550\_90_alu for cells of type $alu.
Using template $paramod$1c5b0982e801b857faf786570d1281fe30bbf0dc\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
No more expansions possible.
<suppressed ~8660 debug messages>

27.21. Executing OPT pass (performing simple optimizations).

27.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~5361 debug messages>
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
<suppressed ~41 debug messages>
Optimizing module clk_gate.
Optimizing module data_sampling.
<suppressed ~59 debug messages>
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
<suppressed ~87 debug messages>
Optimizing module mux.
<suppressed ~8 debug messages>
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
<suppressed ~60 debug messages>
Optimizing module reset_synchronizer.
Optimizing module serializer.
<suppressed ~21 debug messages>
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~128 debug messages>
Optimizing module sys_control_tx.
<suppressed ~36 debug messages>
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
<suppressed ~167 debug messages>
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.
<suppressed ~38 debug messages>

27.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~7617 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
<suppressed ~21 debug messages>
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
<suppressed ~18 debug messages>
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
<suppressed ~12 debug messages>
Finding identical cells in module `\mux'.
<suppressed ~6 debug messages>
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~156 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
<suppressed ~12 debug messages>
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
<suppressed ~144 debug messages>
Finding identical cells in module `\sys_control_tx'.
<suppressed ~15 debug messages>
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
<suppressed ~66 debug messages>
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
<suppressed ~12 debug messages>
Removed a total of 2693 cells.

27.21.3. Executing OPT_DFF pass (perform DFF optimizations).

27.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 354 unused cells and 5193 unused wires.
<suppressed ~366 debug messages>

27.21.5. Finished fast OPT passes.

27.22. Executing ABC pass (technology mapping using ABC).

27.22.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 2426 gates and 2448 wires to a netlist network with 21 inputs and 16 outputs.

27.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      183
ABC RESULTS:              NAND cells:       44
ABC RESULTS:              XNOR cells:       96
ABC RESULTS:               NOT cells:      115
ABC RESULTS:               AND cells:       99
ABC RESULTS:             ORNOT cells:       82
ABC RESULTS:               NOR cells:      171
ABC RESULTS:               XOR cells:      307
ABC RESULTS:                OR cells:      324
ABC RESULTS:            ANDNOT cells:      819
ABC RESULTS:        internal signals:     2411
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

27.22.2. Extracting gate netlist of module `\bit_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.3. Extracting gate netlist of module `\clk_divider' to `<abc-temp-dir>/input.blif'..
Extracted 61 gates and 74 wires to a netlist network with 11 inputs and 6 outputs.

27.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.3.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               XOR cells:        7
ABC RESULTS:                OR cells:       10
ABC RESULTS:            ANDNOT cells:       21
ABC RESULTS:        internal signals:       57
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        6
Removing temp directory.

27.22.4. Extracting gate netlist of module `\clk_gate' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

27.22.4.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.5. Extracting gate netlist of module `\data_sampling' to `<abc-temp-dir>/input.blif'..
Extracted 63 gates and 76 wires to a netlist network with 13 inputs and 4 outputs.

27.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.5.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        5
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       16
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:            ANDNOT cells:       10
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:       16
ABC RESULTS:        internal signals:       59
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        4
Removing temp directory.

27.22.6. Extracting gate netlist of module `\data_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

27.22.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.6.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.7. Extracting gate netlist of module `\deserializer' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 18 wires to a netlist network with 9 inputs and 8 outputs.

27.22.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        8
Removing temp directory.

27.22.8. Extracting gate netlist of module `\edge_bit_counter' to `<abc-temp-dir>/input.blif'..
Extracted 66 gates and 83 wires to a netlist network with 16 inputs and 11 outputs.

27.22.8.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.8.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:               NOT cells:        4
ABC RESULTS:                OR cells:       11
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               AND cells:        2
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               XOR cells:       12
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:        internal signals:       56
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       11
Removing temp directory.

27.22.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 14 gates and 19 wires to a netlist network with 4 inputs and 1 outputs.

27.22.9.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.9.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.10. Extracting gate netlist of module `\parity_calc' to `<abc-temp-dir>/input.blif'..
Extracted 13 gates and 23 wires to a netlist network with 10 inputs and 2 outputs.

27.22.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.10.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:        5
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        2
Removing temp directory.

27.22.11. Extracting gate netlist of module `\parity_check' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 6 wires to a netlist network with 3 inputs and 1 outputs.

27.22.11.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.11.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.12. Extracting gate netlist of module `\reg_file' to `<abc-temp-dir>/input.blif'..
Extracted 320 gates and 454 wires to a netlist network with 134 inputs and 27 outputs.

27.22.12.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.12.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:               AND cells:        2
ABC RESULTS:              NAND cells:        8
ABC RESULTS:            ANDNOT cells:      142
ABC RESULTS:                OR cells:      133
ABC RESULTS:               MUX cells:        8
ABC RESULTS:        internal signals:      293
ABC RESULTS:           input signals:      134
ABC RESULTS:          output signals:       27
Removing temp directory.

27.22.13. Extracting gate netlist of module `\reset_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.14. Extracting gate netlist of module `\serializer' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 46 wires to a netlist network with 21 inputs and 14 outputs.

27.22.14.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.14.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:               MUX cells:        7
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       14
Removing temp directory.

27.22.15. Extracting gate netlist of module `\stp_check' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.

27.22.15.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.15.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.16. Extracting gate netlist of module `\strt_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

27.22.16.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.16.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

27.22.17. Extracting gate netlist of module `\sys_control' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.18. Extracting gate netlist of module `\sys_control_rx' to `<abc-temp-dir>/input.blif'..
Extracted 158 gates and 178 wires to a netlist network with 19 inputs and 27 outputs.

27.22.18.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.18.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               MUX cells:        2
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              NAND cells:        7
ABC RESULTS:                OR cells:       35
ABC RESULTS:               NOR cells:       10
ABC RESULTS:               AND cells:        4
ABC RESULTS:            ANDNOT cells:       58
ABC RESULTS:        internal signals:      132
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       27
Removing temp directory.

27.22.19. Extracting gate netlist of module `\sys_control_tx' to `<abc-temp-dir>/input.blif'..
Extracted 88 gates and 119 wires to a netlist network with 30 inputs and 13 outputs.

27.22.19.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.19.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              NAND cells:        2
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:               NOR cells:        3
ABC RESULTS:            ANDNOT cells:       51
ABC RESULTS:        internal signals:       76
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       13
Removing temp directory.

27.22.20. Extracting gate netlist of module `\system_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.21. Extracting gate netlist of module `\uart_rx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.22. Extracting gate netlist of module `\uart_rx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 163 gates and 186 wires to a netlist network with 22 inputs and 8 outputs.

27.22.22.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.22.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOT cells:        9
ABC RESULTS:               MUX cells:        1
ABC RESULTS:             ORNOT cells:        9
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               AND cells:        3
ABC RESULTS:               XOR cells:       20
ABC RESULTS:                OR cells:       31
ABC RESULTS:            ANDNOT cells:       45
ABC RESULTS:        internal signals:      156
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        8
Removing temp directory.

27.22.23. Extracting gate netlist of module `\uart_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.24. Extracting gate netlist of module `\uart_tx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

27.22.25. Extracting gate netlist of module `\uart_tx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 58 wires to a netlist network with 6 inputs and 8 outputs.

27.22.25.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

27.22.25.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               NOR cells:        3
ABC RESULTS:                OR cells:        7
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:            ANDNOT cells:       20
ABC RESULTS:        internal signals:       44
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        8
Removing temp directory.

27.23. Executing OPT pass (performing simple optimizations).

27.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
<suppressed ~1 debug messages>
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

27.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~54 debug messages>
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
<suppressed ~3 debug messages>
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 19 cells.

27.23.3. Executing OPT_DFF pass (perform DFF optimizations).

27.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..
Removed 0 unused cells and 1761 unused wires.
<suppressed ~18 debug messages>

27.23.5. Finished fast OPT passes.

27.24. Executing HIERARCHY pass (managing design hierarchy).

27.24.1. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \alu
Used module:     \bit_synchronizer
Used module:     \clk_divider
Used module:     \clk_gate
Used module:     \data_synchronizer
Used module:     \reg_file
Used module:     \reset_synchronizer
Used module:     \sys_control
Used module:         \sys_control_rx
Used module:         \sys_control_tx
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \data_sampling
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \parity_check
Used module:             \stp_check
Used module:             \strt_check
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \parity_calc
Used module:             \serializer
Used module:             \uart_tx_fsm

27.24.2. Analyzing design hierarchy..
Top module:  \system_top
Used module:     \alu
Used module:     \bit_synchronizer
Used module:     \clk_divider
Used module:     \clk_gate
Used module:     \data_synchronizer
Used module:     \reg_file
Used module:     \reset_synchronizer
Used module:     \sys_control
Used module:         \sys_control_rx
Used module:         \sys_control_tx
Used module:     \uart_top
Used module:         \uart_rx
Used module:             \data_sampling
Used module:             \deserializer
Used module:             \edge_bit_counter
Used module:             \parity_check
Used module:             \stp_check
Used module:             \strt_check
Used module:             \uart_rx_fsm
Used module:         \uart_tx
Used module:             \mux
Used module:             \parity_calc
Used module:             \serializer
Used module:             \uart_tx_fsm
Removed 0 unused modules.

27.25. Printing statistics.

=== alu ===

   Number of wires:               2216
   Number of wire bits:           2263
   Number of public wires:          10
   Number of public wire bits:      57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2239
     $_ANDNOT_                     805
     $_AND_                         99
     $_DFF_PN0_                     17
     $_MUX_                        183
     $_NAND_                        44
     $_NOR_                        169
     $_NOT_                        115
     $_ORNOT_                       82
     $_OR_                         322
     $_XNOR_                        96
     $_XOR_                        307

=== bit_synchronizer ===

   Number of wires:                  5
   Number of wire bits:              6
   Number of public wires:           5
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_PN0_                      3

=== clk_divider ===

   Number of wires:                 54
   Number of wire bits:             66
   Number of public wires:           6
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 58
     $_ANDNOT_                      21
     $_AND_                          2
     $_DFF_PN0_                      5
     $_NAND_                         3
     $_NOT_                          1
     $_ORNOT_                        3
     $_OR_                          10
     $_XNOR_                         6
     $_XOR_                          7

=== clk_gate ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_AND_                          1
     $_DLATCH_N_                     1

=== data_sampling ===

   Number of wires:                 63
   Number of wire bits:             73
   Number of public wires:           8
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 59
     $_ANDNOT_                      10
     $_AND_                          2
     $_DFFE_PN0P_                    3
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                          5
     $_ORNOT_                        1
     $_OR_                          16
     $_XNOR_                         2
     $_XOR_                         16

=== data_synchronizer ===

   Number of wires:                  8
   Number of wire bits:             24
   Number of public wires:           8
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $_ANDNOT_                       1
     $_DFFE_PN0P_                    8
     $_DFF_PN0_                      4

=== deserializer ===

   Number of wires:                  7
   Number of wire bits:             21
   Number of public wires:           7
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_AND_                          8
     $_DFFE_PN0P_                    8

=== edge_bit_counter ===

   Number of wires:                 56
   Number of wire bits:             74
   Number of public wires:           7
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 65
     $_ANDNOT_                      17
     $_AND_                          2
     $_DFFE_PN0P_                    9
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          4
     $_ORNOT_                        1
     $_OR_                          11
     $_XNOR_                         4
     $_XOR_                         12

=== mux ===

   Number of wires:                 10
   Number of wire bits:             11
   Number of public wires:           4
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $_ANDNOT_                       2
     $_NAND_                         1
     $_NOR_                          1
     $_ORNOT_                        1
     $_OR_                           2

=== parity_calc ===

   Number of wires:                 17
   Number of wire bits:             24
   Number of public wires:           6
   Number of public wire bits:      13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $_ANDNOT_                       1
     $_AND_                          1
     $_DFFE_PN0P_                    1
     $_OR_                           1
     $_XNOR_                         3
     $_XOR_                          5

=== parity_check ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_ANDNOT_                       1
     $_DFF_PN0_                      1
     $_XNOR_                         1

=== reg_file ===

   Number of wires:                317
   Number of wire bits:            481
   Number of public wires:          28
   Number of public wire bits:     185
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                433
     $_ANDNOT_                     141
     $_AND_                          2
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                  133
     $_DFFE_PN1P_                    3
     $_MUX_                          8
     $_NAND_                         8
     $_ORNOT_                        4
     $_OR_                         133

=== reset_synchronizer ===

   Number of wires:                  4
   Number of wire bits:              6
   Number of public wires:           4
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_DFF_PN0_                      3

=== serializer ===

   Number of wires:                 18
   Number of wire bits:             43
   Number of public wires:          10
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 29
     $_ANDNOT_                       3
     $_AND_                          2
     $_DFFE_PN0P_                   11
     $_MUX_                          7
     $_NAND_                         1
     $_ORNOT_                        2
     $_OR_                           1
     $_XNOR_                         1
     $_XOR_                          1

=== stp_check ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_ANDNOT_                       1

=== strt_check ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_AND_                          1

=== sys_control ===

   Number of wires:                 23
   Number of wire bits:             94
   Number of public wires:          23
   Number of public wire bits:      94
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     sys_control_rx                  1
     sys_control_tx                  1

=== sys_control_rx ===

   Number of wires:                126
   Number of wire bits:            199
   Number of public wires:          26
   Number of public wire bits:      99
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                159
     $_ANDNOT_                      58
     $_AND_                          4
     $_DFFE_PN0P_                   28
     $_DFF_PN0_                      4
     $_MUX_                          2
     $_NAND_                         7
     $_NOR_                         10
     $_NOT_                          1
     $_ORNOT_                       10
     $_OR_                          35

=== sys_control_tx ===

   Number of wires:                 78
   Number of wire bits:            111
   Number of public wires:          11
   Number of public wire bits:      44
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                      51
     $_DFFE_PN0P_                    3
     $_MUX_                          2
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                       12
     $_OR_                           7

=== system_top ===

   Number of wires:                 35
   Number of wire bits:            126
   Number of public wires:          35
   Number of public wire bits:     126
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     alu                             1
     bit_synchronizer                1
     clk_divider                     1
     clk_gate                        1
     data_synchronizer               2
     reg_file                        1
     reset_synchronizer              2
     sys_control                     1
     uart_top                        1

=== uart_rx ===

   Number of wires:                 20
   Number of wire bits:             38
   Number of public wires:          20
   Number of public wire bits:      38
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     data_sampling                   1
     deserializer                    1
     edge_bit_counter                1
     parity_check                    1
     stp_check                       1
     strt_check                      1
     uart_rx_fsm                     1

=== uart_rx_fsm ===

   Number of wires:                138
   Number of wire bits:            153
   Number of public wires:          19
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                129
     $_ANDNOT_                      45
     $_AND_                          3
     $_DFFE_PN0P_                    3
     $_MUX_                          1
     $_NAND_                         1
     $_NOR_                          4
     $_NOT_                          9
     $_ORNOT_                        9
     $_OR_                          31
     $_XNOR_                         3
     $_XOR_                         20

=== uart_top ===

   Number of wires:                 13
   Number of wire bits:             31
   Number of public wires:          13
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     uart_rx                         1
     uart_tx                         1

=== uart_tx ===

   Number of wires:                 13
   Number of wire bits:             21
   Number of public wires:          13
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     mux                             1
     parity_calc                     1
     serializer                      1
     uart_tx_fsm                     1

=== uart_tx_fsm ===

   Number of wires:                 45
   Number of wire bits:             51
   Number of public wires:          10
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     $_ANDNOT_                      20
     $_DFFE_PN0P_                    1
     $_DFF_PN0_                      3
     $_NAND_                         2
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                        6
     $_OR_                           7

=== design hierarchy ===

   system_top                        1
     alu                             1
     bit_synchronizer                1
     clk_divider                     1
     clk_gate                        1
     data_synchronizer               2
     reg_file                        1
     reset_synchronizer              2
     sys_control                     1
       sys_control_rx                1
       sys_control_tx                1
     uart_top                        1
       uart_rx                       1
         data_sampling               1
         deserializer                1
         edge_bit_counter            1
         parity_check                1
         stp_check                   1
         strt_check                  1
         uart_rx_fsm                 1
       uart_tx                       1
         mux                         1
         parity_calc                 1
         serializer                  1
         uart_tx_fsm                 1

   Number of wires:               3296
   Number of wire bits:           3964
   Number of public wires:         302
   Number of public wire bits:     941
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3374
     $_ANDNOT_                    1178
     $_AND_                        127
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                  216
     $_DFFE_PN1P_                    3
     $_DFF_PN0_                     47
     $_DLATCH_N_                     1
     $_MUX_                        203
     $_NAND_                        73
     $_NOR_                        195
     $_NOT_                        139
     $_ORNOT_                      131
     $_OR_                         576
     $_XNOR_                       116
     $_XOR_                        368

27.26. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

28. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Checking module bit_synchronizer...
Checking module clk_divider...
Checking module clk_gate...
Checking module data_sampling...
Checking module data_synchronizer...
Checking module deserializer...
Checking module edge_bit_counter...
Checking module mux...
Checking module parity_calc...
Checking module parity_check...
Checking module reg_file...
Checking module reset_synchronizer...
Checking module serializer...
Checking module stp_check...
Checking module strt_check...
Checking module sys_control...
Checking module sys_control_rx...
Checking module sys_control_tx...
Checking module system_top...
Checking module uart_rx...
Checking module uart_rx_fsm...
Checking module uart_top...
Checking module uart_tx...
Checking module uart_tx_fsm...
Found and reported 0 problems.

29. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

29.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alu':
  mapped 17 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\bit_synchronizer':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\clk_divider':
  mapped 5 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\clk_gate':
Mapping DFF cells in module `\data_sampling':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\data_synchronizer':
  mapped 12 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\deserializer':
  mapped 8 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\edge_bit_counter':
  mapped 9 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\mux':
Mapping DFF cells in module `\parity_calc':
  mapped 1 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\parity_check':
  mapped 1 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\reg_file':
  mapped 137 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\reset_synchronizer':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\serializer':
  mapped 11 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\stp_check':
Mapping DFF cells in module `\strt_check':
Mapping DFF cells in module `\sys_control':
Mapping DFF cells in module `\sys_control_rx':
  mapped 32 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\sys_control_tx':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\system_top':
Mapping DFF cells in module `\uart_rx':
Mapping DFF cells in module `\uart_rx_fsm':
  mapped 3 $_DFFSR_PNN_ cells to \DFFSR cells.
Mapping DFF cells in module `\uart_top':
Mapping DFF cells in module `\uart_tx':
Mapping DFF cells in module `\uart_tx_fsm':
  mapped 4 $_DFFSR_PNN_ cells to \DFFSR cells.

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bit_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \clk_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_sampling..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \deserializer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \edge_bit_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \parity_calc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \parity_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reset_synchronizer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \serializer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \stp_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \strt_check..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sys_control_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_rx_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \uart_tx_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
  Optimizing cells in module \bit_synchronizer.
  Optimizing cells in module \clk_divider.
  Optimizing cells in module \clk_gate.
  Optimizing cells in module \data_sampling.
  Optimizing cells in module \data_synchronizer.
  Optimizing cells in module \deserializer.
  Optimizing cells in module \edge_bit_counter.
  Optimizing cells in module \mux.
  Optimizing cells in module \parity_calc.
  Optimizing cells in module \parity_check.
  Optimizing cells in module \reg_file.
  Optimizing cells in module \reset_synchronizer.
  Optimizing cells in module \serializer.
  Optimizing cells in module \stp_check.
  Optimizing cells in module \strt_check.
  Optimizing cells in module \sys_control.
  Optimizing cells in module \sys_control_rx.
  Optimizing cells in module \sys_control_tx.
  Optimizing cells in module \system_top.
  Optimizing cells in module \uart_rx.
  Optimizing cells in module \uart_rx_fsm.
  Optimizing cells in module \uart_top.
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_fsm.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Finding identical cells in module `\bit_synchronizer'.
Finding identical cells in module `\clk_divider'.
Finding identical cells in module `\clk_gate'.
Finding identical cells in module `\data_sampling'.
Finding identical cells in module `\data_synchronizer'.
Finding identical cells in module `\deserializer'.
Finding identical cells in module `\edge_bit_counter'.
Finding identical cells in module `\mux'.
Finding identical cells in module `\parity_calc'.
Finding identical cells in module `\parity_check'.
Finding identical cells in module `\reg_file'.
Finding identical cells in module `\reset_synchronizer'.
Finding identical cells in module `\serializer'.
Finding identical cells in module `\stp_check'.
Finding identical cells in module `\strt_check'.
Finding identical cells in module `\sys_control'.
Finding identical cells in module `\sys_control_rx'.
Finding identical cells in module `\sys_control_tx'.
Finding identical cells in module `\system_top'.
Finding identical cells in module `\uart_rx'.
Finding identical cells in module `\uart_rx_fsm'.
Finding identical cells in module `\uart_top'.
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_fsm'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \bit_synchronizer..
Finding unused cells or wires in module \clk_divider..
Finding unused cells or wires in module \clk_gate..
Finding unused cells or wires in module \data_sampling..
Finding unused cells or wires in module \data_synchronizer..
Finding unused cells or wires in module \deserializer..
Finding unused cells or wires in module \edge_bit_counter..
Finding unused cells or wires in module \mux..
Finding unused cells or wires in module \parity_calc..
Finding unused cells or wires in module \parity_check..
Finding unused cells or wires in module \reg_file..
Finding unused cells or wires in module \reset_synchronizer..
Finding unused cells or wires in module \serializer..
Finding unused cells or wires in module \stp_check..
Finding unused cells or wires in module \strt_check..
Finding unused cells or wires in module \sys_control..
Finding unused cells or wires in module \sys_control_rx..
Finding unused cells or wires in module \sys_control_tx..
Finding unused cells or wires in module \system_top..
Finding unused cells or wires in module \uart_rx..
Finding unused cells or wires in module \uart_rx_fsm..
Finding unused cells or wires in module \uart_top..
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_fsm..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
Optimizing module bit_synchronizer.
Optimizing module clk_divider.
Optimizing module clk_gate.
Optimizing module data_sampling.
Optimizing module data_synchronizer.
Optimizing module deserializer.
Optimizing module edge_bit_counter.
Optimizing module mux.
Optimizing module parity_calc.
Optimizing module parity_check.
Optimizing module reg_file.
Optimizing module reset_synchronizer.
Optimizing module serializer.
Optimizing module stp_check.
Optimizing module strt_check.
Optimizing module sys_control.
Optimizing module sys_control_rx.
Optimizing module sys_control_tx.
Optimizing module system_top.
Optimizing module uart_rx.
Optimizing module uart_rx_fsm.
Optimizing module uart_top.
Optimizing module uart_tx.
Optimizing module uart_tx_fsm.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing ABC pass (technology mapping using ABC).

31.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 2222 gates and 2243 wires to a netlist network with 21 inputs and 16 outputs.

31.1.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.1.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        8
ABC RESULTS:            MUX2X1 cells:        2
ABC RESULTS:           OAI22X1 cells:        5
ABC RESULTS:           AOI22X1 cells:       21
ABC RESULTS:            AND2X2 cells:       40
ABC RESULTS:           XNOR2X1 cells:       42
ABC RESULTS:            XOR2X1 cells:       30
ABC RESULTS:            NOR2X1 cells:      173
ABC RESULTS:             OR2X2 cells:       12
ABC RESULTS:           NAND3X1 cells:      107
ABC RESULTS:             INVX1 cells:      164
ABC RESULTS:           NAND2X1 cells:      155
ABC RESULTS:           OAI21X1 cells:      230
ABC RESULTS:           AOI21X1 cells:       81
ABC RESULTS:        internal signals:     2206
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

31.2. Extracting gate netlist of module `\bit_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

31.3. Extracting gate netlist of module `\clk_divider' to `<abc-temp-dir>/input.blif'..
Extracted 53 gates and 64 wires to a netlist network with 11 inputs and 6 outputs.

31.3.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.51 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.3.2. Re-integrating ABC results.
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:            XOR2X1 cells:        2
ABC RESULTS:            NOR2X1 cells:        4
ABC RESULTS:             INVX1 cells:       10
ABC RESULTS:           NAND3X1 cells:        5
ABC RESULTS:           XNOR2X1 cells:        3
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:           OAI21X1 cells:        5
ABC RESULTS:           AOI21X1 cells:       13
ABC RESULTS:        internal signals:       47
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        6
Removing temp directory.

31.4. Extracting gate netlist of module `\clk_gate' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

31.4.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

31.5. Extracting gate netlist of module `\data_sampling' to `<abc-temp-dir>/input.blif'..
Extracted 59 gates and 73 wires to a netlist network with 14 inputs and 4 outputs.

31.5.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.5.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:             INVX1 cells:       12
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:            AND2X2 cells:        6
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           XNOR2X1 cells:        2
ABC RESULTS:           NAND3X1 cells:        9
ABC RESULTS:            NOR2X1 cells:        8
ABC RESULTS:           NAND2X1 cells:       17
ABC RESULTS:           OAI21X1 cells:       14
ABC RESULTS:        internal signals:       55
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        4
Removing temp directory.

31.6. Extracting gate netlist of module `\data_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 9 gates and 27 wires to a netlist network with 18 inputs and 9 outputs.

31.6.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.6.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        2
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:           NAND3X1 cells:        8
ABC RESULTS:           NAND2X1 cells:        8
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       18
ABC RESULTS:          output signals:        9
Removing temp directory.

31.7. Extracting gate netlist of module `\deserializer' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 27 wires to a netlist network with 11 inputs and 16 outputs.

31.7.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.7.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:            NOR2X1 cells:        8
ABC RESULTS:           NAND2X1 cells:        8
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:       16
Removing temp directory.

31.8. Extracting gate netlist of module `\edge_bit_counter' to `<abc-temp-dir>/input.blif'..
Extracted 65 gates and 81 wires to a netlist network with 16 inputs and 9 outputs.

31.8.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.8.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:            AND2X2 cells:        3
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:           NAND3X1 cells:       17
ABC RESULTS:           OAI21X1 cells:       15
ABC RESULTS:           NAND2X1 cells:       10
ABC RESULTS:             INVX1 cells:       17
ABC RESULTS:            NOR2X1 cells:       11
ABC RESULTS:           XNOR2X1 cells:        5
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:        internal signals:       56
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

31.9. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 7 gates and 11 wires to a netlist network with 4 inputs and 1 outputs.

31.9.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.9.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:        internal signals:        6
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

31.10. Extracting gate netlist of module `\parity_calc' to `<abc-temp-dir>/input.blif'..
Extracted 12 gates and 23 wires to a netlist network with 11 inputs and 1 outputs.

31.10.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.10.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           OAI21X1 cells:        3
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        8
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:           AOI22X1 cells:        5
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        1
Removing temp directory.

31.11. Extracting gate netlist of module `\parity_check' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 5 wires to a netlist network with 3 inputs and 1 outputs.

31.11.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.11.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

31.12. Extracting gate netlist of module `\reg_file' to `<abc-temp-dir>/input.blif'..
Extracted 433 gates and 584 wires to a netlist network with 151 inputs and 137 outputs.

31.12.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.12.2. Re-integrating ABC results.
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:            NOR3X1 cells:       19
ABC RESULTS:           AOI22X1 cells:       28
ABC RESULTS:           NAND3X1 cells:       47
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:            AND2X2 cells:        5
ABC RESULTS:           NAND2X1 cells:      130
ABC RESULTS:            NOR2X1 cells:       52
ABC RESULTS:           AOI21X1 cells:       36
ABC RESULTS:             INVX1 cells:       60
ABC RESULTS:           OAI21X1 cells:      129
ABC RESULTS:        internal signals:      296
ABC RESULTS:           input signals:      151
ABC RESULTS:          output signals:      137
Removing temp directory.

31.13. Extracting gate netlist of module `\reset_synchronizer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

31.14. Extracting gate netlist of module `\serializer' to `<abc-temp-dir>/input.blif'..
Extracted 29 gates and 51 wires to a netlist network with 22 inputs and 12 outputs.

31.14.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.51 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.14.2. Re-integrating ABC results.
ABC RESULTS:           NAND2X1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:           AOI22X1 cells:        7
ABC RESULTS:            NOR3X1 cells:        7
ABC RESULTS:           OAI22X1 cells:        7
ABC RESULTS:             INVX1 cells:       13
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:           OAI21X1 cells:        4
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:       12
Removing temp directory.

31.15. Extracting gate netlist of module `\stp_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

31.15.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.15.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

31.16. Extracting gate netlist of module `\strt_check' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

31.16.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.16.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

31.17. Extracting gate netlist of module `\sys_control' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

31.18. Extracting gate netlist of module `\sys_control_rx' to `<abc-temp-dir>/input.blif'..
Extracted 155 gates and 222 wires to a netlist network with 67 inputs and 54 outputs.

31.18.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.51 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.18.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:            NOR3X1 cells:        3
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:           NAND3X1 cells:       16
ABC RESULTS:           AOI21X1 cells:        7
ABC RESULTS:            NOR2X1 cells:       29
ABC RESULTS:             INVX1 cells:       47
ABC RESULTS:           NAND2X1 cells:       28
ABC RESULTS:           OAI21X1 cells:       49
ABC RESULTS:        internal signals:      101
ABC RESULTS:           input signals:       67
ABC RESULTS:          output signals:       54
Removing temp directory.

31.19. Extracting gate netlist of module `\sys_control_tx' to `<abc-temp-dir>/input.blif'..
Extracted 82 gates and 112 wires to a netlist network with 30 inputs and 12 outputs.

31.19.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.51 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.19.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:           NAND2X1 cells:       27
ABC RESULTS:            NOR2X1 cells:        2
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:        9
ABC RESULTS:           NAND3X1 cells:       15
ABC RESULTS:           OAI21X1 cells:        6
ABC RESULTS:        internal signals:       70
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       12
Removing temp directory.

31.20. Extracting gate netlist of module `\system_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

31.21. Extracting gate netlist of module `\uart_rx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

31.22. Extracting gate netlist of module `\uart_rx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 129 gates and 151 wires to a netlist network with 22 inputs and 7 outputs.

31.22.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.22.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:       22
ABC RESULTS:           NAND3X1 cells:       18
ABC RESULTS:            AND2X2 cells:        7
ABC RESULTS:           NAND2X1 cells:       20
ABC RESULTS:            NOR2X1 cells:       19
ABC RESULTS:           AOI21X1 cells:        8
ABC RESULTS:             OR2X2 cells:        6
ABC RESULTS:           OAI21X1 cells:       32
ABC RESULTS:        internal signals:      122
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        7
Removing temp directory.

31.23. Extracting gate netlist of module `\uart_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

31.24. Extracting gate netlist of module `\uart_tx' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

31.25. Extracting gate netlist of module `\uart_tx_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 41 gates and 48 wires to a netlist network with 7 inputs and 7 outputs.

31.25.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

31.25.2. Re-integrating ABC results.
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:             INVX1 cells:        7
ABC RESULTS:           OAI21X1 cells:        6
ABC RESULTS:           NAND2X1 cells:        5
ABC RESULTS:        internal signals:       34
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        7
Removing temp directory.

32. Executing FLATTEN pass (flatten design).
Deleting now unused module alu.
Deleting now unused module bit_synchronizer.
Deleting now unused module clk_divider.
Deleting now unused module clk_gate.
Deleting now unused module data_sampling.
Deleting now unused module data_synchronizer.
Deleting now unused module deserializer.
Deleting now unused module edge_bit_counter.
Deleting now unused module mux.
Deleting now unused module parity_calc.
Deleting now unused module parity_check.
Deleting now unused module reg_file.
Deleting now unused module reset_synchronizer.
Deleting now unused module serializer.
Deleting now unused module stp_check.
Deleting now unused module strt_check.
Deleting now unused module sys_control.
Deleting now unused module sys_control_rx.
Deleting now unused module sys_control_tx.
Deleting now unused module uart_rx.
Deleting now unused module uart_rx_fsm.
Deleting now unused module uart_top.
Deleting now unused module uart_tx.
Deleting now unused module uart_tx_fsm.
<suppressed ~26 debug messages>

33. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 3941 unused wires.

34. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port system_top.ref_clk: Missing option -inpad.
Don't map input port system_top.reset_n: Missing option -inpad.
Don't map input port system_top.rx_in: Missing option -inpad.
Mapping port system_top.tx_out using BUFX2.
Don't map input port system_top.uart_clk: Missing option -inpad.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module system_top.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system_top'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \system_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \system_top.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\system_top'.
Removed a total of 0 cells.

35.6. Executing OPT_DFF pass (perform DFF optimizations).

35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \system_top..

35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module system_top.

35.9. Finished OPT passes. (There is nothing left to do.)

36. Executing BLIF backend.

37. Executing CXXRTL backend.

37.1. Executing HIERARCHY pass (managing design hierarchy).

37.1.1. Analyzing design hierarchy..
Top module:  \system_top

37.1.2. Analyzing design hierarchy..
Top module:  \system_top
Removed 0 unused modules.

37.2. Executing FLATTEN pass (flatten design).

37.3. Executing PROC pass (convert processes to netlists).

37.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

37.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

37.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

37.3.4. Executing PROC_INIT pass (extract init attributes).

37.3.5. Executing PROC_ARST pass (detect async resets in processes).

37.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

37.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

37.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

37.3.9. Executing PROC_DFF pass (convert process syncs to FFs).

37.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

37.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

37.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module system_top.
